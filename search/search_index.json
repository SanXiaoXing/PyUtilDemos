{"config":{"lang":["en"],"separator":"[\\s\\u200b\\u3000\\-\u3001\u3002\uff0c\uff0e\uff1f\uff01\uff1b]+","pipeline":["stemmer"]},"docs":[{"location":"","title":"py-util-demos","text":"<p>\u57fa\u4e8e Python \u4e0e PyQt5 \u7684\u5b9e\u7528\u5de5\u5177\u96c6\u5408\uff0c\u5305\u542b\u591a\u4e2a\u529f\u80fd\u6a21\u5757\uff0c\u5982\u65e5\u5fd7\u67e5\u770b\u5668\u3001\u6570\u636e\u76d1\u63a7\u3001\u6821\u51c6\u5de5\u5177\u7b49\u3002</p> <ul> <li>\u4ee3\u7801\u4ed3\u5e93: https://gitee.com/jjycode/py-util-demos</li> <li>\u8fd0\u884c\u4e3b\u754c\u9762: <code>python main.py</code></li> </ul> <p>\u6587\u6863\u7ed3\u6784\uff1a - \u9996\u9875\uff08\u5f53\u524d\u9875\u9762\uff09 - API \u6587\u6863\uff08\u81ea\u52a8\u4ece\u6e90\u7801\u751f\u6210\uff09</p>"},{"location":"#_1","title":"\u5982\u9700\u672c\u5730\u9884\u89c8\u6587\u6863","text":""},{"location":"#_2","title":"\u5982\u4f55\u5b89\u88c5","text":"<ol> <li>\u5b89\u88c5\u4f9d\u8d56\u5e93\uff1a<code>pip install mkdocs</code></li> <li>Python \u4ee3\u7801\u7684\u81ea\u52a8\u6587\u6863\u751f\u6210\uff1a<code>pip install mkdocstrings[python]</code></li> <li>\u5b89\u88c5 mkdocs-material \u4e3b\u9898\u5305\uff1a <code>pip install mkdocs-material</code></li> <li>\u542f\u52a8\u6587\u6863\u670d\u52a1\uff1a<code>mkdocs serve</code></li> </ol>"},{"location":"#_3","title":"\u5982\u4f55\u4f7f\u7528","text":"<ol> <li>\u8bbf\u95ee http://localhost:8000/ \u67e5\u770b\u6587\u6863</li> </ol>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p>"},{"location":"CHANGELOG/#2025-08-14","title":"2025-08-14","text":""},{"location":"CHANGELOG/#bug-fixes","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>(resourcequery) \u66f4\u65b0 ResourceQueryTool.py \u4e2d\u7684\u5bfc\u5165\u8def\u5f84 by @XiaoXing San (<code>696bc61</code>)</li> </ul>"},{"location":"CHANGELOG/#refactor","title":"\u267b\ufe0f Refactor","text":"<ul> <li>(resourcequery) \u5b9e\u73b0\u5217\u5934\u7b5b\u9009\u529f\u80fd by @XiaoXing San (<code>bc6403b</code>)</li> </ul>"},{"location":"CHANGELOG/#refactor_1","title":"\u267b\ufe0f Refactor","text":"<ul> <li>\u79fb\u9664\u4e86\u91cd\u590d\u7684py by @JJYCode (<code>3539b7d</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-08-13","title":"2025-08-13","text":""},{"location":"CHANGELOG/#features","title":"\ud83d\ude80 Features","text":"<ul> <li>(ResourceQuery) \u6dfb\u52a0\u8d44\u6e90\u7d22\u5f15\u67e5\u8be2\u529f\u80fd by @SanXiaoXing (<code>303d120</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-08-12","title":"2025-08-12","text":""},{"location":"CHANGELOG/#bug-fixes_1","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>(LogViewer) \u4f18\u5316\u65e5\u5fd7\u6587\u4ef6\u65e5\u671f\u89e3\u6790\u548c\u9519\u8bef\u5904\u7406 by @SanXiaoXing (<code>0f473fa</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-16","title":"2025-07-16","text":""},{"location":"CHANGELOG/#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>(README) \u66f4\u65b0 BulbStateMonitor \u6a21\u5757\u5f00\u53d1\u72b6\u6001 by @SanXiaoXing (<code>b2db179</code>)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_2","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Fix icon don't show by @SanXiaoXing (<code>768c060</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-10","title":"2025-07-10","text":""},{"location":"CHANGELOG/#refactor_2","title":"\u267b\ufe0f Refactor","text":"<ul> <li>Delete a file for nothing by @XiaoXing San (<code>e7e67da</code>)</li> </ul>"},{"location":"CHANGELOG/#features_1","title":"\ud83d\ude80 Features","text":"<ul> <li>(main) \u91cd\u6784\u5361\u7247\u7ec4\u4ef6\u5e76\u6dfb\u52a0\u52a8\u753b\u6548\u679c by @XiaoXing San (<code>7ff0e34</code>)</li> </ul>"},{"location":"CHANGELOG/#build","title":"Build","text":"<ul> <li>Nothing by @SanXiaoXing (<code>b0dee02</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-09","title":"2025-07-09","text":""},{"location":"CHANGELOG/#features_2","title":"\ud83d\ude80 Features","text":"<ul> <li>(bulbstatemonitor) \u5b9e\u73b0\u706f\u6ce1\u72b6\u6001\u76d1\u63a7\u5de5\u5177 by @XiaoXing San (<code>2a9c084</code>)</li> </ul>"},{"location":"CHANGELOG/#refactor_3","title":"\u267b\ufe0f Refactor","text":"<ul> <li>(rtdata_plot_demo) Update plot initialization and improve code readability by @JJYCode (<code>2bc8422</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-08","title":"2025-07-08","text":""},{"location":"CHANGELOG/#features_3","title":"\ud83d\ude80 Features","text":"<ul> <li>(RTDataPlot) \u4fee\u6539\u4e86\u9009\u62e9\u53c2\u6570\u7684dialog\uff0c\u589e\u52a0\u4e86checkbox\u548c\u989c\u8272\u9009\u62e9\u5668 by @JJYCode (<code>5f679c1</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-10_1","title":"2025-07-10","text":""},{"location":"CHANGELOG/#bug-fixes_3","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Nothing by @SanXiaoXing (<code>9417fb1</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-16_1","title":"2025-07-16","text":""},{"location":"CHANGELOG/#bug-fixes_4","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>Git rebase fix by @SanXiaoXing (<code>87f355d</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-10_2","title":"2025-07-10","text":""},{"location":"CHANGELOG/#features_4","title":"\ud83d\ude80 Features","text":"<ul> <li>(RTDataPlot) \u5b9e\u73b0\u6570\u636e\u9009\u62e9\u5bf9\u8bdd\u6846\u5e76\u91cd\u6784\u4e3b\u754c\u9762 by @SanXiaoXing (<code>e3124b0</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-09_1","title":"2025-07-09","text":""},{"location":"CHANGELOG/#features_5","title":"\ud83d\ude80 Features","text":"<ul> <li>(bulbstatemonitor) \u5b9e\u73b0\u706f\u6ce1\u72b6\u6001\u76d1\u63a7\u5de5\u5177 by @XiaoXing San (<code>f9967c6</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-08-14_1","title":"2025-08-14","text":""},{"location":"CHANGELOG/#features_6","title":"\ud83d\ude80 Features","text":"<ul> <li>(BusDataMonitor) \u66f4\u65b0\u4e86\u603b\u7ebf\u6570\u636e\u76d1\u63a7\u90e8\u5206\u529f\u80fddemo\uff0c\u5e76\u672a\u5b8c\u6210 by @JJYCode (<code>3773ab7</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-23","title":"2025-07-23","text":""},{"location":"CHANGELOG/#features_7","title":"\ud83d\ude80 Features","text":"<ul> <li>(CustomWidgets) Add multiple UI components and refactor directory structure by @JJYCode (<code>b9fc320</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-22","title":"2025-07-22","text":""},{"location":"CHANGELOG/#features_8","title":"\ud83d\ude80 Features","text":"<ul> <li>(CustomWidgets) \u91cd\u6784\u4e86\u81ea\u5b9a\u4e49\u63a7\u4ef6\u6a21\u5757\uff0c\u5e76\u4e14\u5728main\u4e2d\u589e\u52a0\u4e86\u754c\u9762\u94fe\u63a5 by @JJYCode (<code>d18d686</code>)</li> </ul>"},{"location":"CHANGELOG/#features_9","title":"\ud83d\ude80 Features","text":"<ul> <li>(Cfg2UI components) \u589e\u808c\u4e86\u6839\u636e\u914d\u7f6e\u6587\u4ef6\u751f\u6210UI\u7684\u65b9\u6cd5\uff0c\u589e\u52a0\u4e86\u81ea\u5b9a\u4e49\u63a7\u4ef6\u4eea\u8868\u76d8\u7c7b\u578b\uff08\u5706\u5f62\u548c\u6247\u5f62\uff09 by @JJYCode (<code>6707339</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-16_2","title":"2025-07-16","text":""},{"location":"CHANGELOG/#documentation_1","title":"\ud83d\udcda Documentation","text":"<ul> <li>(README) \u66f4\u65b0 BulbStateMonitor \u6a21\u5757\u5f00\u53d1\u72b6\u6001 by @SanXiaoXing (<code>11e4da2</code>)</li> </ul>"},{"location":"CHANGELOG/#bug-fixes_5","title":"\ud83d\udc1b Bug Fixes","text":"<ul> <li>(ICON) Fix icon don't show by @SanXiaoXing (<code>8e0acbc</code>)</li> </ul>"},{"location":"CHANGELOG/#styling","title":"\ud83c\udfa8 Styling","text":"<ul> <li>(DataReplay) \u4f18\u5316\u4e86UI by @JJYCode (<code>093faae</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-15","title":"2025-07-15","text":""},{"location":"CHANGELOG/#refactor_4","title":"\u267b\ufe0f Refactor","text":"<ul> <li>(DataReplay) \u66f4\u65b0\u4e86UI\uff0c\u589e\u52a0\u4e86\u66f2\u7ebf\u9ad8\u4eae\uff0c\u5149\u6807\u60ac\u6d6e\u663e\u793a\u5f53\u524d\u503c\u7b49\u529f\u80fd by @JJYCode (<code>11d2401</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-14","title":"2025-07-14","text":""},{"location":"CHANGELOG/#refactor_5","title":"\u267b\ufe0f Refactor","text":"<ul> <li>(DataReplay) \u91cd\u6784\u4e86\u6570\u636e\u56de\u653e\u6a21\u5757\u7684\u5b9e\u73b0\u65b9\u6cd5 by @JJYCode (<code>380544a</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-12","title":"2025-07-12","text":""},{"location":"CHANGELOG/#features_10","title":"\ud83d\ude80 Features","text":"<ul> <li>(BulbStateMonitor) \u4f18\u5316\u6570\u636e\u5904\u7406\u548c\u7528\u6237\u754c\u9762 by @SanXiaoXing (<code>c189d19</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-11","title":"2025-07-11","text":""},{"location":"CHANGELOG/#features_11","title":"\ud83d\ude80 Features","text":"<ul> <li>(RTDataPlot) \u4f18\u5316\u4e86\u5b9e\u65f6\u6570\u636e\u91c7\u96c6\u7684UI by @JJYCode (<code>02baf49</code>)</li> </ul>"},{"location":"CHANGELOG/#miscellaneous-tasks","title":"\u2699\ufe0f Miscellaneous Tasks","text":"<ul> <li>\u5220\u9664 fill-shit-ac.svg \u6587\u4ef6 by @SanXiaoXing (<code>9ab8638</code>)</li> </ul>"},{"location":"CHANGELOG/#features_12","title":"\ud83d\ude80 Features","text":"<ul> <li>(main) \u589e\u52a0\u4e86\u4e3b\u9875\u56fe\u6807\u548c\u5b50\u9875\u9762\u7684\u8fde\u63a5 by @JJYCode (<code>8237def</code>)</li> </ul>"},{"location":"CHANGELOG/#documentation_2","title":"\ud83d\udcda Documentation","text":"<ul> <li>Remove trivial item from TODO list by @JJYCode (<code>f5b65a0</code>)</li> </ul>"},{"location":"CHANGELOG/#refactor_6","title":"\u267b\ufe0f Refactor","text":"<ul> <li>(main) \u4f18\u5316\u4e3b\u7a0b\u5e8f\u4ee3\u7801\u7ed3\u6784 by @SanXiaoXing (<code>146a3d1</code>)</li> </ul>"},{"location":"CHANGELOG/#features_13","title":"\ud83d\ude80 Features","text":"<ul> <li>(main) \u4f18\u5316UI\u7ec4\u4ef6\uff0c\u5f15\u5165\u6eda\u52a8\u5361\u7247\u5217\u8868 by @JJYCode (<code>394126c</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-10_3","title":"2025-07-10","text":""},{"location":"CHANGELOG/#documentation_3","title":"\ud83d\udcda Documentation","text":"<ul> <li>Update file about requirements by @XiaoXing San (<code>ce11c20</code>)</li> </ul>"},{"location":"CHANGELOG/#features_14","title":"\ud83d\ude80 Features","text":"<ul> <li>(main) \u91cd\u6784\u5361\u7247\u7ec4\u4ef6\u5e76\u6dfb\u52a0\u52a8\u753b\u6548\u679c by @XiaoXing San (<code>30e728c</code>)</li> </ul>"},{"location":"CHANGELOG/#features_15","title":"\ud83d\ude80 Features","text":"<ul> <li>(main) \u91cd\u6784\u5361\u7247\u7ec4\u4ef6\u5e76\u6dfb\u52a0\u52a8\u753b\u6548\u679c by @XiaoXing San (<code>85160f5</code>)</li> </ul>"},{"location":"CHANGELOG/#features_16","title":"\ud83d\ude80 Features","text":"<ul> <li>(main) \u91cd\u6784\u5361\u7247\u7ec4\u4ef6\u5e76\u6dfb\u52a0\u52a8\u753b\u6548\u679c by @XiaoXing San (<code>3a2b462</code>)</li> </ul>"},{"location":"CHANGELOG/#features_17","title":"\ud83d\ude80 Features","text":"<ul> <li>(main) \u91cd\u6784\u5361\u7247\u7ec4\u4ef6\u5e76\u6dfb\u52a0\u52a8\u753b\u6548\u679c by @XiaoXing San (<code>ecb96d1</code>)</li> </ul>"},{"location":"CHANGELOG/#documentation_4","title":"\ud83d\udcda Documentation","text":"<ul> <li>Update file about requirements by @XiaoXing San (<code>498fc24</code>)</li> </ul>"},{"location":"CHANGELOG/#features_18","title":"\ud83d\ude80 Features","text":"<ul> <li>(main) \u91cd\u6784\u5361\u7247\u7ec4\u4ef6\u5e76\u6dfb\u52a0\u52a8\u753b\u6548\u679c by @XiaoXing San (<code>94d80f4</code>)</li> </ul>"},{"location":"CHANGELOG/#features_19","title":"\ud83d\ude80 Features","text":"<ul> <li>(main) \u91cd\u6784\u5361\u7247\u7ec4\u4ef6\u5e76\u6dfb\u52a0\u52a8\u753b\u6548\u679c by @XiaoXing San (<code>b86b23e</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-11_1","title":"2025-07-11","text":""},{"location":"CHANGELOG/#features_20","title":"\ud83d\ude80 Features","text":"<ul> <li>(main) \u66f4\u65b0\u4e86main\u7684UI\u5361\u7247\u5f0f by @JJYCode (<code>775f7ad</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-10_4","title":"2025-07-10","text":""},{"location":"CHANGELOG/#features_21","title":"\ud83d\ude80 Features","text":"<ul> <li>(main) \u91cd\u6784\u4e3b\u754c\u9762\u4e3a\u5361\u7247\u7f51\u683c\u5e03\u5c40 by @JJYCode (<code>24fb2da</code>)</li> </ul>"},{"location":"CHANGELOG/#features_22","title":"\ud83d\ude80 Features","text":"<ul> <li>(RTDataPlot) \u589e\u52a0\u4e86\u6a21\u62df\u6570\u636e\uff0cx\u8f74\u4e24\u79cd\u663e\u793a\u65b9\u5f0f\uff08\u56fa\u5b9a\u548c\u6eda\u52a8\uff09\uff0cy\u8f74\u4e24\u79cd\u663e\u793a\u65b9\u5f0f\uff08\u56fa\u5b9a\u548c\u81ea\u52a8\uff09 by @JJYCode (<code>76cc33a</code>)</li> </ul>"},{"location":"CHANGELOG/#refactor_7","title":"\u267b\ufe0f Refactor","text":"<ul> <li>(RTDataPlot) \u589e\u52a0\u4e86\u5728\u56fe\u8868\u4e2d\u663e\u793a\u5b9e\u65f6\u6570\u636e\u7684\u529f\u80fd by @JJYCode (<code>c31e164</code>)</li> </ul>"},{"location":"CHANGELOG/#features_23","title":"\ud83d\ude80 Features","text":"<ul> <li>(RTDataPlot) Add X-axis mode toggling and Y-axis autoscaling and change mainUI by @JJYCode (<code>933f8d8</code>)</li> </ul>"},{"location":"CHANGELOG/#features_24","title":"\ud83d\ude80 Features","text":"<ul> <li>(BulbStateMonitor) \u5b9e\u73b0\u706f\u6ce1\u72b6\u6001\u76d1\u63a7\u529f\u80fd by @SanXiaoXing (<code>c19d9da</code>)</li> </ul>"},{"location":"CHANGELOG/#features_25","title":"\ud83d\ude80 Features","text":"<ul> <li>\u6dfb\u52a0Fluent Design\u98ce\u683c\u7684QSS\u6837\u5f0f\u6f14\u793a\u548c\u6837\u5f0f\u6587\u4ef6 by @SanXiaoXing (<code>01c4aac</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-09_2","title":"2025-07-09","text":""},{"location":"CHANGELOG/#build_1","title":"Build","text":"<ul> <li>\u66f4\u65b0\u9879\u76ee\u4f9d\u8d56\u548c\u5ffd\u7565\u6587\u4ef6 by @XiaoXing San (<code>d633b50</code>)</li> </ul>"},{"location":"CHANGELOG/#features_26","title":"\ud83d\ude80 Features","text":"<ul> <li>(rtdataplot) \u5b9e\u73b0\u6570\u636e\u66f2\u7ebf\u9009\u62e9\u548c\u914d\u7f6e\u529f\u80fd by @XiaoXing San (<code>15dc5ea</code>)</li> </ul>"},{"location":"CHANGELOG/#refactor_8","title":"\u267b\ufe0f Refactor","text":"<ul> <li>(rtdata_plot_demo) Update plot initialization and improve code readability by @JJYCode (<code>da3b1c8</code>)</li> </ul>"},{"location":"CHANGELOG/#features_27","title":"\ud83d\ude80 Features","text":"<ul> <li>(BulbStateMonitor) Add detailed feature requirements and specifications by @JJYCode (<code>b3c7b08</code>)</li> </ul>"},{"location":"CHANGELOG/#features_28","title":"\ud83d\ude80 Features","text":"<ul> <li>(RTDataPlot) \u66f4\u65b0\u4e86\u66f2\u7ebf\u9009\u62e9\u7a97\u53e3\uff0c\u9009\u62e9\u7ed8\u5236\u7684\u6570\u636e\u4ee5\u53ca\u914d\u7f6e\u66f2\u7ebf\u989c\u8272 by @JJYCode (<code>580929e</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-08_1","title":"2025-07-08","text":""},{"location":"CHANGELOG/#features_29","title":"\ud83d\ude80 Features","text":"<ul> <li>(RTDataPlot) \u4fee\u6539\u4e86\u9009\u62e9\u53c2\u6570\u7684dialog\uff0c\u589e\u52a0\u4e86checkbox\u548c\u989c\u8272\u9009\u62e9\u5668 by @JJYCode (<code>68ae5c2</code>)</li> </ul>"},{"location":"CHANGELOG/#features_30","title":"\ud83d\ude80 Features","text":"<ul> <li>(LogViewer) Implement batch delete functionality by @JJYCode (<code>69ca555</code>)</li> </ul>"},{"location":"CHANGELOG/#features_31","title":"\ud83d\ude80 Features","text":"<ul> <li>(LogViewer) \u589e\u52a0\u65e5\u5fd7\u6587\u4ef6\u5220\u9664\u53ca\u6279\u91cf\u5220\u9664\u529f\u80fd\uff0c\u65b0\u589e\u5bf9\u5e94\u65e5\u671f\u65e5\u5fd7\u6587\u4ef6\u5220\u9664 by @SanXiaoXing (<code>0732816</code>)</li> </ul>"},{"location":"CHANGELOG/#features_32","title":"\ud83d\ude80 Features","text":"<ul> <li>(LogViewer) \u589e\u52a0\u65e5\u5fd7\u6587\u4ef6\u5220\u9664\u53ca\u6279\u91cf\u5220\u9664\u529f\u80fd\uff0c\u65b0\u589e\u5bf9\u5e94\u65e5\u671f\u65e5\u5fd7\u6587\u4ef6\u5220\u9664 by @SanXiaoXing (<code>fdd3638</code>)</li> </ul>"},{"location":"CHANGELOG/#features_33","title":"\ud83d\ude80 Features","text":"<ul> <li>(RTDataPlot) \u6dfb\u52a0\u4e86RTDATAPLOT\u4e2d\u5b9e\u65f6\u66f2\u7ebf\u7ed8\u5236\u7684UI\u754c\u9762\u53ca\u90e8\u5206\u4ee3\u7801 by @JJYCode (<code>40bc673</code>)</li> </ul>"},{"location":"CHANGELOG/#features_34","title":"\ud83d\ude80 Features","text":"<ul> <li>(RTDataPlot) \u6dfb\u52a0\u4e86RTDATAPLOT\u4e2d\u5b9e\u65f6\u66f2\u7ebf\u7ed8\u5236\u7684UI\u754c\u9762\u53ca\u90e8\u5206\u4ee3\u7801 by @JJYCode (<code>b54dcfc</code>)</li> </ul>"},{"location":"CHANGELOG/#features_35","title":"\ud83d\ude80 Features","text":"<ul> <li>(BulbStateMonitor) \u6dfb\u52a0\u706f\u6ce1\u72b6\u6001\u76d1\u63a7\u6a21\u5757\u7684\u529f\u80fd\u5b9e\u73b0 by @SanXiaoXing (<code>e557c76</code>)</li> </ul>"},{"location":"CHANGELOG/#documentation_5","title":"\ud83d\udcda Documentation","text":"<ul> <li>(README) \u66f4\u6539README\uff0c\u5b8c\u6210LogViewer\u5185\u5bb9 by @SanXiaoXing (<code>e847774</code>)</li> </ul>"},{"location":"CHANGELOG/#features_36","title":"\ud83d\ude80 Features","text":"<ul> <li>(LogViewer) \u6dfb\u52a0\u6309\u65f6\u95f4\u5220\u9664\u65e5\u5fd7\u529f\u80fd by @SanXiaoXing (<code>464c21d</code>)</li> </ul>"},{"location":"CHANGELOG/#features_37","title":"\ud83d\ude80 Features","text":"<ul> <li>(LogViewer) \u589e\u52a0\u65e5\u5fd7\u6587\u4ef6\u6279\u91cf\u5220\u9664\u529f\u80fd by @SanXiaoXing (<code>940cd1d</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-07","title":"2025-07-07","text":""},{"location":"CHANGELOG/#documentation_6","title":"\ud83d\udcda Documentation","text":"<ul> <li>\u66f4\u65b0 LogViewer \u6a21\u5757\u7684 TODO \u5217\u8868 by @SanXiaoXing (<code>4d99db4</code>)</li> </ul>"},{"location":"CHANGELOG/#refactor_9","title":"\u267b\ufe0f Refactor","text":"<ul> <li>(LogViewer) Adjust layout stretch and remove unnecessary spacer by @JJYCode (<code>9c96b5d</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-06","title":"2025-07-06","text":""},{"location":"CHANGELOG/#features_38","title":"\ud83d\ude80 Features","text":"<ul> <li>(logviewer) \u589e\u52a0\u65e5\u5fd7\u7c7b\u578b\u8fc7\u6ee4\u548c\u4f18\u5316\u65e5\u5fd7\u52a0\u8f7d\u529f\u80fd by @XiaoXing San (<code>9aa9c87</code>)</li> </ul>"},{"location":"CHANGELOG/#features_39","title":"\ud83d\ude80 Features","text":"<ul> <li>(logviewer) \u589e\u52a0\u65e5\u5fd7\u7c7b\u578b\u8fc7\u6ee4\u548c\u4f18\u5316\u65e5\u5fd7\u52a0\u8f7d\u529f\u80fd by @XiaoXing San (<code>6c244fb</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-07_1","title":"2025-07-07","text":""},{"location":"CHANGELOG/#features_40","title":"\ud83d\ude80 Features","text":"<ul> <li>(RTDataPlot) Update UI and add new features by @JJYCode (<code>0ff4f29</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-07-04","title":"2025-07-04","text":""},{"location":"CHANGELOG/#docs","title":"'docs","text":"<ul> <li>(README) \u66f4\u65b0\u9879\u76ee\u76ee\u6807\u5217\u8868' by @JJYCode (<code>49a8e1b</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-06-27","title":"2025-06-27","text":""},{"location":"CHANGELOG/#features_41","title":"\ud83d\ude80 Features","text":"<ul> <li>(RTDataPlot) Add real-time data plotting functionality by @JJYCode (<code>8004bf7</code>)</li> </ul>"},{"location":"CHANGELOG/#features_42","title":"\ud83d\ude80 Features","text":"<ul> <li>(CalibTool) \u589e\u5f3a\u4e86\u6570\u636e\u6821\u9a8c\u903b\u8f91\u548c\u7528\u6237\u4ea4\u4e92\u4f53\u9a8c by @JJYCode (<code>c3b8a65</code>)</li> </ul>"},{"location":"CHANGELOG/#refactor_10","title":"\u267b\ufe0f Refactor","text":"<ul> <li>(CalibTool) \u6dfb\u52a0\u6ce8\u91ca,\u8ba9\u683c\u5f0f\u66f4\u89c4\u8303\u4e00\u4e9b by @JJYCode (<code>dfa8469</code>)</li> </ul>"},{"location":"CHANGELOG/#documentation_7","title":"\ud83d\udcda Documentation","text":"<ul> <li>(README) \u66f4\u65b0\u4e86README\u91cc\u7684\u5f85\u5f00\u53d1\u529f\u80fd\u63cf\u8ff0 by @JJYCode (<code>93398ab</code>)</li> </ul>"},{"location":"CHANGELOG/#features_43","title":"\ud83d\ude80 Features","text":"<ul> <li>(DataReplay) \u6dfb\u52a0\u4e86\u4e00\u4e2adeepseek\u5199\u7684\u5206\u5757\u5f0f\u52a0\u8f7d\u793a\u4f8b\uff0cUpdate\u4e86README by @JJYCode (<code>3752dce</code>)</li> </ul>"},{"location":"CHANGELOG/#documentation_8","title":"\ud83d\udcda Documentation","text":"<ul> <li>(README) Update by @JJYCode (<code>ce35d25</code>)</li> </ul>"},{"location":"CHANGELOG/#refactor_11","title":"\u267b\ufe0f Refactor","text":"<ul> <li>(LogViewer) Update UI code and improve log file handling by @JJYCode (<code>c19faf8</code>)</li> </ul>"},{"location":"CHANGELOG/#2025-06-26","title":"2025-06-26","text":""},{"location":"CHANGELOG/#init","title":"Init","text":"<ul> <li>First commit by @JJYCode (<code>7b0b337</code>)</li> </ul>"},{"location":"ISSUE/","title":"ISSUE\u8bb0\u5f55","text":"","tags":["issue","Python"]},{"location":"ISSUE/#1","title":"\u4e0a\u4f4d\u673a\u6d4b\u8bd5\u7a0b\u5e8f\u9000\u51fa\u65f6\u663e\u793a\u9519\u8bef\u4fe1\u606f","text":"<p> Socket</p> <p>\u5df2\u89e3\u51b3</p> \u95ee\u9898\u8bb0\u5f55\u89e3\u51b3\u65b9\u6848\u4fee\u590d\u6548\u679c <ul> <li>\u5728\u7a0b\u5e8f\u9000\u51fa\u65f6\uff0c\u63a5\u6536\u7ebf\u7a0b\u53ef\u80fd\u8fd8\u5728\u8fd0\u884c\uff0c\u800csocket\u5df2\u7ecf\u88ab\u5173\u95ed\uff0c\u5bfc\u81f4\u7ebf\u7a0b\u4e2d\u51fa\u73b0\u5f02\u5e38</li> <li>\u7ebf\u7a0b\u8d44\u6e90\u6ca1\u6709\u6b63\u786e\u91ca\u653e\uff0c\u53ef\u80fd\u5bfc\u81f4\u8d44\u6e90\u6cc4\u6f0f</li> </ul> <ol> <li> <p>TCPClient.close() \u65b9\u6cd5 \uff1a</p> <ul> <li>\u6dfb\u52a0\u4e86\u7ebf\u7a0b\u7b49\u5f85\u903b\u8f91\uff0c\u4f7f\u7528 join(timeout=2.0) \u7b49\u5f85\u63a5\u6536\u7ebf\u7a0b\u5b8c\u5168\u7ed3\u675f</li> <li>\u5728\u5173\u95edsocket\u4e4b\u524d\u786e\u4fdd\u7ebf\u7a0b\u5df2\u505c\u6b62</li> <li>\u5c06\u7ebf\u7a0b\u5f15\u7528\u8bbe\u7f6e\u4e3a None \uff0c\u786e\u4fdd\u8d44\u6e90\u5b8c\u5168\u91ca\u653e</li> </ul> </li> <li> <p>UpperXMLTester.close() \u65b9\u6cd5 \uff1a</p> <ul> <li>\u540c\u6837\u6dfb\u52a0\u4e86\u7ebf\u7a0b\u7b49\u5f85\u903b\u8f91</li> <li>\u786e\u4fdd\u5728\u5173\u95ed\u9ed8\u8ba4\u8fde\u63a5\u4e4b\u524d\uff0c\u63a5\u6536\u7ebf\u7a0b\u5df2\u7ecf\u5b8c\u5168\u505c\u6b62</li> <li>\u907f\u514d\u4e86\u7ebf\u7a0b\u4ecd\u5728\u8fd0\u884c\u65f6\u5173\u95edsocket\u5bfc\u81f4\u7684\u5f02\u5e38</li> </ul> </li> </ol> <ul> <li>\u786e\u4fdd\u6240\u6709\u7f51\u7edc\u8fde\u63a5\u548c\u7ebf\u7a0b\u8d44\u6e90\u90fd\u80fd\u6b63\u786e\u91ca\u653e</li> </ul>","tags":["issue","Python"]},{"location":"ISSUE/#2","title":"\u5728\u7ebf\u8bbe\u5907\u5237\u65b0\u663e\u793a\u9519\u8bef\u95ee\u9898","text":"<p> \u91cd\u8f7d</p> <p>\u5df2\u89e3\u51b3</p> \u95ee\u9898\u8bb0\u5f55\u89e3\u51b3\u65b9\u6848\u4fee\u590d\u6548\u679c <ul> <li>\u5f53\u8fdb\u884c\u5728\u7ebf\u8bbe\u5907\u6392\u5e8f\u9009\u62e9\u540e\uff0c\u518d\u6b21\u5237\u65b0\u4f1a\u5bfc\u81f4\u6570\u636e\u672a\u5168\u90e8\u66f4\u65b0</li> </ul> <p>\u5728refresh_table\u65b9\u6cd5\u4e2d\uff0c\u8868\u683c\u6570\u636e\u662f\u57fa\u4e8edevice_map\u6784\u5efa\u7684\uff0c\u4f46\u662f\u5728\u5237\u65b0\u65f6\u6ca1\u6709\u6e05\u7a7a\u8868\u683c\u7684\u6392\u5e8f\u72b6\u6001\u3002\u5f53\u7528\u6237\u70b9\u51fbIP\u5217\u6392\u5e8f\u540e\uff0c\u8868\u683c\u4f1a\u4fdd\u6301\u6392\u5e8f\u72b6\u6001\uff0c\u4f46refresh_table\u65b9\u6cd5\u91cd\u65b0\u8bbe\u7f6e\u884c\u6570\u65f6\u4f1a\u7834\u574f\u6392\u5e8f\uff0c\u5bfc\u81f4\u6570\u636e\u91cd\u590d\u663e\u793a</p> <pre><code>\u5728 `NetManager.py` \u7684 `refresh_table` \u65b9\u6cd5\u4e2d\u6dfb\u52a0\u4e86\u4ee5\u4e0b\u903b\u8f91\uff1a\n    1. \u6e05\u7a7a\u8868\u683c\u5185\u5bb9 \uff1a\u4f7f\u7528 clearContents() \u6e05\u9664\u6240\u6709\u73b0\u6709\u6570\u636e\n    2. \u91cd\u7f6e\u6392\u5e8f\u72b6\u6001 \uff1a\u5728\u6570\u636e\u586b\u5145\u524d\u7981\u7528\u6392\u5e8f setSortingEnabled(False)\n    3. \u91cd\u65b0\u542f\u7528\u6392\u5e8f \uff1a\u6570\u636e\u586b\u5145\u5b8c\u6210\u540e\u91cd\u65b0\u542f\u7528\u6392\u5e8f\u529f\u80fd setSortingEnabled(True)\n</code></pre> <ul> <li>\u5237\u65b0\u6570\u636e\u65f6\uff0c\u80fd\u591f\u6b63\u5e38\u8fdb\u884c\u6570\u636e\u7684\u5237\u65b0</li> </ul>","tags":["issue","Python"]},{"location":"ISSUE/#3","title":"\u4e0a\u4e0b\u4f4d\u673a\u6d4b\u8bd5\u76f4\u63a5\u4f7f\u7528IP\u8bbe\u5907\u95ee\u9898","text":"<p>\u672a\u89e3\u51b3</p> \u95ee\u9898\u8bb0\u5f55\u89e3\u51b3\u65b9\u6848\u89e3\u51b3\u6548\u679c <ul> <li>\u4e0a\u4e0b\u4f4d\u673a\u6d4b\u8bd5\u8bbe\u5907\u4e2d\u542b\u6709\u673a\u7bb1\u4ee5\u53caIP\u8bbe\u5907\u65f6\uff0c\u76f4\u63a5\u4f7f\u7528IP\u8bbe\u5907\u8fdb\u884c\u6d4b\u8bd5\u65f6\uff0c\u4e0b\u4f4d\u673a\u5bf9\u8bbe\u5907\u76f4\u63a5\u8fdb\u884c\u63a7\u5236\uff0c\u5219\u4f1a\u65e0\u6cd5\u5bf9IP\u8bbe\u5907\u76f4\u63a5\u63a7\u5236</li> <li>\u591a\u53c2\u6570\u4f7f\u7528 IP \u8bbe\u5907\u65f6\u53ef\u80fd\u4f1a\u51fa\u73b0<code>'CardData' object has no attribute 'voltage'</code>\u7b49\u53c2\u6570\u5c5e\u6027\u95ee\u9898\u3002</li> </ul> <ul> <li>\u4e0d\u5728\u4e0b\u4f4d\u673a\u8fdb\u884cIP\u8bbe\u5907\u8fdb\u884c\u6267\u884c\u63a7\u5236</li> <li>\u5728 XML \u6587\u4ef6\u4e2d\u76f4\u63a5\u4f7f\u7528<code>device</code>\u8fdb\u884c\u8bbe\u5907\u7684\u533a\u5206\uff0c\u53ef\u76f4\u63a5\u8fdb\u884c\u8bbe\u5907\u7684\u63a7\u5236\u4ee5\u53ca\u53c2\u6570\u7684\u4f20\u5165</li> </ul> <ul> <li>\u901a\u8fc7 XML \u6587\u4ef6\u914d\u7f6e\uff0c\u5728\u4e0a\u4f4d\u673a\u4e2d\u76f4\u63a5\u5bf9IP\u8bbe\u5907\u8fdb\u884c\u63a7\u5236\uff0c\u5e76\u4e14\u6267\u884c\u4efb\u52a1</li> </ul>","tags":["issue","Python"]},{"location":"ISSUE/#4","title":"\u672a\u8fde\u63a5\u7f51\u7ebf\u4f46\u662f\u53ef\u4ee5socket\u8fde\u63a5\u6210\u529f\u95ee\u9898","text":"<p> Socket</p> <p>\u5df2\u89e3\u51b3</p> \u95ee\u9898\u8bb0\u5f55\u89e3\u51b3\u65b9\u6848\u89e3\u51b3\u6548\u679c <ul> <li>\u7f16\u5199\u4e0a\u4e0b\u4f4d\u673a\u8bbe\u5907\u6d4b\u8bd5\u7528\u4f8b\u65f6\uff0c\u6d4b\u8bd5DC\u7535\u6e90\u53d1\u73b0\u6b64\u8bbe\u5907\u672a\u8fde\u63a5\u4e5f\u53ef\u4ee5\u8fdb\u884csocket\u8fde\u63a5\u670d\u52a1</li> <li>\u7406\u8bba\u4e0a\u672a\u8fde\u63a5\u8bbe\u5907\u4ee5\u53ca Ping IP\u8bbe\u5907\u5747\u663e\u793a\u4e0d\u80fd\u8fde\u63a5</li> </ul> <p>\u6e90\u4ee3\u7801\u5982\u4e0b\uff1a</p> <p></p> <ol> <li>\u5c1d\u8bd5\u53d1\u9001\u4e00\u4e2a\u7b80\u5355\u7684\u547d\u4ee4\u6765\u9a8c\u8bc1\u8fde\u63a5\uff08\u7b80\u5355\u5224\u65ad\uff09</li> </ol> <p></p> <ol> <li>\u66f4\u6539\u7aef\u53e3\u53f7\uff08\u5b8c\u5168\u89e3\u51b3\uff09     \u7aef\u53e3 25\uff08SMTP \u90ae\u4ef6\u7aef\u53e3\uff09,\u5f88\u591a\u6740\u6bd2\u8f6f\u4ef6/\u5b89\u5168\u5957\u4ef6/VPN/\u90ae\u4ef6\u4ee3\u7406\u4f1a\u62e6\u622a\u6216\u4ee3\u7406\u672c\u673a\u5230 25 \u7aef\u53e3\u7684\u8fde\u63a5\uff0c\u5373\u4f7f\u6ca1\u6709\u63d2\u7f51\u7ebf\u4e5f\u4f1a\u8ba9 connect \u770b\u8d77\u6765\u6210\u529f\uff08\u8fde\u63a5\u5230\u4e86\u672c\u673a\u7684\u4ee3\u7406/\u9a71\u52a8\u5c42\uff0c\u800c\u4e0d\u662f\u76ee\u6807\u8bbe\u5907\uff09\u3002\u8fd9\u4f1a\u9020\u6210\u4f60\u8fd9\u53f0\u673a\u5668\u201c\u80fd\u8fde\u201d\uff0c\u800c\u5176\u4ed6\u7535\u8111\uff08\u6ca1\u6709\u8fd9\u4e9b\u62e6\u622a/\u4ee3\u7406\uff09\u4f1a\u6309\u9884\u671f\u5931\u8d25\u3002</li> </ol> <p>\u8fde\u63a5\u8d85\u65f6\uff0c\u5b8c\u5168\u89e3\u51b3\u95ee\u9898</p> <p>\u6d4b\u8bd5\u65b9\u6cd5\uff1a</p> <p>\u7528\u7cfb\u7edf\u547d\u4ee4\u6d4b\u8bd5\u7aef\u53e3\u8fde\u901a\u6027\uff0c\u4f7f\u7528powershell\u53d1\u9001\u547d\u4ee4</p> \u7aef\u53e3\u6d4b\u8bd5 25 <p></p> \u7aef\u53e3\u6d4b\u8bd5 5025 <p></p>","tags":["issue","Python"]},{"location":"about/","title":"\u5173\u4e8e\u9879\u76ee","text":""},{"location":"about/#_2","title":"\u9879\u76ee\u7b80\u4ecb","text":"<p>\u6b63\u7ecf\u5de5\u5177\u7bb1 \u662f\u4e00\u4e2a\u57fa\u4e8e Python \u4e0e PyQt5 \u5f00\u53d1\u7684\u5b9e\u7528\u5de5\u5177\u96c6\u5408\u9879\u76ee\uff0c\u65e8\u5728\u4e3a\u5f00\u53d1\u8005\u548c\u5de5\u7a0b\u5e08\u63d0\u4f9b\u4e00\u7cfb\u5217\u5e38\u7528\u7684\u684c\u9762\u5e94\u7528\u5de5\u5177\u3002\u9879\u76ee\u91c7\u7528\u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u6bcf\u4e2a\u5de5\u5177\u90fd\u53ef\u4ee5\u72ec\u7acb\u4f7f\u7528\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u4e3b\u754c\u9762\u8fdb\u884c\u7edf\u4e00\u7ba1\u7406\u3002</p>"},{"location":"about/#_3","title":"\u6280\u672f\u6808","text":"<ul> <li>\u7f16\u7a0b\u8bed\u8a00: Python 3.8</li> <li>GUI\u6846\u67b6: PyQt5</li> <li>\u6570\u636e\u5904\u7406: NumPy, Pandas</li> <li>\u6587\u6863\u751f\u6210: MkDocs + Material\u4e3b\u9898</li> <li>\u9879\u76ee\u7ba1\u7406: pyproject.toml</li> </ul>"},{"location":"about/#_4","title":"\u9879\u76ee\u7279\u8272","text":""},{"location":"about/#_5","title":"\ud83c\udfaf \u6a21\u5757\u5316\u8bbe\u8ba1","text":"<p>\u6bcf\u4e2a\u5de5\u5177\u6a21\u5757\u90fd\u72ec\u7acb\u5f00\u53d1\uff0c\u53ef\u5355\u72ec\u8fd0\u884c\uff0c\u964d\u4f4e\u4e86\u8026\u5408\u5ea6\uff0c\u63d0\u9ad8\u4e86\u4ee3\u7801\u7684\u53ef\u7ef4\u62a4\u6027\u548c\u590d\u7528\u6027\u3002</p>"},{"location":"about/#_6","title":"\ud83d\udda5\ufe0f \u7edf\u4e00\u754c\u9762\u98ce\u683c","text":"<p>\u57fa\u4e8e PyQt5 \u5f00\u53d1\uff0c\u63d0\u4f9b\u4e00\u81f4\u7684\u7528\u6237\u4f53\u9a8c\uff0c\u754c\u9762\u7f8e\u89c2\u4e14\u6613\u4e8e\u4f7f\u7528\u3002</p>"},{"location":"about/#_7","title":"\ud83d\udcca \u6570\u636e\u53ef\u89c6\u5316","text":"<p>\u96c6\u6210\u591a\u79cd\u6570\u636e\u53ef\u89c6\u5316\u529f\u80fd\uff0c\u652f\u6301\u5b9e\u65f6\u6570\u636e\u7ed8\u56fe\u3001\u5386\u53f2\u6570\u636e\u56de\u653e\u7b49\u3002</p>"},{"location":"about/#_8","title":"\ud83d\udd27 \u5b9e\u7528\u6027\u5f3a","text":"<p>\u6db5\u76d6\u65e5\u5fd7\u7ba1\u7406\u3001\u8bbe\u5907\u76d1\u63a7\u3001\u6570\u636e\u5206\u6790\u3001\u6821\u51c6\u5de5\u5177\u7b49\u591a\u4e2a\u5b9e\u9645\u5de5\u4f5c\u573a\u666f\u3002</p>"},{"location":"about/#_9","title":"\u6838\u5fc3\u529f\u80fd\u6a21\u5757","text":""},{"location":"about/#_10","title":"\u5df2\u5b8c\u6210\u6a21\u5757","text":"<ul> <li>CalibTool - \u8ba1\u91cf\u6821\u51c6\u5de5\u5177</li> <li>LogViewer - \u65e5\u5fd7\u67e5\u770b\u5668</li> <li>RTDataPlot - \u5b9e\u65f6\u6570\u636e\u7ed8\u56fe\u5de5\u5177</li> <li>BulbStateMonitor - \u706f\u6ce1\u72b6\u6001\u76d1\u63a7\u5de5\u5177</li> <li>DataReplay - \u6570\u636e\u56de\u653e\u5de5\u5177</li> <li>ResourceQuery - \u8d44\u6e90\u67e5\u8be2\u5de5\u5177</li> <li>CustomWidgets - \u81ea\u5b9a\u4e49\u63a7\u4ef6\u96c6</li> <li>Dashboard - \u5404\u7c7b\u4eea\u8868\u76d8</li> <li>Cfg2UI - \u914d\u7f6e\u8f6cUI\u5de5\u5177</li> </ul>"},{"location":"about/#_11","title":"\u5f00\u53d1\u4e2d\u6a21\u5757","text":"<ul> <li>BusDataMonitor - \u603b\u7ebf\u6570\u636e\u76d1\u63a7\u5de5\u5177</li> </ul>"},{"location":"about/#_12","title":"\u5f00\u53d1\u7406\u5ff5","text":"<p>\u9879\u76ee\u79c9\u627f\"\u5b9e\u7528\u81f3\u4e0a\"\u7684\u5f00\u53d1\u7406\u5ff5\uff0c\u4e13\u6ce8\u4e8e\u89e3\u51b3\u5b9e\u9645\u5de5\u4f5c\u4e2d\u9047\u5230\u7684\u95ee\u9898\u3002\u6bcf\u4e2a\u5de5\u5177\u90fd\u7ecf\u8fc7\u5b9e\u9645\u4f7f\u7528\u573a\u666f\u7684\u9a8c\u8bc1\uff0c\u786e\u4fdd\u529f\u80fd\u7684\u5b9e\u7528\u6027\u548c\u7a33\u5b9a\u6027\u3002</p>"},{"location":"about/#_13","title":"\u5f00\u6e90\u534f\u8bae","text":"<p>\u672c\u9879\u76ee\u91c7\u7528MIT\u5f00\u6e90\u534f\u8bae\uff0c\u6b22\u8fce\u793e\u533a\u8d21\u732e\u4ee3\u7801\u548c\u5efa\u8bae\u3002</p> <p></p>"},{"location":"about/#_14","title":"\u5f00\u53d1\u56e2\u961f","text":"<ul> <li>JIN - \u9879\u76ee\u53d1\u8d77\u4eba\u548c\u6838\u5fc3\u5f00\u53d1\u8005</li> <li>SanXiaoXing - \u6838\u5fc3\u5f00\u53d1\u8005</li> </ul>"},{"location":"about/#_15","title":"\u8054\u7cfb\u6211\u4eec","text":"<ul> <li>\u4ee3\u7801\u4ed3\u5e93: https://gitee.com/jjycode/py-util-demos</li> <li>\u95ee\u9898\u53cd\u9988: \u8bf7\u901a\u8fc7 Gitee Issues \u63d0\u4ea4</li> </ul>"},{"location":"about/#_16","title":"\u7248\u6743\u58f0\u660e","text":"<p>Copyright \u00a9 2025 JIN &amp; SanXiaoXing \u6240\u6709, \u4fdd\u7559\u6240\u6709\u6743\u5229\u3002</p> <p>\u611f\u8c22\u60a8\u4f7f\u7528\u6b63\u7ecf\u5de5\u5177\u7bb1\uff01\u5982\u679c\u60a8\u89c9\u5f97\u8fd9\u4e2a\u9879\u76ee\u5bf9\u60a8\u6709\u5e2e\u52a9\uff0c\u6b22\u8fce\u7ed9\u6211\u4eec\u4e00\u4e2a \u2b50 Star\uff01</p>"},{"location":"tags/","title":"\u6807\u7b7e Tags","text":"<p> Issue Tags</p>"},{"location":"tags/#tag:api\u6587\u6863","title":"API\u6587\u6863","text":"<ul> <li>            API \u6587\u6863\u603b\u89c8          </li> <li>            \u65e5\u5fd7\u67e5\u770b\u5668 LogViewer          </li> <li>            \u7f51\u7edc\u8bbe\u5907\u7ba1\u7406 NetManager          </li> </ul>"},{"location":"tags/#tag:python","title":"Python","text":"<ul> <li>            ISSUE          </li> <li>            \u65e5\u5fd7\u67e5\u770b\u5668 LogViewer          </li> <li>            \u7f51\u7edc\u8bbe\u5907\u7ba1\u7406 NetManager          </li> </ul>"},{"location":"tags/#tag:issue","title":"issue","text":"<ul> <li>            ISSUE          </li> </ul>"},{"location":"tags/#tag:\u65e5\u5fd7\u67e5\u770b\u5668","title":"\u65e5\u5fd7\u67e5\u770b\u5668","text":"<ul> <li>            \u65e5\u5fd7\u67e5\u770b\u5668 LogViewer          </li> </ul>"},{"location":"tags/#tag:\u6982\u89c8","title":"\u6982\u89c8","text":"<ul> <li>            API \u6587\u6863\u603b\u89c8          </li> </ul>"},{"location":"tags/#tag:\u7f51\u7edc\u901a\u4fe1","title":"\u7f51\u7edc\u901a\u4fe1","text":"<ul> <li>            \u7f51\u7edc\u8bbe\u5907\u7ba1\u7406 NetManager          </li> </ul>"},{"location":"tags_category/","title":"\u95ee\u9898\u5206\u7c7b\u6807\u7b7e","text":""},{"location":"tags_category/#1","title":"Socket","text":"<ul> <li>\u4e0a\u4f4d\u673a\u6d4b\u8bd5\u7a0b\u5e8f\u9000\u51fa\u65f6\u663e\u793a\u9519\u8bef\u4fe1\u606f</li> <li>\u672a\u8fde\u63a5\u7f51\u7ebf\u4f46\u662f\u53ef\u4ee5socket\u8fde\u63a5\u6210\u529f\u95ee\u9898</li> </ul>"},{"location":"tags_category/#2","title":"\u91cd\u8f7d","text":"<ul> <li>\u5728\u7ebf\u8bbe\u5907\u5237\u65b0\u663e\u793a\u9519\u8bef\u95ee\u9898</li> </ul>"},{"location":"API/","title":"API \u6587\u6863\u603b\u89c8","text":"<p>\u4ee5\u4e0b\u4e3a\u5404\u7ec4\u4ef6\u7684 API \u6587\u6863\uff0c\u5df2\u62c6\u5206\u4e3a\u72ec\u7acb\u9875\u9762\uff1a</p> <p> python python</p>","tags":["API\u6587\u6863","\u6982\u89c8"]},{"location":"API/#_1","title":"\u7ec4\u4ef6","text":"<ul> <li>\u65e5\u5fd7\u67e5\u770b\u5668 LogViewer</li> <li>\u6821\u51c6\u5de5\u5177 CalibTool</li> <li>\u5b9e\u65f6\u6570\u636e\u7ed8\u56fe RTDataPlot</li> <li>\u706f\u6ce1\u72b6\u6001\u76d1\u63a7 BulbStateMonitor</li> <li>\u6570\u636e\u56de\u653e DataReplay</li> <li>\u8d44\u6e90\u7d22\u5f15\u67e5\u8be2 ResourceQuery</li> <li>\u603b\u7ebf\u6570\u636e\u76d1\u63a7 BusDataMonitor</li> <li>\u81ea\u5b9a\u4e49\u63a7\u4ef6\u96c6 CustomWidgets</li> <li>\u7f51\u7edc\u8bbe\u5907\u7ba1\u7406 NetManager</li> <li>Xml\u7f16\u8f91\u5668 XmlEditor</li> </ul> <p>\u63d0\u793a\uff1a\u82e5\u67d0\u6a21\u5757\u672a\u663e\u793a\u8be6\u7ec6\u6210\u5458\uff0c\u8bf7\u8865\u5145\u6e90\u7801\u4e2d\u7684 docstring \u6ce8\u91ca\u5e76\u5237\u65b0\u9875\u9762\u3002</p>","tags":["API\u6587\u6863","\u6982\u89c8"]},{"location":"API/bulb_statemonitor/","title":"\u706f\u6ce1\u72b6\u6001\u76d1\u63a7 BulbStateMonitor API","text":""},{"location":"API/bulb_statemonitor/#src.components.BulbStateMonitor.bulb_statemonitor_demo","title":"<code>src.components.BulbStateMonitor.bulb_statemonitor_demo</code>","text":"<p>@Project \uff1apy-util-demos @File    \uff1abulb_statemonitor_demo.py @Author  \uff1aSanXiaoXing @Date    \uff1a2025/7/12 @Description: \u706f\u6ce1\u72b6\u6001\u76d1\u63a7\u5de5\u5177,\u672c\u5de5\u5177\u7528\u4e8e\u5b9e\u65f6\u76d1\u63a7\u8bbe\u5907\u72b6\u6001\uff0c\u901a\u8fc7\u5f69\u8272\u706f\u6ce1\u663e\u793a\u4e0d\u540c\u7684\u8bbe\u5907\u72b6\u6001\u3002</p>"},{"location":"API/bulb_statemonitor/#src.components.BulbStateMonitor.bulb_statemonitor_demo--_1","title":"\u6570\u636e\u8f93\u5165\u63a5\u53e3\u8bf4\u660e\uff1a","text":"<ol> <li>\u754c\u9762\u8f93\u5165\u65b9\u5f0f\uff1a</li> <li>\u5728\u754c\u9762\u7684\"\u6570\u636e\u62a5\u6587\"\u8f93\u5165\u6846\u4e2d\u8f93\u5165\u5341\u516d\u8fdb\u5236\u6570\u636e</li> <li>\u652f\u6301\u683c\u5f0f\uff1a\"ffff\"\u3001\"ff 00\"\u3001\"FF00\" \u7b49</li> <li> <p>\u70b9\u51fb\"\u53d1\u9001\u6570\u636e\"\u6309\u94ae\u6216\u6309\u56de\u8f66\u952e\u53d1\u9001</p> </li> <li> <p>\u7f16\u7a0b\u63a5\u53e3\u8c03\u7528\uff1a    <pre><code># \u521b\u5efa\u76d1\u63a7\u5b9e\u4f8b\nmonitor = BulbStateMonitor()\n\n# \u53d1\u9001\u6570\u636e\u5305\nmonitor.send_data_packet(\"ffff\")  # \u53d1\u9001\u4e24\u4e2a\u5b57\u8282\nmonitor.send_data_packet(\"ff00\")  # \u53d1\u9001 0xFF \u548c 0x00\n</code></pre></p> </li> <li> <p>\u6570\u636e\u5904\u7406\u6d41\u7a0b\uff1a</p> </li> <li>\u8f93\u5165\u7684\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\u4f1a\u88ab\u8f6c\u6362\u4e3a\u5b57\u8282\u6570\u7ec4</li> <li>\u6bcf\u4e2a\u5b57\u8282\u6309\u4f4d\u7f6e\uff080, 1, 2...\uff09\u5206\u53d1\u7ed9\u5bf9\u5e94\u7684\u8bbe\u5907\u7ec4</li> <li>\u6839\u636e\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u6bd4\u7279\u4f4d\u8bbe\u7f6e\u66f4\u65b0\u8bbe\u5907\u72b6\u6001</li> </ol>"},{"location":"API/bulb_statemonitor/#src.components.BulbStateMonitor.bulb_statemonitor_demo--_2","title":"\u771f\u5b9e\u6570\u636e\u6e90\u63a5\u5165\u8bf4\u660e\uff1a","text":"<ol> <li> <p>\u9700\u8981\u63a5\u5165\u771f\u5b9e\u6570\u636e\u6e90\u65f6\uff0c\u8bf7\u6309\u4ee5\u4e0b\u6b65\u9aa4\u64cd\u4f5c\uff1a</p> </li> <li> <p>\u5728 BulbStateMonitor \u7c7b\u4e2d\u5b9e\u73b0\u4ee5\u4e0b\u65b9\u6cd5\uff1a</p> </li> <li>setup_real_data_source(): \u914d\u7f6e\u771f\u5b9e\u6570\u636e\u6e90\u8fde\u63a5</li> <li>start_real_data_source(): \u542f\u52a8\u6570\u636e\u63a5\u6536</li> <li> <p>stop_real_data_source(): \u505c\u6b62\u6570\u636e\u63a5\u6536</p> </li> <li> <p>\u6570\u636e\u63a5\u6536\u540e\uff0c\u8c03\u7528 process_data(byte_pos, data) \u65b9\u6cd5\u5904\u7406\u6570\u636e</p> </li> <li>byte_pos: \u5b57\u8282\u4f4d\u7f6e (int)</li> <li> <p>data: \u5b57\u8282\u6570\u636e (bytes)</p> </li> <li> <p>\u652f\u6301\u7684\u6570\u636e\u6e90\u7c7b\u578b\uff1a</p> </li> <li>\u4e32\u53e3\u901a\u4fe1 (Serial)</li> <li>\u7f51\u7edc\u901a\u4fe1 (TCP/UDP)</li> <li>\u6587\u4ef6\u6570\u636e\u6e90</li> <li>\u5176\u4ed6\u81ea\u5b9a\u4e49\u6570\u636e\u6e90</li> </ol>"},{"location":"API/bulb_statemonitor/#src.components.BulbStateMonitor.bulb_statemonitor_demo.BulbStateMonitor","title":"<code>BulbStateMonitor</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>\u706f\u6ce1\u72b6\u6001\u76d1\u63a7\u4e3b\u7a97\u53e3</p> Source code in <code>src\\components\\BulbStateMonitor\\bulb_statemonitor_demo.py</code> <pre><code>class BulbStateMonitor(QWidget):\n    \"\"\"\u706f\u6ce1\u72b6\u6001\u76d1\u63a7\u4e3b\u7a97\u53e3\"\"\"\n\n    def __init__(self):\n        super().__init__()\n        self.devices = {}  # \u8bbe\u5907\u5b57\u5178 {device_id: BulbWidget}\n        self.device_configs = {}  # \u8bbe\u5907\u914d\u7f6e {device_id: config_dict}\n        self.byte_groups = {}  # \u5b57\u8282\u5206\u7ec4 {byte_pos: [device_ids]}\n        self._config_cache = None  # \u914d\u7f6e\u6587\u4ef6\u7f13\u5b58\n        self._config_mtime = None  # \u914d\u7f6e\u6587\u4ef6\u4fee\u6539\u65f6\u95f4\n\n        # \u6027\u80fd\u7edf\u8ba1\n        self._cache_hits = 0\n        self._cache_misses = 0\n        self._state_updates = 0\n        self._skipped_updates = 0\n\n        self.init_ui()\n        self.load_config()\n\n    def init_ui(self):\n        \"\"\"\u521d\u59cb\u5316UI\"\"\"\n        self.setWindowTitle(\"\u706f\u6ce1\u72b6\u6001\u76d1\u63a7\u5de5\u5177\")\n        self.setGeometry(100, 100, 1200, 800)\n\n        # \u4e3b\u5e03\u5c40\n        window = QWidget()\n        main_layout = QVBoxLayout()\n\n        # \u6807\u9898\n        title_label = QLabel(\"\u8bbe\u5907\u72b6\u6001\u76d1\u63a7\")\n        title_label.setAlignment(Qt.AlignCenter)\n        title_label.setStyleSheet(\"\"\"\n            QLabel {\n                font-size: 24px;\n                font-weight: bold;\n                color: #2c7dff;\n                margin: 10px;\n            }\n        \"\"\")\n        main_layout.addWidget(title_label)\n        # \u8bbe\u7f6e\u5e94\u7528\u56fe\u6807\n        try:\n            icon_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))),\n                                     \"assets\", \"icon\", \"\u706f\u6ce1\u4e3b\u610f\u521b\u65b0.svg\")\n            if os.path.exists(icon_path):\n                self.setWindowIcon(QIcon(icon_path))\n        except Exception as e:\n            print(f\"\u8bbe\u7f6e\u56fe\u6807\u5931\u8d25: {e}\")\n\n        # \u6eda\u52a8\u533a\u57df\u7528\u4e8e\u663e\u793a\u8bbe\u5907\n        self.scroll_area = QScrollArea()\n        self.scroll_area.setWidgetResizable(True)\n        self.scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)\n        self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)\n\n        self.scroll_widget = QWidget()\n        self.scroll_layout = QVBoxLayout(self.scroll_widget)\n        self.scroll_area.setWidget(self.scroll_widget)\n\n        main_layout.addWidget(self.scroll_area)\n\n        # \u6570\u636e\u8f93\u5165\u533a\u57df\n        input_layout = QHBoxLayout()\n\n        input_label = QLabel(\"\u6570\u636e\u62a5\u6587:\")\n        input_layout.addWidget(input_label)\n\n        self.data_input = QLineEdit()\n        self.data_input.setPlaceholderText(\"\u8f93\u5165\u5341\u516d\u8fdb\u5236\u6570\u636e\uff0c\u5982: ffff \u6216 ff00\")\n        self.data_input.returnPressed.connect(self.process_input_data)\n        input_layout.addWidget(self.data_input)\n\n        self.send_btn = QPushButton(\"\u53d1\u9001\u6570\u636e\")\n        self.send_btn.clicked.connect(self.process_input_data)\n        input_layout.addWidget(self.send_btn)\n\n        main_layout.addLayout(input_layout)\n\n        self.setLayout(main_layout)\n\n    def load_config(self):\n        \"\"\"\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\uff08\u5e26\u7f13\u5b58\u673a\u5236\uff09\"\"\"\n        try:\n            # \u521b\u5efa\u793a\u4f8b\u914d\u7f6e\u6587\u4ef6\n            config_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"conf.xlsx\")\n            csv_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"conf.csv\")\n\n            if not os.path.exists(config_path) and not os.path.exists(csv_path):\n                raise FileNotFoundError(\"\u672a\u627e\u5230\u914d\u7f6e\u6587\u4ef6\")\n\n            # \u786e\u5b9a\u4f7f\u7528\u7684\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\n            active_config_path = config_path if (PANDAS_AVAILABLE and os.path.exists(config_path)) else csv_path\n\n            # \u68c0\u67e5\u6587\u4ef6\u4fee\u6539\u65f6\u95f4\uff0c\u5982\u679c\u672a\u53d8\u5316\u5219\u4f7f\u7528\u7f13\u5b58\n            current_mtime = os.path.getmtime(active_config_path)\n            if self._config_cache is not None and self._config_mtime == current_mtime:\n                df = self._config_cache\n                self._cache_hits += 1\n                print(f\"\u914d\u7f6e\u7f13\u5b58\u547d\u4e2d (\u547d\u4e2d\u6b21\u6570: {self._cache_hits})\")\n            else:\n                self._cache_misses += 1\n                # \u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\n                if PANDAS_AVAILABLE and os.path.exists(config_path):\n                    try:\n                        df = pd.read_excel(config_path, engine='openpyxl')\n                    except Exception:\n                        # \u5982\u679copenpyxl\u4e0d\u53ef\u7528\uff0c\u5c1d\u8bd5\u5176\u4ed6\u5f15\u64ce\n                        try:\n                            df = pd.read_excel(config_path, engine='xlrd')\n                        except Exception:\n                            df = pd.read_excel(config_path)\n                elif os.path.exists(csv_path):\n                    if PANDAS_AVAILABLE:\n                        df = pd.read_csv(csv_path)\n                    else:\n                        # \u624b\u52a8\u89e3\u6790CSV\n                        import csv\n                        data = []\n                        with open(csv_path, 'r', encoding='utf-8') as f:\n                            reader = csv.DictReader(f)\n                            for row in reader:\n                                data.append(row)\n                        # \u521b\u5efa\u7b80\u5355\u7684DataFrame\u66ff\u4ee3\n                        class SimpleDataFrame:\n                            def __init__(self, data):\n                                self.data = data\n                            def iterrows(self):\n                                for i, row in enumerate(self.data):\n                                    yield i, row\n                        df = SimpleDataFrame(data)\n                else:\n                    raise FileNotFoundError(\"\u914d\u7f6e\u6587\u4ef6\u4e0d\u5b58\u5728\")\n\n                # \u7f13\u5b58\u914d\u7f6e\u6570\u636e\u548c\u4fee\u6539\u65f6\u95f4\n                self._config_cache = df\n                self._config_mtime = current_mtime\n\n            # \u6e05\u7a7a\u73b0\u6709\u8bbe\u5907\n            self.clear_devices()\n\n            # \u6309\u5b57\u8282\u5206\u7ec4\n            self.byte_groups = {}\n            device_id = 0\n\n            for _, row in df.iterrows():\n                # \u517c\u5bb9\u4e0d\u540c\u7684\u5217\u540d\u683c\u5f0f\n                if 'BYTE' in df.columns:\n                    # \u82f1\u6587\u5217\u540d\u683c\u5f0f\n                    # \u5904\u7406ActiveState\u548cInactiveState\u7684\u6587\u672c\u503c\n                    active_state_text = str(row['ActiveState'])\n                    inactive_state_text = str(row['InactiveState'])\n\n                    # \u68c0\u6d4b\u6545\u969c\u5173\u952e\u8bcd\n                    fault_keywords = ['\u6545\u969c', '\u9519\u8bef', 'fault', 'error', 'fail']\n                    has_fault = any(keyword in active_state_text.lower() or keyword in inactive_state_text.lower() \n                                   for keyword in fault_keywords)\n\n                    active_state = 1 if active_state_text == '\u6709\u6548' else 0\n                    inactive_state = 0 if inactive_state_text == '\u65e0\u6548' else 1\n\n                    config = {\n                        '\u5b57\u8282\u4f4d\u6570': int(row['BYTE']),\n                        '\u6bd4\u7279\u4f4d\u6570': int(row['BITE']),\n                        '\u8bbe\u5907\u540d\u79f0': str(row['SignalName']),\n                        '\u6d3b\u8dc3\u72b6\u6001': active_state,\n                        '\u5931\u6548\u72b6\u6001': inactive_state,\n                        '\u521d\u59cb\u503c': int(row['INIT']),\n                        '\u6709\u6545\u969c': has_fault\n                    }\n                else:\n                    # \u4e2d\u6587\u5217\u540d\u683c\u5f0f\n                    active_state_text = str(row.get('\u6d3b\u8dc3\u72b6\u6001\u6587\u672c', ''))\n                    inactive_state_text = str(row.get('\u5931\u6548\u72b6\u6001\u6587\u672c', ''))\n\n                    # \u68c0\u6d4b\u6545\u969c\u5173\u952e\u8bcd\n                    fault_keywords = ['\u6545\u969c', '\u9519\u8bef', 'fault', 'error', 'fail']\n                    has_fault = any(keyword in active_state_text.lower() or keyword in inactive_state_text.lower() \n                                   for keyword in fault_keywords)\n\n                    config = {\n                        '\u5b57\u8282\u4f4d\u6570': int(row['\u5b57\u8282\u4f4d\u6570']),\n                        '\u6bd4\u7279\u4f4d\u6570': int(row['\u6bd4\u7279\u4f4d\u6570']),\n                        '\u8bbe\u5907\u540d\u79f0': str(row['\u8bbe\u5907\u540d\u79f0']),\n                        '\u6d3b\u8dc3\u72b6\u6001': int(row['\u6d3b\u8dc3\u72b6\u6001']),\n                        '\u5931\u6548\u72b6\u6001': int(row['\u5931\u6548\u72b6\u6001']),\n                        '\u521d\u59cb\u503c': int(row['\u521d\u59cb\u503c']),\n                        '\u6709\u6545\u969c': has_fault\n                    }\n\n                # \u521b\u5efa\u8bbe\u5907\u63a7\u4ef6 - \u6839\u636eINIT\u503c\u786e\u5b9a\u521d\u59cb\u72b6\u6001\n                init_value = config['\u521d\u59cb\u503c']\n                active_value = config['\u6d3b\u8dc3\u72b6\u6001']\n                inactive_value = config['\u5931\u6548\u72b6\u6001']\n                has_fault = config['\u6709\u6545\u969c']\n\n                if has_fault:\n                    # \u5982\u679c\u5305\u542b\u6545\u969c\u5173\u952e\u8bcd\uff0c\u4f7f\u7528\u7ea2\u706f\u8868\u793a\u9519\u8bef\u72b6\u6001\n                    initial_state = BulbWidget.STATE_ERROR\n                elif init_value == active_value:\n                    # INIT\u503c\u7b49\u4e8e\u6d3b\u8dc3\u72b6\u6001\u503c\uff0c\u663e\u793a\u7eff\u706f\n                    initial_state = BulbWidget.STATE_NORMAL\n                elif init_value == inactive_value:\n                    # INIT\u503c\u7b49\u4e8e\u5931\u6548\u72b6\u6001\u503c\uff0c\u663e\u793a\u7070\u706f\n                    initial_state = BulbWidget.STATE_OFFLINE\n                else:\n                    # INIT\u503c\u65e2\u4e0d\u7b49\u4e8e\u6d3b\u8dc3\u4e5f\u4e0d\u7b49\u4e8e\u5931\u6548\uff0c\u663e\u793a\u6a59\u706f\n                    initial_state = BulbWidget.STATE_UNKNOWN\n\n                bulb = BulbWidget(device_id, config['\u8bbe\u5907\u540d\u79f0'], initial_state)\n                bulb.set_position_info(config['\u6bd4\u7279\u4f4d\u6570'])\n                bulb.has_fault = has_fault  # \u6dfb\u52a0\u6545\u969c\u6807\u8bb0\n\n                self.devices[device_id] = bulb\n                self.device_configs[device_id] = config\n\n                # \u6309\u5b57\u8282\u5206\u7ec4\n                byte_pos = config['\u5b57\u8282\u4f4d\u6570']\n                if byte_pos not in self.byte_groups:\n                    self.byte_groups[byte_pos] = []\n                self.byte_groups[byte_pos].append(device_id)\n\n                device_id += 1\n\n            self.create_device_layout()\n            print(f\"\u6210\u529f\u52a0\u8f7d {len(self.devices)} \u4e2a\u8bbe\u5907\u914d\u7f6e\")\n\n        except Exception as e:\n            # raise(f\"\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\u5931\u8d25: {e}\")\n            QMessageBox.critical(self, \"\u9519\u8bef\", f\"\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\u5931\u8d25:\\n{e}\")\n\n    def create_device_layout(self):\n        \"\"\"\u521b\u5efa\u8bbe\u5907\u5e03\u5c40\"\"\"\n        # \u6e05\u7a7a\u73b0\u6709\u5e03\u5c40\n        for i in reversed(range(self.scroll_layout.count())):\n            self.scroll_layout.itemAt(i).widget().setParent(None)\n\n        # \u6309\u5b57\u8282\u5206\u7ec4\u663e\u793a\n        for byte_pos in sorted(self.byte_groups.keys()):\n            group_box = QGroupBox(f\"\u5b57\u8282 {byte_pos}\")\n            group_layout = QGridLayout()\n\n            device_ids = self.byte_groups[byte_pos]\n            row, col = 0, 0\n            max_cols = 4  # \u6bcf\u884c\u6700\u591a4\u4e2a\u8bbe\u5907\n\n            for device_id in device_ids:\n                if device_id in self.devices:\n                    bulb = self.devices[device_id]\n\n                    # \u521b\u5efa\u8bbe\u5907\u5bb9\u5668\n                    device_frame = QFrame()\n                    device_frame.setFrameStyle(QFrame.Box)\n                    device_layout = QHBoxLayout(device_frame)\n                    device_layout.setContentsMargins(5, 5, 5, 5)\n\n                    # \u6dfb\u52a0\u706f\u6ce1\u548c\u540d\u79f0\n                    device_layout.addWidget(bulb)\n\n                    name_label = QLabel(bulb.device_name)\n                    name_label.setStyleSheet(\"\"\"\n                        QLabel {\n                            font-size: 12px;\n                            font-family: 'Microsoft YaHei';\n                            margin-left: 5px;\n                        }\n                    \"\"\")\n                    device_layout.addWidget(name_label)\n                    device_layout.addStretch()\n\n                    group_layout.addWidget(device_frame, row, col)\n\n                    col += 1\n                    if col &gt;= max_cols:\n                        col = 0\n                        row += 1\n\n            group_box.setLayout(group_layout)\n            self.scroll_layout.addWidget(group_box)\n\n        self.scroll_layout.addStretch()\n\n    def clear_devices(self):\n        \"\"\"\u6e05\u7a7a\u8bbe\u5907\"\"\"\n        self.devices.clear()\n        self.device_configs.clear()\n        self.byte_groups.clear()\n\n    def process_data(self, byte_pos: int, data: bytes):\n        \"\"\"\u5904\u7406\u63a5\u6536\u5230\u7684\u6570\u636e\uff08\u4f18\u5316\u7248\u672c\uff09\"\"\"\n        if byte_pos not in self.byte_groups:\n            return\n\n        # \u5b89\u5168\u83b7\u53d6\u5b57\u8282\u503c\n        byte_value = data[0] if data and len(data) &gt; 0 else 0\n\n        # \u6279\u91cf\u66f4\u65b0\u8be5\u5b57\u8282\u5bf9\u5e94\u7684\u6240\u6709\u8bbe\u5907\u72b6\u6001\n        state_updates = []  # \u6536\u96c6\u72b6\u6001\u66f4\u65b0\n\n        for device_id in self.byte_groups[byte_pos]:\n            if device_id not in self.devices:\n                continue\n\n            bulb = self.devices[device_id]\n\n            # \u83b7\u53d6\u5f53\u524d bit \u7684\u503c\n            bit_value = (byte_value &gt;&gt; bulb.bit_pos) &amp; 1\n\n            # \u6839\u636e\u8bbe\u5907\u72b6\u6001\u548c bit \u503c\u786e\u5b9a\u706f\u5149\u72b6\u6001\n            new_state = self._determine_bulb_state(bulb, bit_value)\n\n            # \u53ea\u6709\u72b6\u6001\u771f\u6b63\u6539\u53d8\u65f6\u624d\u66f4\u65b0\n            if new_state != bulb.current_state:\n                state_updates.append((bulb, new_state))\n                self._state_updates += 1\n            else:\n                self._skipped_updates += 1\n\n        # \u6279\u91cf\u6267\u884c\u72b6\u6001\u66f4\u65b0\n        for bulb, new_state in state_updates:\n            bulb.set_state(new_state)\n\n\n    @lru_cache(maxsize=128)\n    def _determine_bulb_state_cached(self, has_fault: bool, bit_value: int) -&gt; int:\n        \"\"\"\u6839\u636e\u8bbe\u5907\u72b6\u6001\u548c bit \u503c\u51b3\u5b9a\u706f\u5149\u72b6\u6001\uff08\u7f13\u5b58\u7248\u672c\uff09\"\"\"\n        if has_fault:\n            if bit_value == 1:\n                return BulbWidget.STATE_FAULT\n            elif bit_value == 0:\n                return BulbWidget.STATE_ERROR\n        else:\n            if bit_value == 1:\n                return BulbWidget.STATE_NORMAL\n            elif bit_value == 0:\n                return BulbWidget.STATE_OFFLINE\n        return BulbWidget.STATE_UNKNOWN\n\n    def _determine_bulb_state(self, bulb, bit_value: int) -&gt; int:\n        \"\"\"\u6839\u636e\u8bbe\u5907\u72b6\u6001\u548c bit \u503c\u51b3\u5b9a\u706f\u5149\u72b6\u6001\"\"\"\n        has_fault = getattr(bulb, 'has_fault', False)\n        return self._determine_bulb_state_cached(has_fault, bit_value)\n\n\n    def process_input_data(self):\n        \"\"\"\u5904\u7406\u7528\u6237\u8f93\u5165\u7684\u6570\u636e\u62a5\u6587\"\"\"\n        try:\n            # \u83b7\u53d6\u8f93\u5165\u7684\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\n            hex_string = self.data_input.text().strip().replace(' ', '')\n\n            if not hex_string:\n                QMessageBox.warning(self, \"\u8b66\u544a\", \"\u8bf7\u8f93\u5165\u6570\u636e\u62a5\u6587\")\n                return\n\n            # \u9a8c\u8bc1\u662f\u5426\u4e3a\u6709\u6548\u7684\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\uff08\u4f7f\u7528\u9884\u7f16\u8bd1\u6b63\u5219\u8868\u8fbe\u5f0f\uff09\n            if not HEX_PATTERN.match(hex_string):\n                QMessageBox.warning(self, \"\u8b66\u544a\", \"\u8bf7\u8f93\u5165\u6709\u6548\u7684\u5341\u516d\u8fdb\u5236\u6570\u636e\")\n                return\n\n            # \u786e\u4fdd\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a\u5076\u6570\uff08\u6bcf\u4e24\u4e2a\u5b57\u7b26\u4ee3\u8868\u4e00\u4e2a\u5b57\u8282\uff09\n            if len(hex_string) % 2 != 0:\n                hex_string = '0' + hex_string\n\n            # \u8f6c\u6362\u4e3a\u5b57\u8282\u6570\u636e\n            byte_data = bytes.fromhex(hex_string)\n\n            print(f\"\u63a5\u6536\u5230\u6570\u636e\u62a5\u6587: {hex_string.upper()}\")\n            print(f\"\u5b57\u8282\u6570\u636e: {[hex(b) for b in byte_data]}\")\n\n            # \u6309\u5b57\u8282\u4f4d\u7f6e\u5206\u53d1\u6570\u636e\n            for byte_pos, byte_value in enumerate(byte_data):\n                if byte_pos in self.byte_groups:\n                    # \u8c03\u7528\u6570\u636e\u5904\u7406\u65b9\u6cd5\n                    self.process_data(byte_pos, bytes([byte_value]))\n                    print(f\"\u5904\u7406\u5b57\u8282\u4f4d\u7f6e {byte_pos}: 0x{byte_value:02X}\")\n\n            # \u6e05\u7a7a\u8f93\u5165\u6846\n            self.data_input.clear()\n\n        except ValueError as e:\n            QMessageBox.critical(self, \"\u9519\u8bef\", f\"\u6570\u636e\u683c\u5f0f\u9519\u8bef: {e}\")\n        except Exception as e:\n            QMessageBox.critical(self, \"\u9519\u8bef\", f\"\u5904\u7406\u6570\u636e\u65f6\u53d1\u751f\u9519\u8bef: {e}\")\n\n    def send_data_packet(self, hex_data: str):\n        \"\"\"\u53d1\u9001\u6570\u636e\u5305\u7684\u516c\u5171\u63a5\u53e3\n        \u5916\u90e8\u8c03\u7528\u63a5\u53e3\uff0c\u7528\u4e8e\u53d1\u9001\u5341\u516d\u8fdb\u5236\u6570\u636e\u5305\n\n        \u53c2\u6570:\n            hex_data (str): \u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u5982 \"ffff\" \u6216 \"ff 00\"\n\n        \u793a\u4f8b:\n            monitor.send_data_packet(\"ffff\")  # \u53d1\u9001\u4e24\u4e2a\u5b57\u8282\u7684\u6570\u636e\n            monitor.send_data_packet(\"ff00\")  # \u53d1\u9001 0xFF \u548c 0x00\n        \"\"\"\n        try:\n            # \u6e05\u7406\u8f93\u5165\u5b57\u7b26\u4e32\n            hex_string = hex_data.strip().replace(' ', '')\n\n            # \u9a8c\u8bc1\u5341\u516d\u8fdb\u5236\u683c\u5f0f\uff08\u4f7f\u7528\u9884\u7f16\u8bd1\u6b63\u5219\u8868\u8fbe\u5f0f\uff09\n            if not HEX_PATTERN.match(hex_string):\n                raise ValueError(\"\u65e0\u6548\u7684\u5341\u516d\u8fdb\u5236\u6570\u636e\")\n\n            # \u786e\u4fdd\u5076\u6570\u957f\u5ea6\n            if len(hex_string) % 2 != 0:\n                hex_string = '0' + hex_string\n\n            # \u8f6c\u6362\u4e3a\u5b57\u8282\u5e76\u5904\u7406\n            byte_data = bytes.fromhex(hex_string)\n\n            print(f\"API\u8c03\u7528 - \u63a5\u6536\u6570\u636e: {hex_string.upper()}\")\n\n            # \u5206\u53d1\u5230\u5404\u5b57\u8282\u4f4d\u7f6e\n            for byte_pos, byte_value in enumerate(byte_data):\n                if byte_pos in self.byte_groups:\n                    self.process_data(byte_pos, bytes([byte_value]))\n\n            return True\n\n        except Exception as e:\n            print(f\"\u53d1\u9001\u6570\u636e\u5305\u5931\u8d25: {e}\")\n            return False\n</code></pre>"},{"location":"API/bulb_statemonitor/#src.components.BulbStateMonitor.bulb_statemonitor_demo.BulbStateMonitor.clear_devices","title":"<code>clear_devices()</code>","text":"<p>\u6e05\u7a7a\u8bbe\u5907</p> Source code in <code>src\\components\\BulbStateMonitor\\bulb_statemonitor_demo.py</code> <pre><code>def clear_devices(self):\n    \"\"\"\u6e05\u7a7a\u8bbe\u5907\"\"\"\n    self.devices.clear()\n    self.device_configs.clear()\n    self.byte_groups.clear()\n</code></pre>"},{"location":"API/bulb_statemonitor/#src.components.BulbStateMonitor.bulb_statemonitor_demo.BulbStateMonitor.create_device_layout","title":"<code>create_device_layout()</code>","text":"<p>\u521b\u5efa\u8bbe\u5907\u5e03\u5c40</p> Source code in <code>src\\components\\BulbStateMonitor\\bulb_statemonitor_demo.py</code> <pre><code>def create_device_layout(self):\n    \"\"\"\u521b\u5efa\u8bbe\u5907\u5e03\u5c40\"\"\"\n    # \u6e05\u7a7a\u73b0\u6709\u5e03\u5c40\n    for i in reversed(range(self.scroll_layout.count())):\n        self.scroll_layout.itemAt(i).widget().setParent(None)\n\n    # \u6309\u5b57\u8282\u5206\u7ec4\u663e\u793a\n    for byte_pos in sorted(self.byte_groups.keys()):\n        group_box = QGroupBox(f\"\u5b57\u8282 {byte_pos}\")\n        group_layout = QGridLayout()\n\n        device_ids = self.byte_groups[byte_pos]\n        row, col = 0, 0\n        max_cols = 4  # \u6bcf\u884c\u6700\u591a4\u4e2a\u8bbe\u5907\n\n        for device_id in device_ids:\n            if device_id in self.devices:\n                bulb = self.devices[device_id]\n\n                # \u521b\u5efa\u8bbe\u5907\u5bb9\u5668\n                device_frame = QFrame()\n                device_frame.setFrameStyle(QFrame.Box)\n                device_layout = QHBoxLayout(device_frame)\n                device_layout.setContentsMargins(5, 5, 5, 5)\n\n                # \u6dfb\u52a0\u706f\u6ce1\u548c\u540d\u79f0\n                device_layout.addWidget(bulb)\n\n                name_label = QLabel(bulb.device_name)\n                name_label.setStyleSheet(\"\"\"\n                    QLabel {\n                        font-size: 12px;\n                        font-family: 'Microsoft YaHei';\n                        margin-left: 5px;\n                    }\n                \"\"\")\n                device_layout.addWidget(name_label)\n                device_layout.addStretch()\n\n                group_layout.addWidget(device_frame, row, col)\n\n                col += 1\n                if col &gt;= max_cols:\n                    col = 0\n                    row += 1\n\n        group_box.setLayout(group_layout)\n        self.scroll_layout.addWidget(group_box)\n\n    self.scroll_layout.addStretch()\n</code></pre>"},{"location":"API/bulb_statemonitor/#src.components.BulbStateMonitor.bulb_statemonitor_demo.BulbStateMonitor.init_ui","title":"<code>init_ui()</code>","text":"<p>\u521d\u59cb\u5316UI</p> Source code in <code>src\\components\\BulbStateMonitor\\bulb_statemonitor_demo.py</code> <pre><code>def init_ui(self):\n    \"\"\"\u521d\u59cb\u5316UI\"\"\"\n    self.setWindowTitle(\"\u706f\u6ce1\u72b6\u6001\u76d1\u63a7\u5de5\u5177\")\n    self.setGeometry(100, 100, 1200, 800)\n\n    # \u4e3b\u5e03\u5c40\n    window = QWidget()\n    main_layout = QVBoxLayout()\n\n    # \u6807\u9898\n    title_label = QLabel(\"\u8bbe\u5907\u72b6\u6001\u76d1\u63a7\")\n    title_label.setAlignment(Qt.AlignCenter)\n    title_label.setStyleSheet(\"\"\"\n        QLabel {\n            font-size: 24px;\n            font-weight: bold;\n            color: #2c7dff;\n            margin: 10px;\n        }\n    \"\"\")\n    main_layout.addWidget(title_label)\n    # \u8bbe\u7f6e\u5e94\u7528\u56fe\u6807\n    try:\n        icon_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))),\n                                 \"assets\", \"icon\", \"\u706f\u6ce1\u4e3b\u610f\u521b\u65b0.svg\")\n        if os.path.exists(icon_path):\n            self.setWindowIcon(QIcon(icon_path))\n    except Exception as e:\n        print(f\"\u8bbe\u7f6e\u56fe\u6807\u5931\u8d25: {e}\")\n\n    # \u6eda\u52a8\u533a\u57df\u7528\u4e8e\u663e\u793a\u8bbe\u5907\n    self.scroll_area = QScrollArea()\n    self.scroll_area.setWidgetResizable(True)\n    self.scroll_area.setVerticalScrollBarPolicy(Qt.ScrollBarAsNeeded)\n    self.scroll_area.setHorizontalScrollBarPolicy(Qt.ScrollBarAsNeeded)\n\n    self.scroll_widget = QWidget()\n    self.scroll_layout = QVBoxLayout(self.scroll_widget)\n    self.scroll_area.setWidget(self.scroll_widget)\n\n    main_layout.addWidget(self.scroll_area)\n\n    # \u6570\u636e\u8f93\u5165\u533a\u57df\n    input_layout = QHBoxLayout()\n\n    input_label = QLabel(\"\u6570\u636e\u62a5\u6587:\")\n    input_layout.addWidget(input_label)\n\n    self.data_input = QLineEdit()\n    self.data_input.setPlaceholderText(\"\u8f93\u5165\u5341\u516d\u8fdb\u5236\u6570\u636e\uff0c\u5982: ffff \u6216 ff00\")\n    self.data_input.returnPressed.connect(self.process_input_data)\n    input_layout.addWidget(self.data_input)\n\n    self.send_btn = QPushButton(\"\u53d1\u9001\u6570\u636e\")\n    self.send_btn.clicked.connect(self.process_input_data)\n    input_layout.addWidget(self.send_btn)\n\n    main_layout.addLayout(input_layout)\n\n    self.setLayout(main_layout)\n</code></pre>"},{"location":"API/bulb_statemonitor/#src.components.BulbStateMonitor.bulb_statemonitor_demo.BulbStateMonitor.load_config","title":"<code>load_config()</code>","text":"<p>\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\uff08\u5e26\u7f13\u5b58\u673a\u5236\uff09</p> Source code in <code>src\\components\\BulbStateMonitor\\bulb_statemonitor_demo.py</code> <pre><code>def load_config(self):\n    \"\"\"\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\uff08\u5e26\u7f13\u5b58\u673a\u5236\uff09\"\"\"\n    try:\n        # \u521b\u5efa\u793a\u4f8b\u914d\u7f6e\u6587\u4ef6\n        config_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"conf.xlsx\")\n        csv_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), \"conf.csv\")\n\n        if not os.path.exists(config_path) and not os.path.exists(csv_path):\n            raise FileNotFoundError(\"\u672a\u627e\u5230\u914d\u7f6e\u6587\u4ef6\")\n\n        # \u786e\u5b9a\u4f7f\u7528\u7684\u914d\u7f6e\u6587\u4ef6\u8def\u5f84\n        active_config_path = config_path if (PANDAS_AVAILABLE and os.path.exists(config_path)) else csv_path\n\n        # \u68c0\u67e5\u6587\u4ef6\u4fee\u6539\u65f6\u95f4\uff0c\u5982\u679c\u672a\u53d8\u5316\u5219\u4f7f\u7528\u7f13\u5b58\n        current_mtime = os.path.getmtime(active_config_path)\n        if self._config_cache is not None and self._config_mtime == current_mtime:\n            df = self._config_cache\n            self._cache_hits += 1\n            print(f\"\u914d\u7f6e\u7f13\u5b58\u547d\u4e2d (\u547d\u4e2d\u6b21\u6570: {self._cache_hits})\")\n        else:\n            self._cache_misses += 1\n            # \u8bfb\u53d6\u914d\u7f6e\u6587\u4ef6\n            if PANDAS_AVAILABLE and os.path.exists(config_path):\n                try:\n                    df = pd.read_excel(config_path, engine='openpyxl')\n                except Exception:\n                    # \u5982\u679copenpyxl\u4e0d\u53ef\u7528\uff0c\u5c1d\u8bd5\u5176\u4ed6\u5f15\u64ce\n                    try:\n                        df = pd.read_excel(config_path, engine='xlrd')\n                    except Exception:\n                        df = pd.read_excel(config_path)\n            elif os.path.exists(csv_path):\n                if PANDAS_AVAILABLE:\n                    df = pd.read_csv(csv_path)\n                else:\n                    # \u624b\u52a8\u89e3\u6790CSV\n                    import csv\n                    data = []\n                    with open(csv_path, 'r', encoding='utf-8') as f:\n                        reader = csv.DictReader(f)\n                        for row in reader:\n                            data.append(row)\n                    # \u521b\u5efa\u7b80\u5355\u7684DataFrame\u66ff\u4ee3\n                    class SimpleDataFrame:\n                        def __init__(self, data):\n                            self.data = data\n                        def iterrows(self):\n                            for i, row in enumerate(self.data):\n                                yield i, row\n                    df = SimpleDataFrame(data)\n            else:\n                raise FileNotFoundError(\"\u914d\u7f6e\u6587\u4ef6\u4e0d\u5b58\u5728\")\n\n            # \u7f13\u5b58\u914d\u7f6e\u6570\u636e\u548c\u4fee\u6539\u65f6\u95f4\n            self._config_cache = df\n            self._config_mtime = current_mtime\n\n        # \u6e05\u7a7a\u73b0\u6709\u8bbe\u5907\n        self.clear_devices()\n\n        # \u6309\u5b57\u8282\u5206\u7ec4\n        self.byte_groups = {}\n        device_id = 0\n\n        for _, row in df.iterrows():\n            # \u517c\u5bb9\u4e0d\u540c\u7684\u5217\u540d\u683c\u5f0f\n            if 'BYTE' in df.columns:\n                # \u82f1\u6587\u5217\u540d\u683c\u5f0f\n                # \u5904\u7406ActiveState\u548cInactiveState\u7684\u6587\u672c\u503c\n                active_state_text = str(row['ActiveState'])\n                inactive_state_text = str(row['InactiveState'])\n\n                # \u68c0\u6d4b\u6545\u969c\u5173\u952e\u8bcd\n                fault_keywords = ['\u6545\u969c', '\u9519\u8bef', 'fault', 'error', 'fail']\n                has_fault = any(keyword in active_state_text.lower() or keyword in inactive_state_text.lower() \n                               for keyword in fault_keywords)\n\n                active_state = 1 if active_state_text == '\u6709\u6548' else 0\n                inactive_state = 0 if inactive_state_text == '\u65e0\u6548' else 1\n\n                config = {\n                    '\u5b57\u8282\u4f4d\u6570': int(row['BYTE']),\n                    '\u6bd4\u7279\u4f4d\u6570': int(row['BITE']),\n                    '\u8bbe\u5907\u540d\u79f0': str(row['SignalName']),\n                    '\u6d3b\u8dc3\u72b6\u6001': active_state,\n                    '\u5931\u6548\u72b6\u6001': inactive_state,\n                    '\u521d\u59cb\u503c': int(row['INIT']),\n                    '\u6709\u6545\u969c': has_fault\n                }\n            else:\n                # \u4e2d\u6587\u5217\u540d\u683c\u5f0f\n                active_state_text = str(row.get('\u6d3b\u8dc3\u72b6\u6001\u6587\u672c', ''))\n                inactive_state_text = str(row.get('\u5931\u6548\u72b6\u6001\u6587\u672c', ''))\n\n                # \u68c0\u6d4b\u6545\u969c\u5173\u952e\u8bcd\n                fault_keywords = ['\u6545\u969c', '\u9519\u8bef', 'fault', 'error', 'fail']\n                has_fault = any(keyword in active_state_text.lower() or keyword in inactive_state_text.lower() \n                               for keyword in fault_keywords)\n\n                config = {\n                    '\u5b57\u8282\u4f4d\u6570': int(row['\u5b57\u8282\u4f4d\u6570']),\n                    '\u6bd4\u7279\u4f4d\u6570': int(row['\u6bd4\u7279\u4f4d\u6570']),\n                    '\u8bbe\u5907\u540d\u79f0': str(row['\u8bbe\u5907\u540d\u79f0']),\n                    '\u6d3b\u8dc3\u72b6\u6001': int(row['\u6d3b\u8dc3\u72b6\u6001']),\n                    '\u5931\u6548\u72b6\u6001': int(row['\u5931\u6548\u72b6\u6001']),\n                    '\u521d\u59cb\u503c': int(row['\u521d\u59cb\u503c']),\n                    '\u6709\u6545\u969c': has_fault\n                }\n\n            # \u521b\u5efa\u8bbe\u5907\u63a7\u4ef6 - \u6839\u636eINIT\u503c\u786e\u5b9a\u521d\u59cb\u72b6\u6001\n            init_value = config['\u521d\u59cb\u503c']\n            active_value = config['\u6d3b\u8dc3\u72b6\u6001']\n            inactive_value = config['\u5931\u6548\u72b6\u6001']\n            has_fault = config['\u6709\u6545\u969c']\n\n            if has_fault:\n                # \u5982\u679c\u5305\u542b\u6545\u969c\u5173\u952e\u8bcd\uff0c\u4f7f\u7528\u7ea2\u706f\u8868\u793a\u9519\u8bef\u72b6\u6001\n                initial_state = BulbWidget.STATE_ERROR\n            elif init_value == active_value:\n                # INIT\u503c\u7b49\u4e8e\u6d3b\u8dc3\u72b6\u6001\u503c\uff0c\u663e\u793a\u7eff\u706f\n                initial_state = BulbWidget.STATE_NORMAL\n            elif init_value == inactive_value:\n                # INIT\u503c\u7b49\u4e8e\u5931\u6548\u72b6\u6001\u503c\uff0c\u663e\u793a\u7070\u706f\n                initial_state = BulbWidget.STATE_OFFLINE\n            else:\n                # INIT\u503c\u65e2\u4e0d\u7b49\u4e8e\u6d3b\u8dc3\u4e5f\u4e0d\u7b49\u4e8e\u5931\u6548\uff0c\u663e\u793a\u6a59\u706f\n                initial_state = BulbWidget.STATE_UNKNOWN\n\n            bulb = BulbWidget(device_id, config['\u8bbe\u5907\u540d\u79f0'], initial_state)\n            bulb.set_position_info(config['\u6bd4\u7279\u4f4d\u6570'])\n            bulb.has_fault = has_fault  # \u6dfb\u52a0\u6545\u969c\u6807\u8bb0\n\n            self.devices[device_id] = bulb\n            self.device_configs[device_id] = config\n\n            # \u6309\u5b57\u8282\u5206\u7ec4\n            byte_pos = config['\u5b57\u8282\u4f4d\u6570']\n            if byte_pos not in self.byte_groups:\n                self.byte_groups[byte_pos] = []\n            self.byte_groups[byte_pos].append(device_id)\n\n            device_id += 1\n\n        self.create_device_layout()\n        print(f\"\u6210\u529f\u52a0\u8f7d {len(self.devices)} \u4e2a\u8bbe\u5907\u914d\u7f6e\")\n\n    except Exception as e:\n        # raise(f\"\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\u5931\u8d25: {e}\")\n        QMessageBox.critical(self, \"\u9519\u8bef\", f\"\u52a0\u8f7d\u914d\u7f6e\u6587\u4ef6\u5931\u8d25:\\n{e}\")\n</code></pre>"},{"location":"API/bulb_statemonitor/#src.components.BulbStateMonitor.bulb_statemonitor_demo.BulbStateMonitor.process_data","title":"<code>process_data(byte_pos, data)</code>","text":"<p>\u5904\u7406\u63a5\u6536\u5230\u7684\u6570\u636e\uff08\u4f18\u5316\u7248\u672c\uff09</p> Source code in <code>src\\components\\BulbStateMonitor\\bulb_statemonitor_demo.py</code> <pre><code>def process_data(self, byte_pos: int, data: bytes):\n    \"\"\"\u5904\u7406\u63a5\u6536\u5230\u7684\u6570\u636e\uff08\u4f18\u5316\u7248\u672c\uff09\"\"\"\n    if byte_pos not in self.byte_groups:\n        return\n\n    # \u5b89\u5168\u83b7\u53d6\u5b57\u8282\u503c\n    byte_value = data[0] if data and len(data) &gt; 0 else 0\n\n    # \u6279\u91cf\u66f4\u65b0\u8be5\u5b57\u8282\u5bf9\u5e94\u7684\u6240\u6709\u8bbe\u5907\u72b6\u6001\n    state_updates = []  # \u6536\u96c6\u72b6\u6001\u66f4\u65b0\n\n    for device_id in self.byte_groups[byte_pos]:\n        if device_id not in self.devices:\n            continue\n\n        bulb = self.devices[device_id]\n\n        # \u83b7\u53d6\u5f53\u524d bit \u7684\u503c\n        bit_value = (byte_value &gt;&gt; bulb.bit_pos) &amp; 1\n\n        # \u6839\u636e\u8bbe\u5907\u72b6\u6001\u548c bit \u503c\u786e\u5b9a\u706f\u5149\u72b6\u6001\n        new_state = self._determine_bulb_state(bulb, bit_value)\n\n        # \u53ea\u6709\u72b6\u6001\u771f\u6b63\u6539\u53d8\u65f6\u624d\u66f4\u65b0\n        if new_state != bulb.current_state:\n            state_updates.append((bulb, new_state))\n            self._state_updates += 1\n        else:\n            self._skipped_updates += 1\n\n    # \u6279\u91cf\u6267\u884c\u72b6\u6001\u66f4\u65b0\n    for bulb, new_state in state_updates:\n        bulb.set_state(new_state)\n</code></pre>"},{"location":"API/bulb_statemonitor/#src.components.BulbStateMonitor.bulb_statemonitor_demo.BulbStateMonitor.process_input_data","title":"<code>process_input_data()</code>","text":"<p>\u5904\u7406\u7528\u6237\u8f93\u5165\u7684\u6570\u636e\u62a5\u6587</p> Source code in <code>src\\components\\BulbStateMonitor\\bulb_statemonitor_demo.py</code> <pre><code>def process_input_data(self):\n    \"\"\"\u5904\u7406\u7528\u6237\u8f93\u5165\u7684\u6570\u636e\u62a5\u6587\"\"\"\n    try:\n        # \u83b7\u53d6\u8f93\u5165\u7684\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\n        hex_string = self.data_input.text().strip().replace(' ', '')\n\n        if not hex_string:\n            QMessageBox.warning(self, \"\u8b66\u544a\", \"\u8bf7\u8f93\u5165\u6570\u636e\u62a5\u6587\")\n            return\n\n        # \u9a8c\u8bc1\u662f\u5426\u4e3a\u6709\u6548\u7684\u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\uff08\u4f7f\u7528\u9884\u7f16\u8bd1\u6b63\u5219\u8868\u8fbe\u5f0f\uff09\n        if not HEX_PATTERN.match(hex_string):\n            QMessageBox.warning(self, \"\u8b66\u544a\", \"\u8bf7\u8f93\u5165\u6709\u6548\u7684\u5341\u516d\u8fdb\u5236\u6570\u636e\")\n            return\n\n        # \u786e\u4fdd\u5b57\u7b26\u4e32\u957f\u5ea6\u4e3a\u5076\u6570\uff08\u6bcf\u4e24\u4e2a\u5b57\u7b26\u4ee3\u8868\u4e00\u4e2a\u5b57\u8282\uff09\n        if len(hex_string) % 2 != 0:\n            hex_string = '0' + hex_string\n\n        # \u8f6c\u6362\u4e3a\u5b57\u8282\u6570\u636e\n        byte_data = bytes.fromhex(hex_string)\n\n        print(f\"\u63a5\u6536\u5230\u6570\u636e\u62a5\u6587: {hex_string.upper()}\")\n        print(f\"\u5b57\u8282\u6570\u636e: {[hex(b) for b in byte_data]}\")\n\n        # \u6309\u5b57\u8282\u4f4d\u7f6e\u5206\u53d1\u6570\u636e\n        for byte_pos, byte_value in enumerate(byte_data):\n            if byte_pos in self.byte_groups:\n                # \u8c03\u7528\u6570\u636e\u5904\u7406\u65b9\u6cd5\n                self.process_data(byte_pos, bytes([byte_value]))\n                print(f\"\u5904\u7406\u5b57\u8282\u4f4d\u7f6e {byte_pos}: 0x{byte_value:02X}\")\n\n        # \u6e05\u7a7a\u8f93\u5165\u6846\n        self.data_input.clear()\n\n    except ValueError as e:\n        QMessageBox.critical(self, \"\u9519\u8bef\", f\"\u6570\u636e\u683c\u5f0f\u9519\u8bef: {e}\")\n    except Exception as e:\n        QMessageBox.critical(self, \"\u9519\u8bef\", f\"\u5904\u7406\u6570\u636e\u65f6\u53d1\u751f\u9519\u8bef: {e}\")\n</code></pre>"},{"location":"API/bulb_statemonitor/#src.components.BulbStateMonitor.bulb_statemonitor_demo.BulbStateMonitor.send_data_packet","title":"<code>send_data_packet(hex_data)</code>","text":"<p>\u53d1\u9001\u6570\u636e\u5305\u7684\u516c\u5171\u63a5\u53e3 \u5916\u90e8\u8c03\u7528\u63a5\u53e3\uff0c\u7528\u4e8e\u53d1\u9001\u5341\u516d\u8fdb\u5236\u6570\u636e\u5305</p> \u53c2\u6570 <p>hex_data (str): \u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u5982 \"ffff\" \u6216 \"ff 00\"</p> \u793a\u4f8b <p>monitor.send_data_packet(\"ffff\")  # \u53d1\u9001\u4e24\u4e2a\u5b57\u8282\u7684\u6570\u636e monitor.send_data_packet(\"ff00\")  # \u53d1\u9001 0xFF \u548c 0x00</p> Source code in <code>src\\components\\BulbStateMonitor\\bulb_statemonitor_demo.py</code> <pre><code>def send_data_packet(self, hex_data: str):\n    \"\"\"\u53d1\u9001\u6570\u636e\u5305\u7684\u516c\u5171\u63a5\u53e3\n    \u5916\u90e8\u8c03\u7528\u63a5\u53e3\uff0c\u7528\u4e8e\u53d1\u9001\u5341\u516d\u8fdb\u5236\u6570\u636e\u5305\n\n    \u53c2\u6570:\n        hex_data (str): \u5341\u516d\u8fdb\u5236\u5b57\u7b26\u4e32\uff0c\u5982 \"ffff\" \u6216 \"ff 00\"\n\n    \u793a\u4f8b:\n        monitor.send_data_packet(\"ffff\")  # \u53d1\u9001\u4e24\u4e2a\u5b57\u8282\u7684\u6570\u636e\n        monitor.send_data_packet(\"ff00\")  # \u53d1\u9001 0xFF \u548c 0x00\n    \"\"\"\n    try:\n        # \u6e05\u7406\u8f93\u5165\u5b57\u7b26\u4e32\n        hex_string = hex_data.strip().replace(' ', '')\n\n        # \u9a8c\u8bc1\u5341\u516d\u8fdb\u5236\u683c\u5f0f\uff08\u4f7f\u7528\u9884\u7f16\u8bd1\u6b63\u5219\u8868\u8fbe\u5f0f\uff09\n        if not HEX_PATTERN.match(hex_string):\n            raise ValueError(\"\u65e0\u6548\u7684\u5341\u516d\u8fdb\u5236\u6570\u636e\")\n\n        # \u786e\u4fdd\u5076\u6570\u957f\u5ea6\n        if len(hex_string) % 2 != 0:\n            hex_string = '0' + hex_string\n\n        # \u8f6c\u6362\u4e3a\u5b57\u8282\u5e76\u5904\u7406\n        byte_data = bytes.fromhex(hex_string)\n\n        print(f\"API\u8c03\u7528 - \u63a5\u6536\u6570\u636e: {hex_string.upper()}\")\n\n        # \u5206\u53d1\u5230\u5404\u5b57\u8282\u4f4d\u7f6e\n        for byte_pos, byte_value in enumerate(byte_data):\n            if byte_pos in self.byte_groups:\n                self.process_data(byte_pos, bytes([byte_value]))\n\n        return True\n\n    except Exception as e:\n        print(f\"\u53d1\u9001\u6570\u636e\u5305\u5931\u8d25: {e}\")\n        return False\n</code></pre>"},{"location":"API/bulb_statemonitor/#src.components.BulbStateMonitor.bulb_statemonitor_demo.BulbWidget","title":"<code>BulbWidget</code>","text":"<p>               Bases: <code>QLabel</code></p> <p>\u706f\u6ce1\u63a7\u4ef6\u7c7b \u652f\u63015\u79cd\u72b6\u6001\uff1a\u6b63\u5e38\u8fd0\u884c(\u7eff\u8272)\u3001\u9519\u8bef\u72b6\u6001(\u7ea2\u8272)\u3001\u8b66\u544a\u72b6\u6001(\u9ec4\u8272)\u3001\u505c\u6b62/\u79bb\u7ebf(\u7070\u8272)\u3001\u672a\u77e5\u72b6\u6001(\u84dd\u8272)</p> Source code in <code>src\\components\\BulbStateMonitor\\bulb_statemonitor_demo.py</code> <pre><code>class BulbWidget(QLabel):\n    \"\"\"\n    \u706f\u6ce1\u63a7\u4ef6\u7c7b\n    \u652f\u63015\u79cd\u72b6\u6001\uff1a\u6b63\u5e38\u8fd0\u884c(\u7eff\u8272)\u3001\u9519\u8bef\u72b6\u6001(\u7ea2\u8272)\u3001\u8b66\u544a\u72b6\u6001(\u9ec4\u8272)\u3001\u505c\u6b62/\u79bb\u7ebf(\u7070\u8272)\u3001\u672a\u77e5\u72b6\u6001(\u84dd\u8272)\n    \"\"\"\n\n    # \u72b6\u6001\u5e38\u91cf\n    STATE_NORMAL = 0    # \u6b63\u5e38\u8fd0\u884c - \u7eff\u8272\n    STATE_ERROR = 1     # \u9519\u8bef\u72b6\u6001 - \u7ea2\u8272\n    STATE_WARNING = 2   # \u8b66\u544a\u72b6\u6001 - \u9ec4\u8272\n    STATE_OFFLINE = 3   # \u505c\u6b62/\u79bb\u7ebf - \u7070\u8272\n    STATE_FAULT = 4     # \u6545\u969c\u72b6\u6001 - \u84dd\u8272\n    STATE_UNKNOWN = 5   # \u672a\u77e5\u72b6\u6001 - \u6a59\u8272\n\n    # \u72b6\u6001\u989c\u8272\u6620\u5c04\n    STATE_COLORS = {\n        STATE_NORMAL: QColor(0, 255, 0),      # \u7eff\u8272\n        STATE_ERROR: QColor(255, 0, 0),       # \u7ea2\u8272\n        STATE_WARNING: QColor(255, 255, 0),   # \u9ec4\u8272\n        STATE_OFFLINE: QColor(128, 128, 128), # \u7070\u8272\n        STATE_FAULT: QColor(0, 0, 255),       # \u84dd\u8272\n        STATE_UNKNOWN: QColor(255, 165, 0)    # \u6a59\u8272\n    }\n\n    # \u72b6\u6001\u540d\u79f0\u6620\u5c04\n    STATE_NAMES = {\n        STATE_NORMAL: \"\u6b63\u5e38\u8fd0\u884c\",\n        STATE_ERROR: \"\u9519\u8bef\u72b6\u6001\",\n        STATE_WARNING: \"\u8b66\u544a\u72b6\u6001\",\n        STATE_OFFLINE: \"\u505c\u6b62/\u79bb\u7ebf\",\n        STATE_FAULT: \"\u6b63\u5e38\u72b6\u6001\",\n        STATE_UNKNOWN: \"\u672a\u77e5\u72b6\u6001\"\n    }\n\n    # \u7c7b\u7ea7\u522b\u7684pixmap\u7f13\u5b58\uff0c\u6240\u6709\u5b9e\u4f8b\u5171\u4eab\n    _pixmap_cache = {}\n\n    # \u4fe1\u53f7\u5b9a\u4e49\n    stateChanged = pyqtSignal(int, int)  # \u72b6\u6001\u6539\u53d8\u4fe1\u53f7 (\u8bbe\u5907ID, \u65b0\u72b6\u6001)\n\n    def __init__(self, device_id: int, device_name: str, initial_state: int = STATE_OFFLINE):\n        super().__init__()\n        self.device_id = device_id\n        self.device_name = device_name\n        self.current_state = initial_state\n        self.bit_pos = 0\n        self.has_fault = False  # \u6545\u969c\u6807\u8bb0\n\n        self.setFixedSize(24, 24)\n        self.setScaledContents(True)\n        self.setToolTip(f\"{device_name} - {self.STATE_NAMES[initial_state]}\")\n\n        self.update_display()\n\n    def set_position_info(self, bit_pos: int):\n        \"\"\"\u8bbe\u7f6e\u4f4d\u7f6e\u4fe1\u606f\"\"\"\n        self.bit_pos = bit_pos\n\n    def update_display(self):\n        \"\"\"\u66f4\u65b0\u663e\u793a\"\"\"\n        # \u68c0\u67e5\u7f13\u5b58\u4e2d\u662f\u5426\u5df2\u6709\u8be5\u72b6\u6001\u7684pixmap\n        if self.current_state not in self._pixmap_cache:\n            # \u521b\u5efa\u5f69\u8272\u7684\u5706\u5f62\u56fe\u6807\n            pixmap = QPixmap(24, 24)\n            pixmap.fill(Qt.transparent)\n\n            painter = QPainter(pixmap)\n            painter.setRenderHint(QPainter.Antialiasing)\n\n            # \u8bbe\u7f6e\u989c\u8272\n            color = self.STATE_COLORS[self.current_state]\n            painter.setBrush(color)\n            painter.setPen(Qt.NoPen)\n\n            # \u7ed8\u5236\u5706\u5f62\n            painter.drawEllipse(2, 2, 20, 20)\n            painter.end()\n\n            # \u7f13\u5b58pixmap\n            self._pixmap_cache[self.current_state] = pixmap\n\n        # \u4f7f\u7528\u7f13\u5b58\u7684pixmap\n        self.setPixmap(self._pixmap_cache[self.current_state])\n        self.setToolTip(f\"{self.device_name} - {self.STATE_NAMES[self.current_state]}\")\n\n    def set_state(self, state: int):\n        \"\"\"\u8bbe\u7f6e\u72b6\u6001\"\"\"\n        if state != self.current_state and state in self.STATE_COLORS:\n            old_state = self.current_state\n            self.current_state = state\n            self.update_display()\n            self.stateChanged.emit(self.device_id, state)\n\n            # # \u8bb0\u5f55\u72b6\u6001\u53d8\u5316\u65e5\u5fd7\n            # print(f\"\u8bbe\u5907 {self.device_name} \u72b6\u6001\u4ece {self.STATE_NAMES[old_state]} \u53d8\u66f4\u4e3a {self.STATE_NAMES[state]}\")\n\n    def get_state(self) -&gt; int:\n        \"\"\"\u83b7\u53d6\u5f53\u524d\u72b6\u6001\"\"\"\n        return self.current_state\n</code></pre>"},{"location":"API/bulb_statemonitor/#src.components.BulbStateMonitor.bulb_statemonitor_demo.BulbWidget.get_state","title":"<code>get_state()</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u72b6\u6001</p> Source code in <code>src\\components\\BulbStateMonitor\\bulb_statemonitor_demo.py</code> <pre><code>def get_state(self) -&gt; int:\n    \"\"\"\u83b7\u53d6\u5f53\u524d\u72b6\u6001\"\"\"\n    return self.current_state\n</code></pre>"},{"location":"API/bulb_statemonitor/#src.components.BulbStateMonitor.bulb_statemonitor_demo.BulbWidget.set_position_info","title":"<code>set_position_info(bit_pos)</code>","text":"<p>\u8bbe\u7f6e\u4f4d\u7f6e\u4fe1\u606f</p> Source code in <code>src\\components\\BulbStateMonitor\\bulb_statemonitor_demo.py</code> <pre><code>def set_position_info(self, bit_pos: int):\n    \"\"\"\u8bbe\u7f6e\u4f4d\u7f6e\u4fe1\u606f\"\"\"\n    self.bit_pos = bit_pos\n</code></pre>"},{"location":"API/bulb_statemonitor/#src.components.BulbStateMonitor.bulb_statemonitor_demo.BulbWidget.set_state","title":"<code>set_state(state)</code>","text":"<p>\u8bbe\u7f6e\u72b6\u6001</p> Source code in <code>src\\components\\BulbStateMonitor\\bulb_statemonitor_demo.py</code> <pre><code>def set_state(self, state: int):\n    \"\"\"\u8bbe\u7f6e\u72b6\u6001\"\"\"\n    if state != self.current_state and state in self.STATE_COLORS:\n        old_state = self.current_state\n        self.current_state = state\n        self.update_display()\n        self.stateChanged.emit(self.device_id, state)\n</code></pre>"},{"location":"API/bulb_statemonitor/#src.components.BulbStateMonitor.bulb_statemonitor_demo.BulbWidget.update_display","title":"<code>update_display()</code>","text":"<p>\u66f4\u65b0\u663e\u793a</p> Source code in <code>src\\components\\BulbStateMonitor\\bulb_statemonitor_demo.py</code> <pre><code>def update_display(self):\n    \"\"\"\u66f4\u65b0\u663e\u793a\"\"\"\n    # \u68c0\u67e5\u7f13\u5b58\u4e2d\u662f\u5426\u5df2\u6709\u8be5\u72b6\u6001\u7684pixmap\n    if self.current_state not in self._pixmap_cache:\n        # \u521b\u5efa\u5f69\u8272\u7684\u5706\u5f62\u56fe\u6807\n        pixmap = QPixmap(24, 24)\n        pixmap.fill(Qt.transparent)\n\n        painter = QPainter(pixmap)\n        painter.setRenderHint(QPainter.Antialiasing)\n\n        # \u8bbe\u7f6e\u989c\u8272\n        color = self.STATE_COLORS[self.current_state]\n        painter.setBrush(color)\n        painter.setPen(Qt.NoPen)\n\n        # \u7ed8\u5236\u5706\u5f62\n        painter.drawEllipse(2, 2, 20, 20)\n        painter.end()\n\n        # \u7f13\u5b58pixmap\n        self._pixmap_cache[self.current_state] = pixmap\n\n    # \u4f7f\u7528\u7f13\u5b58\u7684pixmap\n    self.setPixmap(self._pixmap_cache[self.current_state])\n    self.setToolTip(f\"{self.device_name} - {self.STATE_NAMES[self.current_state]}\")\n</code></pre>"},{"location":"API/bulb_statemonitor/#src.components.BulbStateMonitor.bulb_statemonitor_demo.main","title":"<code>main()</code>","text":"<p>\u4e3b\u51fd\u6570</p> Source code in <code>src\\components\\BulbStateMonitor\\bulb_statemonitor_demo.py</code> <pre><code>def main():\n    \"\"\"\u4e3b\u51fd\u6570\"\"\"\n    app = QApplication(sys.argv)\n    app.setApplicationName(\"\u706f\u6ce1\u72b6\u6001\u76d1\u63a7\u5de5\u5177\")\n\n    window = BulbStateMonitor()\n    window.show()\n\n    sys.exit(app.exec_())\n</code></pre>"},{"location":"API/bus_data_monitor/","title":"\u603b\u7ebf\u6570\u636e\u76d1\u63a7 BusDataMonitor API","text":""},{"location":"API/bus_data_monitor/#src.components.BusDataMonitor.monitor_main","title":"<code>src.components.BusDataMonitor.monitor_main</code>","text":""},{"location":"API/bus_data_monitor/#src.components.BusDataMonitor.monitor_main.BusDataMonitorForm","title":"<code>BusDataMonitorForm</code>","text":"<p>               Bases: <code>QMainWindow</code></p> Source code in <code>src\\components\\BusDataMonitor\\monitor_main.py</code> <pre><code>class BusDataMonitorForm(QMainWindow):\n    def __init__(self):  \n        super().__init__()\n        self.init_ui()\n        self.channel_config=channel_config\n        # &gt;&gt;&gt; \u4f7f\u7528 RS422Manager \u521b\u5efa\u6240\u6709 producer/queue\n        self.manager = RS422Manager(self.channel_config, use_sim=True)\n        self.manager.start_all()\n\n        # \u52a8\u6001\u4fdd\u5b58 dock monitor \u5f15\u7528\n        self.dock_monitors = {}  # key = ch_id , value = dock widget\n\n        # \u6839\u636e\u914d\u7f6e\u52a8\u6001\u521b\u5efa toolbar action\n        self.create_channel_actions()\n        self.init_toolbtn()\n\n    def init_ui(self):\n        self.setWindowTitle(\"\u603b\u7ebf\u6570\u636e\u76d1\u63a7\")\n        self.resize(1000, 800)\n        self.toolBar = self.addToolBar(\"Main Toolbar\")  \n        self.toolBar.setMovable(False)\n        self.toolBar.setToolButtonStyle(Qt.ToolButtonTextUnderIcon)\n\n\n    def init_toolbtn(self):\n        # \u521b\u5efa\u5360\u4f4d widget\n        spacer = QWidget()\n        spacer.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Preferred)\n        self.toolBar.addWidget(spacer)  # \u6dfb\u52a0\u5230 toolbar \u4e2d\uff0c\u524d\u9762\u7684\u6309\u94ae\u4f1a\u88ab\u63a8\u5230\u5de6\u8fb9\n\n        # \u7136\u540e\u518d\u6dfb\u52a0\u4f60\u7684\u53f3\u4fa7\u6309\u94ae\n        self.btn_layout = QAction(QIcon(ICON_TABLE), \"\u9ed8\u8ba4\u5e03\u5c40\", self)\n        self.btn_layout.triggered.connect(self.reset_layout)\n        self.toolBar.addAction(self.btn_layout)  \n\n\n    def create_channel_actions(self):\n        \"\"\"\u904d\u5386 manager.producers\uff0c\u4e3a\u6bcf\u4e2a\u901a\u9053\u52a8\u6001\u6dfb\u52a0\u6309\u94ae\"\"\"\n        for ch_id, producers in self.manager.producers.items():\n            # \u521b\u5efa\u4e00\u4e2a\u6309\u94ae\uff1a\u6807\u9898\u4e3a\u901a\u9053ID\n            act = QAction(QIcon(ICON_SITEMAP),f\"\u901a\u9053 {ch_id}\", self)\n            act.triggered.connect(lambda _, cid=ch_id: self.show_channel_monitor(cid))\n            self.toolBar.addAction(act)\n\n    def show_channel_monitor(self, ch_id):\n        \"\"\"\u663e\u793a\u5bf9\u5e94\u901a\u9053\u7684 DataMonitor dock\"\"\"\n        if ch_id in self.dock_monitors:\n            dock = self.dock_monitors[ch_id]\n            dock.raise_()\n            dock.show()\n            return\n\n        # &gt;&gt;&gt; \u53d6\u5bf9\u5e94\u961f\u5217\n        q = self.manager.queues[ch_id]\n\n        # \u521b\u5efa DataMonitor\n        monitor = DataMonitor(f\"\u901a\u9053 {ch_id} \u6570\u636e\u76d1\u63a7\", data_queue=q, channel_id=ch_id)\n        dock = QDockWidget(f\"\u901a\u9053 {ch_id} \u6570\u636e\u76d1\u63a7\", self)\n        dock.setWidget(monitor)\n        dock.setObjectName(f\"Dock_{ch_id}\")\n        dock.setFeatures(QDockWidget.DockWidgetMovable | \n                         QDockWidget.DockWidgetClosable | \n                         QDockWidget.DockWidgetFloatable)\n        self.addDockWidget(Qt.LeftDockWidgetArea, dock)\n        self.dock_monitors[ch_id] = dock\n\n        # \u53cc\u51fb\u884c\u663e\u793a\u89e3\u6790\u7a97\u53e3\n        monitor.row_double_clicked.connect(self.show_parsed_dock)\n        dock.show()\n\n\n    def show_parsed_dock(self, hex_str, protocol, index, source):\n        parser = DockParser(protocol, index, self)\n        dock = QDockWidget(f\"{source.upper()} \u89e3\u6790\", self)\n        dock.setWidget(parser)\n        dock.setFeatures(QDockWidget.DockWidgetMovable | \n                         QDockWidget.DockWidgetClosable | \n                         QDockWidget.DockWidgetFloatable)\n        self.addDockWidget(Qt.BottomDockWidgetArea, dock)\n        parser.update_data(hex_str)\n        dock.show()\n\n\n    def reset_layout(self):\n        \"\"\"\u6062\u590d Dock \u5e03\u5c40\"\"\"\n        docks = list(self.dock_monitors.values())\n        if not docks:\n            return\n        for d in docks:\n            d.setFloating(False)\n        if len(docks) == 1:\n            self.addDockWidget(Qt.LeftDockWidgetArea, docks[0])\n            return\n        if len(docks) == 2:\n            self.addDockWidget(Qt.LeftDockWidgetArea, docks[0])\n            self.addDockWidget(Qt.RightDockWidgetArea, docks[1])\n            return\n        # \u8d85\u8fc72\u4e2a \u2192 \u5f3a\u52362\u00d72\u5e03\u5c40\n        left_col, right_col = [], []\n        for i, dock in enumerate(docks):\n            (left_col if i % 2 == 0 else right_col).append(dock)\n        if left_col:\n            self.addDockWidget(Qt.LeftDockWidgetArea, left_col[0])\n            for d in left_col[1:]:\n                self.splitDockWidget(left_col[0], d, Qt.Vertical)\n        if right_col:\n            self.addDockWidget(Qt.RightDockWidgetArea, right_col[0])\n            for d in right_col[1:]:\n                self.splitDockWidget(right_col[0], d, Qt.Vertical)\n\n\n    def closeEvent(self, e: QCloseEvent):\n        self.manager.stop_all()\n        super().closeEvent(e)\n</code></pre>"},{"location":"API/bus_data_monitor/#src.components.BusDataMonitor.monitor_main.BusDataMonitorForm.create_channel_actions","title":"<code>create_channel_actions()</code>","text":"<p>\u904d\u5386 manager.producers\uff0c\u4e3a\u6bcf\u4e2a\u901a\u9053\u52a8\u6001\u6dfb\u52a0\u6309\u94ae</p> Source code in <code>src\\components\\BusDataMonitor\\monitor_main.py</code> <pre><code>def create_channel_actions(self):\n    \"\"\"\u904d\u5386 manager.producers\uff0c\u4e3a\u6bcf\u4e2a\u901a\u9053\u52a8\u6001\u6dfb\u52a0\u6309\u94ae\"\"\"\n    for ch_id, producers in self.manager.producers.items():\n        # \u521b\u5efa\u4e00\u4e2a\u6309\u94ae\uff1a\u6807\u9898\u4e3a\u901a\u9053ID\n        act = QAction(QIcon(ICON_SITEMAP),f\"\u901a\u9053 {ch_id}\", self)\n        act.triggered.connect(lambda _, cid=ch_id: self.show_channel_monitor(cid))\n        self.toolBar.addAction(act)\n</code></pre>"},{"location":"API/bus_data_monitor/#src.components.BusDataMonitor.monitor_main.BusDataMonitorForm.reset_layout","title":"<code>reset_layout()</code>","text":"<p>\u6062\u590d Dock \u5e03\u5c40</p> Source code in <code>src\\components\\BusDataMonitor\\monitor_main.py</code> <pre><code>def reset_layout(self):\n    \"\"\"\u6062\u590d Dock \u5e03\u5c40\"\"\"\n    docks = list(self.dock_monitors.values())\n    if not docks:\n        return\n    for d in docks:\n        d.setFloating(False)\n    if len(docks) == 1:\n        self.addDockWidget(Qt.LeftDockWidgetArea, docks[0])\n        return\n    if len(docks) == 2:\n        self.addDockWidget(Qt.LeftDockWidgetArea, docks[0])\n        self.addDockWidget(Qt.RightDockWidgetArea, docks[1])\n        return\n    # \u8d85\u8fc72\u4e2a \u2192 \u5f3a\u52362\u00d72\u5e03\u5c40\n    left_col, right_col = [], []\n    for i, dock in enumerate(docks):\n        (left_col if i % 2 == 0 else right_col).append(dock)\n    if left_col:\n        self.addDockWidget(Qt.LeftDockWidgetArea, left_col[0])\n        for d in left_col[1:]:\n            self.splitDockWidget(left_col[0], d, Qt.Vertical)\n    if right_col:\n        self.addDockWidget(Qt.RightDockWidgetArea, right_col[0])\n        for d in right_col[1:]:\n            self.splitDockWidget(right_col[0], d, Qt.Vertical)\n</code></pre>"},{"location":"API/bus_data_monitor/#src.components.BusDataMonitor.monitor_main.BusDataMonitorForm.show_channel_monitor","title":"<code>show_channel_monitor(ch_id)</code>","text":"<p>\u663e\u793a\u5bf9\u5e94\u901a\u9053\u7684 DataMonitor dock</p> Source code in <code>src\\components\\BusDataMonitor\\monitor_main.py</code> <pre><code>def show_channel_monitor(self, ch_id):\n    \"\"\"\u663e\u793a\u5bf9\u5e94\u901a\u9053\u7684 DataMonitor dock\"\"\"\n    if ch_id in self.dock_monitors:\n        dock = self.dock_monitors[ch_id]\n        dock.raise_()\n        dock.show()\n        return\n\n    # &gt;&gt;&gt; \u53d6\u5bf9\u5e94\u961f\u5217\n    q = self.manager.queues[ch_id]\n\n    # \u521b\u5efa DataMonitor\n    monitor = DataMonitor(f\"\u901a\u9053 {ch_id} \u6570\u636e\u76d1\u63a7\", data_queue=q, channel_id=ch_id)\n    dock = QDockWidget(f\"\u901a\u9053 {ch_id} \u6570\u636e\u76d1\u63a7\", self)\n    dock.setWidget(monitor)\n    dock.setObjectName(f\"Dock_{ch_id}\")\n    dock.setFeatures(QDockWidget.DockWidgetMovable | \n                     QDockWidget.DockWidgetClosable | \n                     QDockWidget.DockWidgetFloatable)\n    self.addDockWidget(Qt.LeftDockWidgetArea, dock)\n    self.dock_monitors[ch_id] = dock\n\n    # \u53cc\u51fb\u884c\u663e\u793a\u89e3\u6790\u7a97\u53e3\n    monitor.row_double_clicked.connect(self.show_parsed_dock)\n    dock.show()\n</code></pre>"},{"location":"API/calib_tool/","title":"\u6821\u51c6\u5de5\u5177 CalibTool API","text":""},{"location":"API/calib_tool/#src.components.CalibTool.calib_tool_demo","title":"<code>src.components.CalibTool.calib_tool_demo</code>","text":""},{"location":"API/calib_tool/#src.components.CalibTool.calib_tool_demo--_1","title":"\u6821\u51c6\u5de5\u5177","text":"<p>\u8be5\u6a21\u5757\u63d0\u4f9b\u4e86\u4e00\u4e2a\u56fe\u5f62\u5316\u754c\u9762\u7684\u6821\u51c6\u5de5\u5177\uff0c\u7528\u4e8e\u5bf9\u786c\u4ef6\u8bbe\u5907(\u5982\u6a21\u62df\u91cf\u91c7\u96c6\u5361)\u8fdb\u884c\u6821\u51c6\u914d\u7f6e\u3002 \u4e3b\u8981\u529f\u80fd\u5305\u62ec\uff1a - \u652f\u6301\u591a\u901a\u9053\u8bbe\u5907\u7684\u72ec\u7acb\u6821\u51c6\u914d\u7f6e - \u63d0\u4f9b\u6821\u51c6\u6570\u636e\u8868\u683c\u7f16\u8f91\u529f\u80fd\uff0c\u5305\u62ec\u6dfb\u52a0\u3001\u5220\u9664\u3001\u4fee\u6539\u6821\u51c6\u70b9 - \u652f\u6301\u6821\u51c6\u6570\u636e\u7684\u5b58\u50a8\u548c\u52a0\u8f7d</p> <p>\u4f7f\u7528\u65b9\u6cd5\uff1a \u9700\u8981\u5b9a\u4e49\u677f\u5361\u4fe1\u606f\u5b57\u5178,\u8be5\u5de5\u5177\u6839\u636e\u5b57\u5178\u5185\u5bb9\u52a0\u8f7d\u677f\u5361\u4fe1\u606f,\u5b57\u5178\u683c\u5f0f\u5982\u4e0b\uff1a cardinfo={         \"name\":\"card_1\",         \"type\":\"\u6a21\u62df\u91cf\",         \"ch\":2,         \"mfr\":\"\u5382\u5546_1\",         \"desc\":\"\u63cf\u8ff0_1\"     }</p> <p>Author: JIN &amp;&amp; jjyrealdeal@163.com Date: 2025-05-14 11:28:51 Copyright (c) 2025 by JIN, All Rights Reserved.</p>"},{"location":"API/calib_tool/#src.components.CalibTool.calib_tool_demo.CalibrationForm","title":"<code>CalibrationForm</code>","text":"<p>               Bases: <code>QWidget</code>, <code>Ui_CalibrationForm</code></p> Source code in <code>src\\components\\CalibTool\\calib_tool_demo.py</code> <pre><code>class CalibrationForm(QWidget,Ui_CalibrationForm): \n    def __init__(self):\n        \"\"\"\n        :cardinfo: \u5f85\u6821\u51c6\u7684\u677f\u5361\u4fe1\u606fdict\n        \"\"\"\n        super(CalibrationForm,self).__init__()\n        self.setupUi(self)\n        self.cardname=cardinfo['name']   \n        self.cardch=cardinfo['ch']\n        self.init_ui()\n        self.load_calibconf()\n        self.load_cardinfo()\n\n\n\n    def init_ui(self) -&gt; None:\n        \"\"\"\u521d\u59cb\u5316\u754c\u9762\"\"\"\n        self.setWindowTitle('\u6821\u51c6\u5de5\u5177')\n        self.resize(800,500)\n        self.label_info.setText('')\n        self.tableWidget_cali.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows) #QTableWidget\u8bbe\u7f6e\u6574\u884c\u9009\u4e2d\n        self.tableWidget_cali.setSelectionMode(QAbstractItemView.SelectionMode.ExtendedSelection)\n        #self.tableWidget_cali.setSelectionMode(QAbstractItemView.SelectionMode.MultiSelection)\n        self.tableWidget_cali.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)\n        self.tableWidget_cali.setContextMenuPolicy(Qt.CustomContextMenu)  # \u6253\u5f00\u53f3\u952e\u83dc\u5355\u7684\u7b56\u7565\n        self.tableWidget_cali.customContextMenuRequested.connect(self.table_contextmenu_event)  # \u7ed1\u5b9a\u4e8b\u4ef6\n        self.tableWidget_cali.setItemDelegateForColumn(1, NumericDelegate(self))\n        self.pushButton_save.clicked.connect(self.save_calibconf)\n        self.pushButton_clear.clicked.connect(self.delete_all)\n        self.pushButton_ouput.clicked.connect(self.signal_output)\n        self.comboBox_ch.currentIndexChanged.connect(self.load_calibdata)\n\n\n\n    def load_calibconf(self) -&gt; None:\n        \"\"\"\u52a0\u8f7d\u63d2\u503c\u8868\"\"\"\n        try:\n            with open(CALIBCONF_PATH, 'r') as file:\n                self.calibconf = json.load(file)\n        except json.JSONDecodeError:\n            self.calibconf = {} \n        if self.cardname not in self.calibconf:\n            self.calibconf[self.cardname] = {}\n            for i in range(0, self.cardch): \n                self.calibconf[self.cardname][str(i)] = {}\n        with open(CALIBCONF_PATH, 'w') as file:\n            json.dump(self.calibconf, file, indent=4)\n\n\n\n    def load_cardinfo(self) -&gt; None:\n        \"\"\"\u52a0\u8f7d\u677f\u5361\u4fe1\u606f\"\"\"\n        self.comboBox_cardname.addItem(self.cardname)\n        self.comboBox_ch.addItems([str(i) for i in range(0,self.cardch)])\n        '''\u6267\u884c\u6253\u5f00\u677f\u5361\u83b7\u53d6\u677f\u5361\u72b6\u6001(\u7565)'''\n        self.label_cardstate.setText('\u5df2\u8fde\u63a5')\n        self.comboBox_ch.setCurrentIndex(0)\n        self.load_calibdata()\n\n\n\n    def load_calibdata(self) -&gt; None:\n        \"\"\"\u52a0\u8f7d\u6807\u5b9a\u4fe1\u606f\u5e76\u663e\u793a\u5728\u8868\u683c\u4e2d\"\"\"\n        currch = self.comboBox_ch.currentText()\n        # \u6e05\u7a7a\u5f53\u524d\u8868\u683c\n        self.tableWidget_cali.setRowCount(0)\n\n        # \u83b7\u53d6\u5f53\u524d\u901a\u9053\u7684\u6821\u51c6\u6570\u636e\n        ch_data = self.calibconf.get(self.cardname, {}).get(currch, {})\n\n        if not ch_data:\n            print(f\"\u901a\u9053 {currch} \u7684\u6821\u51c6\u6570\u636e\u4e3a\u7a7a\")\n            return\n\n        # \u904d\u5386\u5e76\u63d2\u5165\u5230\u8868\u683c\uff08\u6309\u6807\u51c6\u503c\u6392\u5e8f\uff09\n        for row, (standard_value, measured_value) in enumerate(sorted(ch_data.items(), key=lambda x: float(x[0]))):\n            self.tableWidget_cali.insertRow(row)\n\n            # \u6807\u51c6\u503c\uff08\u4e0d\u53ef\u7f16\u8f91\uff09\n            std_item = QTableWidgetItem(str(standard_value))\n            std_item.setFlags(std_item.flags() &amp; ~Qt.ItemIsEditable)  # \u7981\u6b62\u7f16\u8f91\n\n            # \u5b9e\u6d4b\u503c\uff08\u5141\u8bb8\u7f16\u8f91\uff09\n            meas_item = QTableWidgetItem(str(measured_value))\n\n            # \u63d2\u5165\u5230\u8868\u683c\n            self.tableWidget_cali.setItem(row, 0, std_item)\n            self.tableWidget_cali.setItem(row, 1, meas_item)\n\n\n\n    def table_contextmenu_event(self,pos) -&gt; None:\n        \"\"\"\u8bbe\u7f6e\u53f3\u952e\u83dc\u5355\u5217\u8868\"\"\"\n        item = self.tableWidget_cali.itemAt(pos)\n        TreeMenu=QMenu(parent=self.tableWidget_cali)\n        #\u521b\u5efaaction\n        DeleteRow=QAction('\u5220\u9664')\n        #\u7ed1\u5b9aaction\u4e0e\u51fd\u6570\n        DeleteRow.triggered.connect(self.delete_row)\n        #\u8bbe\u7f6e\u53f3\u952e\u83dc\u5355\u5217\u8868\u7684\u663e\u793a\u9879\n        TreeMenu.addActions([DeleteRow])\n        TreeMenu.exec_(self.tableWidget_cali.mapToGlobal(pos))  # \u663e\u793a\u53f3\u952e\u83dc\u5355\n\n\n\n    def delete_all(self) -&gt; None:\n        \"\"\"\u6e05\u7a7a\u8868\u683c\u6570\u636e\"\"\"\n        reply = QMessageBox.question(\n            self,\n            '\u786e\u8ba4',\n            \"\u786e\u5b9a\u8981\u6e05\u7a7a\u6240\u6709\u6570\u636e\u5417\uff1f\",\n            QMessageBox.Yes | QMessageBox.No,\n            QMessageBox.No\n        )\n\n        if reply == QMessageBox.Yes:\n            self.tableWidget_cali.setRowCount(0)\n            self.label_info.setText('')\n        else:\n            return\n\n\n\n    def delete_row(self) -&gt; None:\n        \"\"\"\u5220\u9664\u8868\u683c\u884c\"\"\"\n        self.label_info.setText('')\n        selected_indexes = self.tableWidget_cali.selectedIndexes()\n        if not selected_indexes:\n            return\n        selected_rows = sorted(set(index.row() for index in selected_indexes), reverse=True)\n        for row in selected_rows:\n            self.tableWidget_cali.removeRow(row)\n\n\n\n    def signal_output(self) -&gt; None:\n        \"\"\"\u4fe1\u53f7\u6fc0\u52b1\uff08\u8f93\u51faor\u91c7\u96c6\uff09\"\"\"\n        self.label_info.setText('')\n\n        val=self.doubleSpinBox_val.value()\n        ch=int(self.comboBox_ch.currentText())\n\n        '''\u6267\u884c\u4fe1\u53f7\u6fc0\u52b1\uff08\u8f93\u51faor\u91c7\u96c6\uff09(\u7565)'''\n        print(f'\u901a\u9053{ch}\u6fc0\u52b1\u4fe1\u53f7\u4e3a{val}')\n\n        # \u83b7\u53d6\u6807\u51c6\u503c\u5217\u7684\u6240\u6709\u503c\n        standvals = self.get_column_values()\n        if not standvals:\n            # \u5982\u679c\u8868\u683c\u4e3a\u7a7a\uff0c\u76f4\u63a5\u63d2\u5165\u7b2c0\u884c\n            row_count = 0\n            self.tableWidget_cali.insertRow(row_count)\n            item = QTableWidgetItem(str(val))\n            item.setFlags(item.flags() &amp; ~Qt.ItemIsEditable)\n            self.tableWidget_cali.setItem(row_count, 0, item)\n            return\n\n        # \u5c06 standvals \u8f6c\u6362\u4e3a float \u5e76\u6392\u5e8f\n        sorted_vals = np.sort(np.array(standvals, dtype=float))\n        index = np.searchsorted(sorted_vals, val)\n        if val not in map(float, standvals):\n            # \u63d2\u5165\u65b0\u884c\n            row_count = index\n            self.tableWidget_cali.insertRow(row_count)\n            item = QTableWidgetItem(str(val))\n            item.setFlags(item.flags() &amp; ~Qt.ItemIsEditable)\n            self.tableWidget_cali.setItem(row_count, 0, item)\n            # \u9009\u4e2d\u65b0\u63d2\u5165\u7684\u884c\n            self.tableWidget_cali.selectRow(row_count)\n        else:\n            # \u9009\u4e2d\u5df2\u5b58\u5728\u7684\u90a3\u4e00\u884c\n            for row in range(self.tableWidget_cali.rowCount()):\n                item = self.tableWidget_cali.item(row, 0)\n                if item and float(item.text()) == float(val):\n                    self.tableWidget_cali.selectRow(row)\n                    break\n\n\n\n    def get_column_values(self) -&gt; list:\n        \"\"\"\u83b7\u53d6\u5f53\u524d\u8868\u683c\u6240\u6709\u7684\u6807\u51c6\u503c\"\"\"\n        standvals = []\n        for row in range(self.tableWidget_cali.rowCount()):\n            item = self.tableWidget_cali.item(row, 0)\n            standvals.append(item.text())\n\n        return standvals\n\n\n\n    def save_calibconf(self) -&gt; bool:\n        \"\"\"\u4fdd\u5b58\u63d2\u503c\u8868\u914d\u7f6e\u5230\u6587\u4ef6\uff0c\u8fd4\u56de\u662f\u5426\u6210\u529f\"\"\"\n        try:\n            ch = str(self.comboBox_ch.currentText())\n\n            if self.has_empty_measured_values():\n                QMessageBox.warning(self, \"\u8b66\u544a\", \"\u68c0\u6d4b\u5230\u6709\u672a\u586b\u5199\u7684\u5b9e\u6d4b\u503c\uff0c\u8bf7\u586b\u5199\u540e\u518d\u4fdd\u5b58\u3002\")\n                return False  # \u505c\u6b62\u4fdd\u5b58\uff0c\u901a\u77e5\u5916\u90e8\u4e0d\u8981\u5173\u95ed\n\n            # \u521d\u59cb\u5316\u7ed3\u6784\n            if self.cardname not in self.calibconf:\n                self.calibconf[self.cardname] = {}\n            self.calibconf[self.cardname][ch] = {}\n\n            for row in range(self.tableWidget_cali.rowCount()):\n                standard_item = self.tableWidget_cali.item(row, 0)\n                measured_item = self.tableWidget_cali.item(row, 1)\n\n                if standard_item and measured_item:\n                    standard_value = standard_item.text()\n                    measured_value = measured_item.text()\n                    self.calibconf[self.cardname][ch][standard_value] = measured_value\n\n            with open(CALIBCONF_PATH, 'w') as file:\n                json.dump(self.calibconf, file, indent=4)\n\n            self.label_info.setText('\u4fdd\u5b58\u6210\u529f\uff01')\n            return True  # \u6210\u529f\u4fdd\u5b58\n\n        except Exception as e:\n            print(str(e))\n            return False\n\n\n\n    def has_config_changed(self) -&gt; bool:\n        \"\"\"\u68c0\u67e5\u5f53\u524d\u914d\u7f6e\u662f\u5426\u4e0e\u539f\u59cb\u914d\u7f6e\u4e0d\u540c\"\"\"\n        return self.calibconf != self.original_calibconf\n\n\n\n    def has_empty_measured_values(self) -&gt; bool:\n        \"\"\"\u68c0\u67e5\u8868\u683c\u4e2d\u5b9e\u6d4b\u503c\u5217\uff08\u7b2c2\u5217\uff09\u662f\u5426\u5b58\u5728\u7a7a\u503c\"\"\"\n        for row in range(self.tableWidget_cali.rowCount()):\n            measured_item = self.tableWidget_cali.item(row, 1)\n            if not measured_item or not measured_item.text().strip():\n                return True  # \u5b58\u5728\u7a7a\u503c\n        return False  # \u6ca1\u6709\u7a7a\u503c\n\n\n\n\n\n\n    def closeEvent(self, event):\n        \"\"\"\u5173\u95ed\u63d0\u793a\"\"\"\n        # \u7b2c\u4e00\u6b65\uff1a\u68c0\u67e5\u5b9e\u6d4b\u503c\u5217\u662f\u5426\u5b58\u5728\u7a7a\u503c\n        if self.has_empty_measured_values():\n            # \u63d0\u793a\u7528\u6237\u8fd8\u6709\u672a\u5b8c\u6210\u7684\u7f16\u8f91\n            msg_box = QMessageBox(self)\n            msg_box.setWindowTitle(\"\u8b66\u544a\")\n            msg_box.setText(\"\u68c0\u6d4b\u5230\u6709\u672a\u586b\u5199\u7684\u5b9e\u6d4b\u503c\uff0c\\n\u76f4\u63a5\u9000\u51fa\u5c06\u5bfc\u81f4\u672a\u4fdd\u5b58\u7684\u6570\u636e\u4e22\u5931\u3002\")\n            btn_continue = msg_box.addButton(\"Edit\", QMessageBox.YesRole)\n            btn_exit = msg_box.addButton(\"Quit\", QMessageBox.NoRole)\n            msg_box.setDefaultButton(btn_continue)\n\n            msg_box.exec_()\n\n            if msg_box.clickedButton() == btn_continue:\n                # \u7528\u6237\u9009\u62e9\u7ee7\u7eed\u7f16\u8f91\uff0c\u963b\u6b62\u5173\u95ed\n                event.ignore()\n                return\n            elif msg_box.clickedButton() == btn_exit:\n                # \u7528\u6237\u9009\u62e9\u76f4\u63a5\u9000\u51fa\uff0c\u6267\u884c\u5173\u95ed\n                event.accept()\n                return\n\n        # \u7b2c\u4e8c\u6b65\uff1a\u6ca1\u6709\u7a7a\u503c\uff0c\u8be2\u95ee\u662f\u5426\u4fdd\u5b58\u914d\u7f6e\n        reply = QMessageBox.question(\n            self,\n            '\u5173\u95ed\u7a97\u53e3',\n            \"\u662f\u5426\u4fdd\u5b58\u6821\u51c6\u6570\u636e?\",\n            QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel,\n            QMessageBox.Cancel\n        )\n\n        if reply == QMessageBox.Yes:\n            if self.save_calibconf():  # \u53ea\u6709\u4fdd\u5b58\u6210\u529f\u624d\u5141\u8bb8\u5173\u95ed\n                event.accept()\n            else:\n                event.ignore()\n        elif reply == QMessageBox.No:\n            event.accept()\n        else:\n            event.ignore()\n</code></pre>"},{"location":"API/calib_tool/#src.components.CalibTool.calib_tool_demo.CalibrationForm.__init__","title":"<code>__init__()</code>","text":"<p>:cardinfo: \u5f85\u6821\u51c6\u7684\u677f\u5361\u4fe1\u606fdict</p> Source code in <code>src\\components\\CalibTool\\calib_tool_demo.py</code> <pre><code>def __init__(self):\n    \"\"\"\n    :cardinfo: \u5f85\u6821\u51c6\u7684\u677f\u5361\u4fe1\u606fdict\n    \"\"\"\n    super(CalibrationForm,self).__init__()\n    self.setupUi(self)\n    self.cardname=cardinfo['name']   \n    self.cardch=cardinfo['ch']\n    self.init_ui()\n    self.load_calibconf()\n    self.load_cardinfo()\n</code></pre>"},{"location":"API/calib_tool/#src.components.CalibTool.calib_tool_demo.CalibrationForm.closeEvent","title":"<code>closeEvent(event)</code>","text":"<p>\u5173\u95ed\u63d0\u793a</p> Source code in <code>src\\components\\CalibTool\\calib_tool_demo.py</code> <pre><code>def closeEvent(self, event):\n    \"\"\"\u5173\u95ed\u63d0\u793a\"\"\"\n    # \u7b2c\u4e00\u6b65\uff1a\u68c0\u67e5\u5b9e\u6d4b\u503c\u5217\u662f\u5426\u5b58\u5728\u7a7a\u503c\n    if self.has_empty_measured_values():\n        # \u63d0\u793a\u7528\u6237\u8fd8\u6709\u672a\u5b8c\u6210\u7684\u7f16\u8f91\n        msg_box = QMessageBox(self)\n        msg_box.setWindowTitle(\"\u8b66\u544a\")\n        msg_box.setText(\"\u68c0\u6d4b\u5230\u6709\u672a\u586b\u5199\u7684\u5b9e\u6d4b\u503c\uff0c\\n\u76f4\u63a5\u9000\u51fa\u5c06\u5bfc\u81f4\u672a\u4fdd\u5b58\u7684\u6570\u636e\u4e22\u5931\u3002\")\n        btn_continue = msg_box.addButton(\"Edit\", QMessageBox.YesRole)\n        btn_exit = msg_box.addButton(\"Quit\", QMessageBox.NoRole)\n        msg_box.setDefaultButton(btn_continue)\n\n        msg_box.exec_()\n\n        if msg_box.clickedButton() == btn_continue:\n            # \u7528\u6237\u9009\u62e9\u7ee7\u7eed\u7f16\u8f91\uff0c\u963b\u6b62\u5173\u95ed\n            event.ignore()\n            return\n        elif msg_box.clickedButton() == btn_exit:\n            # \u7528\u6237\u9009\u62e9\u76f4\u63a5\u9000\u51fa\uff0c\u6267\u884c\u5173\u95ed\n            event.accept()\n            return\n\n    # \u7b2c\u4e8c\u6b65\uff1a\u6ca1\u6709\u7a7a\u503c\uff0c\u8be2\u95ee\u662f\u5426\u4fdd\u5b58\u914d\u7f6e\n    reply = QMessageBox.question(\n        self,\n        '\u5173\u95ed\u7a97\u53e3',\n        \"\u662f\u5426\u4fdd\u5b58\u6821\u51c6\u6570\u636e?\",\n        QMessageBox.Yes | QMessageBox.No | QMessageBox.Cancel,\n        QMessageBox.Cancel\n    )\n\n    if reply == QMessageBox.Yes:\n        if self.save_calibconf():  # \u53ea\u6709\u4fdd\u5b58\u6210\u529f\u624d\u5141\u8bb8\u5173\u95ed\n            event.accept()\n        else:\n            event.ignore()\n    elif reply == QMessageBox.No:\n        event.accept()\n    else:\n        event.ignore()\n</code></pre>"},{"location":"API/calib_tool/#src.components.CalibTool.calib_tool_demo.CalibrationForm.delete_all","title":"<code>delete_all()</code>","text":"<p>\u6e05\u7a7a\u8868\u683c\u6570\u636e</p> Source code in <code>src\\components\\CalibTool\\calib_tool_demo.py</code> <pre><code>def delete_all(self) -&gt; None:\n    \"\"\"\u6e05\u7a7a\u8868\u683c\u6570\u636e\"\"\"\n    reply = QMessageBox.question(\n        self,\n        '\u786e\u8ba4',\n        \"\u786e\u5b9a\u8981\u6e05\u7a7a\u6240\u6709\u6570\u636e\u5417\uff1f\",\n        QMessageBox.Yes | QMessageBox.No,\n        QMessageBox.No\n    )\n\n    if reply == QMessageBox.Yes:\n        self.tableWidget_cali.setRowCount(0)\n        self.label_info.setText('')\n    else:\n        return\n</code></pre>"},{"location":"API/calib_tool/#src.components.CalibTool.calib_tool_demo.CalibrationForm.delete_row","title":"<code>delete_row()</code>","text":"<p>\u5220\u9664\u8868\u683c\u884c</p> Source code in <code>src\\components\\CalibTool\\calib_tool_demo.py</code> <pre><code>def delete_row(self) -&gt; None:\n    \"\"\"\u5220\u9664\u8868\u683c\u884c\"\"\"\n    self.label_info.setText('')\n    selected_indexes = self.tableWidget_cali.selectedIndexes()\n    if not selected_indexes:\n        return\n    selected_rows = sorted(set(index.row() for index in selected_indexes), reverse=True)\n    for row in selected_rows:\n        self.tableWidget_cali.removeRow(row)\n</code></pre>"},{"location":"API/calib_tool/#src.components.CalibTool.calib_tool_demo.CalibrationForm.get_column_values","title":"<code>get_column_values()</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u8868\u683c\u6240\u6709\u7684\u6807\u51c6\u503c</p> Source code in <code>src\\components\\CalibTool\\calib_tool_demo.py</code> <pre><code>def get_column_values(self) -&gt; list:\n    \"\"\"\u83b7\u53d6\u5f53\u524d\u8868\u683c\u6240\u6709\u7684\u6807\u51c6\u503c\"\"\"\n    standvals = []\n    for row in range(self.tableWidget_cali.rowCount()):\n        item = self.tableWidget_cali.item(row, 0)\n        standvals.append(item.text())\n\n    return standvals\n</code></pre>"},{"location":"API/calib_tool/#src.components.CalibTool.calib_tool_demo.CalibrationForm.has_config_changed","title":"<code>has_config_changed()</code>","text":"<p>\u68c0\u67e5\u5f53\u524d\u914d\u7f6e\u662f\u5426\u4e0e\u539f\u59cb\u914d\u7f6e\u4e0d\u540c</p> Source code in <code>src\\components\\CalibTool\\calib_tool_demo.py</code> <pre><code>def has_config_changed(self) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u5f53\u524d\u914d\u7f6e\u662f\u5426\u4e0e\u539f\u59cb\u914d\u7f6e\u4e0d\u540c\"\"\"\n    return self.calibconf != self.original_calibconf\n</code></pre>"},{"location":"API/calib_tool/#src.components.CalibTool.calib_tool_demo.CalibrationForm.has_empty_measured_values","title":"<code>has_empty_measured_values()</code>","text":"<p>\u68c0\u67e5\u8868\u683c\u4e2d\u5b9e\u6d4b\u503c\u5217\uff08\u7b2c2\u5217\uff09\u662f\u5426\u5b58\u5728\u7a7a\u503c</p> Source code in <code>src\\components\\CalibTool\\calib_tool_demo.py</code> <pre><code>def has_empty_measured_values(self) -&gt; bool:\n    \"\"\"\u68c0\u67e5\u8868\u683c\u4e2d\u5b9e\u6d4b\u503c\u5217\uff08\u7b2c2\u5217\uff09\u662f\u5426\u5b58\u5728\u7a7a\u503c\"\"\"\n    for row in range(self.tableWidget_cali.rowCount()):\n        measured_item = self.tableWidget_cali.item(row, 1)\n        if not measured_item or not measured_item.text().strip():\n            return True  # \u5b58\u5728\u7a7a\u503c\n    return False  # \u6ca1\u6709\u7a7a\u503c\n</code></pre>"},{"location":"API/calib_tool/#src.components.CalibTool.calib_tool_demo.CalibrationForm.init_ui","title":"<code>init_ui()</code>","text":"<p>\u521d\u59cb\u5316\u754c\u9762</p> Source code in <code>src\\components\\CalibTool\\calib_tool_demo.py</code> <pre><code>def init_ui(self) -&gt; None:\n    \"\"\"\u521d\u59cb\u5316\u754c\u9762\"\"\"\n    self.setWindowTitle('\u6821\u51c6\u5de5\u5177')\n    self.resize(800,500)\n    self.label_info.setText('')\n    self.tableWidget_cali.setSelectionBehavior(QAbstractItemView.SelectionBehavior.SelectRows) #QTableWidget\u8bbe\u7f6e\u6574\u884c\u9009\u4e2d\n    self.tableWidget_cali.setSelectionMode(QAbstractItemView.SelectionMode.ExtendedSelection)\n    #self.tableWidget_cali.setSelectionMode(QAbstractItemView.SelectionMode.MultiSelection)\n    self.tableWidget_cali.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)\n    self.tableWidget_cali.setContextMenuPolicy(Qt.CustomContextMenu)  # \u6253\u5f00\u53f3\u952e\u83dc\u5355\u7684\u7b56\u7565\n    self.tableWidget_cali.customContextMenuRequested.connect(self.table_contextmenu_event)  # \u7ed1\u5b9a\u4e8b\u4ef6\n    self.tableWidget_cali.setItemDelegateForColumn(1, NumericDelegate(self))\n    self.pushButton_save.clicked.connect(self.save_calibconf)\n    self.pushButton_clear.clicked.connect(self.delete_all)\n    self.pushButton_ouput.clicked.connect(self.signal_output)\n    self.comboBox_ch.currentIndexChanged.connect(self.load_calibdata)\n</code></pre>"},{"location":"API/calib_tool/#src.components.CalibTool.calib_tool_demo.CalibrationForm.load_calibconf","title":"<code>load_calibconf()</code>","text":"<p>\u52a0\u8f7d\u63d2\u503c\u8868</p> Source code in <code>src\\components\\CalibTool\\calib_tool_demo.py</code> <pre><code>def load_calibconf(self) -&gt; None:\n    \"\"\"\u52a0\u8f7d\u63d2\u503c\u8868\"\"\"\n    try:\n        with open(CALIBCONF_PATH, 'r') as file:\n            self.calibconf = json.load(file)\n    except json.JSONDecodeError:\n        self.calibconf = {} \n    if self.cardname not in self.calibconf:\n        self.calibconf[self.cardname] = {}\n        for i in range(0, self.cardch): \n            self.calibconf[self.cardname][str(i)] = {}\n    with open(CALIBCONF_PATH, 'w') as file:\n        json.dump(self.calibconf, file, indent=4)\n</code></pre>"},{"location":"API/calib_tool/#src.components.CalibTool.calib_tool_demo.CalibrationForm.load_calibdata","title":"<code>load_calibdata()</code>","text":"<p>\u52a0\u8f7d\u6807\u5b9a\u4fe1\u606f\u5e76\u663e\u793a\u5728\u8868\u683c\u4e2d</p> Source code in <code>src\\components\\CalibTool\\calib_tool_demo.py</code> <pre><code>def load_calibdata(self) -&gt; None:\n    \"\"\"\u52a0\u8f7d\u6807\u5b9a\u4fe1\u606f\u5e76\u663e\u793a\u5728\u8868\u683c\u4e2d\"\"\"\n    currch = self.comboBox_ch.currentText()\n    # \u6e05\u7a7a\u5f53\u524d\u8868\u683c\n    self.tableWidget_cali.setRowCount(0)\n\n    # \u83b7\u53d6\u5f53\u524d\u901a\u9053\u7684\u6821\u51c6\u6570\u636e\n    ch_data = self.calibconf.get(self.cardname, {}).get(currch, {})\n\n    if not ch_data:\n        print(f\"\u901a\u9053 {currch} \u7684\u6821\u51c6\u6570\u636e\u4e3a\u7a7a\")\n        return\n\n    # \u904d\u5386\u5e76\u63d2\u5165\u5230\u8868\u683c\uff08\u6309\u6807\u51c6\u503c\u6392\u5e8f\uff09\n    for row, (standard_value, measured_value) in enumerate(sorted(ch_data.items(), key=lambda x: float(x[0]))):\n        self.tableWidget_cali.insertRow(row)\n\n        # \u6807\u51c6\u503c\uff08\u4e0d\u53ef\u7f16\u8f91\uff09\n        std_item = QTableWidgetItem(str(standard_value))\n        std_item.setFlags(std_item.flags() &amp; ~Qt.ItemIsEditable)  # \u7981\u6b62\u7f16\u8f91\n\n        # \u5b9e\u6d4b\u503c\uff08\u5141\u8bb8\u7f16\u8f91\uff09\n        meas_item = QTableWidgetItem(str(measured_value))\n\n        # \u63d2\u5165\u5230\u8868\u683c\n        self.tableWidget_cali.setItem(row, 0, std_item)\n        self.tableWidget_cali.setItem(row, 1, meas_item)\n</code></pre>"},{"location":"API/calib_tool/#src.components.CalibTool.calib_tool_demo.CalibrationForm.load_cardinfo","title":"<code>load_cardinfo()</code>","text":"<p>\u52a0\u8f7d\u677f\u5361\u4fe1\u606f</p> Source code in <code>src\\components\\CalibTool\\calib_tool_demo.py</code> <pre><code>def load_cardinfo(self) -&gt; None:\n    \"\"\"\u52a0\u8f7d\u677f\u5361\u4fe1\u606f\"\"\"\n    self.comboBox_cardname.addItem(self.cardname)\n    self.comboBox_ch.addItems([str(i) for i in range(0,self.cardch)])\n    '''\u6267\u884c\u6253\u5f00\u677f\u5361\u83b7\u53d6\u677f\u5361\u72b6\u6001(\u7565)'''\n    self.label_cardstate.setText('\u5df2\u8fde\u63a5')\n    self.comboBox_ch.setCurrentIndex(0)\n    self.load_calibdata()\n</code></pre>"},{"location":"API/calib_tool/#src.components.CalibTool.calib_tool_demo.CalibrationForm.save_calibconf","title":"<code>save_calibconf()</code>","text":"<p>\u4fdd\u5b58\u63d2\u503c\u8868\u914d\u7f6e\u5230\u6587\u4ef6\uff0c\u8fd4\u56de\u662f\u5426\u6210\u529f</p> Source code in <code>src\\components\\CalibTool\\calib_tool_demo.py</code> <pre><code>def save_calibconf(self) -&gt; bool:\n    \"\"\"\u4fdd\u5b58\u63d2\u503c\u8868\u914d\u7f6e\u5230\u6587\u4ef6\uff0c\u8fd4\u56de\u662f\u5426\u6210\u529f\"\"\"\n    try:\n        ch = str(self.comboBox_ch.currentText())\n\n        if self.has_empty_measured_values():\n            QMessageBox.warning(self, \"\u8b66\u544a\", \"\u68c0\u6d4b\u5230\u6709\u672a\u586b\u5199\u7684\u5b9e\u6d4b\u503c\uff0c\u8bf7\u586b\u5199\u540e\u518d\u4fdd\u5b58\u3002\")\n            return False  # \u505c\u6b62\u4fdd\u5b58\uff0c\u901a\u77e5\u5916\u90e8\u4e0d\u8981\u5173\u95ed\n\n        # \u521d\u59cb\u5316\u7ed3\u6784\n        if self.cardname not in self.calibconf:\n            self.calibconf[self.cardname] = {}\n        self.calibconf[self.cardname][ch] = {}\n\n        for row in range(self.tableWidget_cali.rowCount()):\n            standard_item = self.tableWidget_cali.item(row, 0)\n            measured_item = self.tableWidget_cali.item(row, 1)\n\n            if standard_item and measured_item:\n                standard_value = standard_item.text()\n                measured_value = measured_item.text()\n                self.calibconf[self.cardname][ch][standard_value] = measured_value\n\n        with open(CALIBCONF_PATH, 'w') as file:\n            json.dump(self.calibconf, file, indent=4)\n\n        self.label_info.setText('\u4fdd\u5b58\u6210\u529f\uff01')\n        return True  # \u6210\u529f\u4fdd\u5b58\n\n    except Exception as e:\n        print(str(e))\n        return False\n</code></pre>"},{"location":"API/calib_tool/#src.components.CalibTool.calib_tool_demo.CalibrationForm.signal_output","title":"<code>signal_output()</code>","text":"<p>\u4fe1\u53f7\u6fc0\u52b1\uff08\u8f93\u51faor\u91c7\u96c6\uff09</p> Source code in <code>src\\components\\CalibTool\\calib_tool_demo.py</code> <pre><code>def signal_output(self) -&gt; None:\n    \"\"\"\u4fe1\u53f7\u6fc0\u52b1\uff08\u8f93\u51faor\u91c7\u96c6\uff09\"\"\"\n    self.label_info.setText('')\n\n    val=self.doubleSpinBox_val.value()\n    ch=int(self.comboBox_ch.currentText())\n\n    '''\u6267\u884c\u4fe1\u53f7\u6fc0\u52b1\uff08\u8f93\u51faor\u91c7\u96c6\uff09(\u7565)'''\n    print(f'\u901a\u9053{ch}\u6fc0\u52b1\u4fe1\u53f7\u4e3a{val}')\n\n    # \u83b7\u53d6\u6807\u51c6\u503c\u5217\u7684\u6240\u6709\u503c\n    standvals = self.get_column_values()\n    if not standvals:\n        # \u5982\u679c\u8868\u683c\u4e3a\u7a7a\uff0c\u76f4\u63a5\u63d2\u5165\u7b2c0\u884c\n        row_count = 0\n        self.tableWidget_cali.insertRow(row_count)\n        item = QTableWidgetItem(str(val))\n        item.setFlags(item.flags() &amp; ~Qt.ItemIsEditable)\n        self.tableWidget_cali.setItem(row_count, 0, item)\n        return\n\n    # \u5c06 standvals \u8f6c\u6362\u4e3a float \u5e76\u6392\u5e8f\n    sorted_vals = np.sort(np.array(standvals, dtype=float))\n    index = np.searchsorted(sorted_vals, val)\n    if val not in map(float, standvals):\n        # \u63d2\u5165\u65b0\u884c\n        row_count = index\n        self.tableWidget_cali.insertRow(row_count)\n        item = QTableWidgetItem(str(val))\n        item.setFlags(item.flags() &amp; ~Qt.ItemIsEditable)\n        self.tableWidget_cali.setItem(row_count, 0, item)\n        # \u9009\u4e2d\u65b0\u63d2\u5165\u7684\u884c\n        self.tableWidget_cali.selectRow(row_count)\n    else:\n        # \u9009\u4e2d\u5df2\u5b58\u5728\u7684\u90a3\u4e00\u884c\n        for row in range(self.tableWidget_cali.rowCount()):\n            item = self.tableWidget_cali.item(row, 0)\n            if item and float(item.text()) == float(val):\n                self.tableWidget_cali.selectRow(row)\n                break\n</code></pre>"},{"location":"API/calib_tool/#src.components.CalibTool.calib_tool_demo.CalibrationForm.table_contextmenu_event","title":"<code>table_contextmenu_event(pos)</code>","text":"<p>\u8bbe\u7f6e\u53f3\u952e\u83dc\u5355\u5217\u8868</p> Source code in <code>src\\components\\CalibTool\\calib_tool_demo.py</code> <pre><code>def table_contextmenu_event(self,pos) -&gt; None:\n    \"\"\"\u8bbe\u7f6e\u53f3\u952e\u83dc\u5355\u5217\u8868\"\"\"\n    item = self.tableWidget_cali.itemAt(pos)\n    TreeMenu=QMenu(parent=self.tableWidget_cali)\n    #\u521b\u5efaaction\n    DeleteRow=QAction('\u5220\u9664')\n    #\u7ed1\u5b9aaction\u4e0e\u51fd\u6570\n    DeleteRow.triggered.connect(self.delete_row)\n    #\u8bbe\u7f6e\u53f3\u952e\u83dc\u5355\u5217\u8868\u7684\u663e\u793a\u9879\n    TreeMenu.addActions([DeleteRow])\n    TreeMenu.exec_(self.tableWidget_cali.mapToGlobal(pos))  # \u663e\u793a\u53f3\u952e\u83dc\u5355\n</code></pre>"},{"location":"API/calib_tool/#src.components.CalibTool.calib_tool_demo.NumericDelegate","title":"<code>NumericDelegate</code>","text":"<p>               Bases: <code>QStyledItemDelegate</code></p> <p>\u9650\u5236\u8868\u683c\u8f93\u5165\u4e3a\u6570\u5b57\u6216\u5c0f\u6570</p> Source code in <code>src\\components\\CalibTool\\calib_tool_demo.py</code> <pre><code>class NumericDelegate(QStyledItemDelegate):\n    \"\"\"\u9650\u5236\u8868\u683c\u8f93\u5165\u4e3a\u6570\u5b57\u6216\u5c0f\u6570\"\"\"\n    def createEditor(self, parent, option, index):\n        editor = super(NumericDelegate, self).createEditor(parent, option, index)\n        if isinstance(editor, QLineEdit):\n            reg_ex = QRegularExpression(r\"^[0-9]+(\\.[0-9]+)?$\")  # \u53ea\u5141\u8bb8\u6570\u5b57\u548c\u53ef\u9009\u7684\u5c0f\u6570\u70b9\n            validator = QRegularExpressionValidator(reg_ex, editor)\n            editor.setValidator(validator)\n        return editor\n</code></pre>"},{"location":"API/custom_widgets/","title":"\u81ea\u5b9a\u4e49\u63a7\u4ef6\u96c6 CustomWidgets API","text":""},{"location":"API/custom_widgets/#src.components.CustomWidgets.gallary","title":"<code>src.components.CustomWidgets.gallary</code>","text":"<p>\u81ea\u5b9a\u4e49\u63a7\u4ef6\u96c6</p> <p>Author: JIN &amp;&amp; jjyrealdeal@163.com Date: 2025-07-23 10:02:05 Copyright (c) 2025 by JIN, All Rights Reserved.</p>"},{"location":"API/custom_widgets/#src.components.CustomWidgets.gallary.GallaryForm","title":"<code>GallaryForm</code>","text":"<p>               Bases: <code>QWidget</code>, <code>Ui_FormGallery</code></p> Source code in <code>src\\components\\CustomWidgets\\gallary.py</code> <pre><code>class GallaryForm(QWidget, Ui_FormGallery): \n    def __init__(self):\n        super(GallaryForm, self).__init__()\n        self.setupUi(self)\n        self.init_ui()  \n        self.init_treelist()\n\n\n    def init_ui(self):\n        # \u5706\u5f62\u4eea\u8868\u76d8\u9608\u503c\u8bbe\u7f6e\n        circular_thresholds = [\n            (210, (0, 128, 255, 120)),     # \u84dd\u8272\uff1a\u6b63\u5e38\u533a\n            (270, (255, 165, 0, 150)),     # \u6a59\u8272\uff1a\u9884\u8b66\u533a\n            (300, (255, 0, 0, 120)),       # \u7ea2\u8272\uff1a\u544a\u8b66\u533a\n        ]\n        self.circular_dashboard = CircularDashboard(\n            min_value=0,\n            max_value=300,\n            initial_value=120,\n            unit=\"km/h\",\n            precision=0,\n            thresholds=circular_thresholds\n        )\n\n        # \u6247\u5f62\u4eea\u8868\u76d8\u9608\u503c\u8bbe\u7f6e\n        sector_thresholds = [\n            (10, (0, 128, 255, 120)),      # \u84dd\u8272\uff1a\u6b63\u5e38\u533a\n            (13, (255, 165, 0, 150)),      # \u6a59\u8272\uff1a\u9884\u8b66\u533a\n            (15, (255, 0, 0, 120)),        # \u7ea2\u8272\uff1a\u544a\u8b66\u533a\n        ]\n        self.sector_dashboard = SectorDashboard(\n            min_value=0,\n            max_value=15,\n            initial_value=8,\n            unit=\"V\",\n            precision=2,\n            thresholds=sector_thresholds\n        )\n\n        self.input_spinbox = InputSpinxboForm()\n        self.switch_slider = SwitchSliderForm()\n        self.switch_checkbox=SwitchPanel()\n\n\n        # \u6dfb\u52a0\u5230\u5806\u53e0\u7a97\u53e3\n        self.stackedWidget.insertWidget(0, self.circular_dashboard)  # \u7b2c0\u9875\n        self.stackedWidget.insertWidget(1, self.sector_dashboard)    # \u7b2c1\u9875\n        self.stackedWidget.insertWidget(2, self.input_spinbox)  \n        self.stackedWidget.insertWidget(3, self.switch_slider)\n        self.stackedWidget.insertWidget(4, self.switch_checkbox)\n\n        # \u9ed8\u8ba4\u663e\u793a\u7b2c\u4e00\u9875\n        self.stackedWidget.setCurrentIndex(0)  # \u663e\u793a\u7b2c0\u9875\n\n    def init_treelist(self):\n        data = {\n            \"\u4eea\u8868\u76d8\": {\n                \"\u5706\u5f62\u4eea\u8868\u76d8\": 0,\n                \"\u6247\u5f62\u4eea\u8868\u76d8\": 1\n            },\n            \"\u6279\u91cf\u63a7\u4ef6\u751f\u6210\": {\n                \"input_spinbox\": 2,\n                \"switch_slider\": 3,\n                \"switch_checkbox\":4\n            }\n        }\n\n        self.page_map = {}  # \u7528\u4e8e\u5b58\u50a8\u9875\u9762\u540d\u79f0\u548c\u7d22\u5f15\u7684\u6620\u5c04\n\n        # \u9690\u85cf treeWidget \u7684\u5217\u540d\uff08\u8868\u5934\uff09\n        self.treeWidget.header().setVisible(False)\n        self.treeWidget.setColumnCount(1)  # \u786e\u4fdd\u8bbe\u7f6e\u4e86\u4e00\u5217\n        self.treeWidget.setIndentation(20)  # \u53ef\u9009\uff1a\u8bbe\u7f6e\u7f29\u8fdb\n\n        for top_key, sub_items in data.items():\n            top_item = QTreeWidgetItem(self.treeWidget)\n            top_item.setText(0, top_key)\n\n            for sub_key, index in sub_items.items():\n                sub_item = QTreeWidgetItem(top_item)\n                sub_item.setText(0, sub_key)\n                self.page_map[sub_key] = index  # \u5efa\u7acb\u5b50\u9879\u4e0e\u9875\u9762\u7d22\u5f15\u7684\u6620\u5c04\n\n        self.treeWidget.expandAll()  # \u5c55\u5f00\u6240\u6709\u9879\n        self.treeWidget.itemClicked.connect(self.on_tree_item_clicked)\n\n\n    def on_tree_item_clicked(self, item, column):\n        \"\"\"\n        \u5f53 treeWidget \u7684\u67d0\u4e2a\u8282\u70b9\u88ab\u70b9\u51fb\u65f6\u89e6\u53d1\n        :param item: \u88ab\u70b9\u51fb\u7684 QTreeWidgetItem\n        :param column: \u88ab\u70b9\u51fb\u7684\u5217\u53f7\uff08\u4e00\u822c\u4e3a 0\uff09\n        \"\"\"\n        node_text = item.text(column)\n        index = self.page_map.get(node_text)\n        if index is not None:\n            self.stackedWidget.setCurrentIndex(index)\n        else:\n            pass\n</code></pre>"},{"location":"API/custom_widgets/#src.components.CustomWidgets.gallary.GallaryForm.on_tree_item_clicked","title":"<code>on_tree_item_clicked(item, column)</code>","text":"<p>\u5f53 treeWidget \u7684\u67d0\u4e2a\u8282\u70b9\u88ab\u70b9\u51fb\u65f6\u89e6\u53d1 :param item: \u88ab\u70b9\u51fb\u7684 QTreeWidgetItem :param column: \u88ab\u70b9\u51fb\u7684\u5217\u53f7\uff08\u4e00\u822c\u4e3a 0\uff09</p> Source code in <code>src\\components\\CustomWidgets\\gallary.py</code> <pre><code>def on_tree_item_clicked(self, item, column):\n    \"\"\"\n    \u5f53 treeWidget \u7684\u67d0\u4e2a\u8282\u70b9\u88ab\u70b9\u51fb\u65f6\u89e6\u53d1\n    :param item: \u88ab\u70b9\u51fb\u7684 QTreeWidgetItem\n    :param column: \u88ab\u70b9\u51fb\u7684\u5217\u53f7\uff08\u4e00\u822c\u4e3a 0\uff09\n    \"\"\"\n    node_text = item.text(column)\n    index = self.page_map.get(node_text)\n    if index is not None:\n        self.stackedWidget.setCurrentIndex(index)\n    else:\n        pass\n</code></pre>"},{"location":"API/data_replay/","title":"\u6570\u636e\u56de\u653e DataReplay API","text":""},{"location":"API/data_replay/#src.components.DataReplay.data_replay_demo","title":"<code>src.components.DataReplay.data_replay_demo</code>","text":""},{"location":"API/data_replay/#src.components.DataReplay.data_replay_demo--_1","title":"\u6570\u636e\u56de\u653e\u5de5\u5177","text":"<p>\u672c\u5de5\u5177\u4e13\u4e3a\u56de\u653e\u548c\u53ef\u89c6\u5316CSV\u6587\u4ef6\u4e2d\u7684\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u800c\u8bbe\u8ba1\u3002\u5b83\u63d0\u4f9b\u4e86\u4e00\u4e2a\u56fe\u5f62\u754c\u9762\uff0c\u7528\u4e8e\u52a0\u8f7d\u3001\u9009\u62e9\u548c\u7ed8\u5236\u591a\u4e2a\u6570\u636e\u5e8f\u5217\uff0c\u5e76\u652f\u6301\u4ea4\u4e92\u5f0f\u5bfc\u822a\u3002</p> <p>\u529f\u80fd\u7279\u6027\uff1a - \u540c\u65f6\u52a0\u8f7d\u548c\u663e\u793a\u591a\u4e2aCSV\u6587\u4ef6 - \u4ea4\u4e92\u5f0f\u6570\u636e\u53ef\u89c6\u5316\uff0c\u652f\u6301\u7f29\u653e\u548c\u5e73\u79fb\u529f\u80fd - \u901a\u8fc7\u9f20\u6807\u60ac\u505c\u5b9e\u65f6\u68c0\u67e5\u6570\u636e\u70b9 - \u4f7f\u7528\u6ed1\u52a8\u6761\u63a7\u4ef6\u8fdb\u884c\u57fa\u4e8e\u65f6\u95f4\u7684\u6570\u636e\u5bfc\u822a - \u652f\u6301\u591a\u6587\u4ef6\u548c\u591a\u5217\u6570\u636e\u9009\u62e9</p> <p>\u4f7f\u7528\u65b9\u6cd5\uff1a 1. \u53f3\u952e\u70b9\u51fb\u5de6\u4fa7\u5217\u8868\u4f7f\u7528\u6587\u4ef6\u6811\u4e2d\u7684\u4e0a\u4e0b\u6587\u83dc\u5355\u6dfb\u52a0CSV\u6587\u4ef6 2. \u5728\u6811\u5f62\u7ed3\u6784\u4e2d\u52fe\u9009\u60f3\u8981\u7ed8\u5236\u7684\u6570\u636e\u5217 3. \u70b9\u51fb\"\u56de\u653e\"\u6309\u94ae\u53ef\u89c6\u5316\u9009\u4e2d\u7684\u6570\u636e 4. \u4f7f\u7528\u6ed1\u52a8\u6761\u5728\u65f6\u95f4\u5e8f\u5217\u6570\u636e\u4e2d\u5bfc\u822a 5. \u5728\u56fe\u8868\u4e0a\u60ac\u505c\u9f20\u6807\u67e5\u770b\u8be6\u7ec6\u6570\u636e\u70b9\u4fe1\u606f</p> <p>CSV\u683c\u5f0f\u8981\u6c42\uff1a - \u7b2c\u4e00\u884c\uff1a\u5217\u540d - \u7b2c\u4e8c\u884c\uff1a\u5404\u5217\u7684\u5355\u4f4d - \u540e\u7eed\u884c\uff1a\u6570\u636e\u503c</p> <p>Author: JIN &amp;&amp; jjyrealdeal@163.com Date: 2025-7-16 08:43:14 Copyright (c) 2025 by JIN, All Rights Reserved.</p>"},{"location":"API/data_replay/#src.components.DataReplay.data_replay_demo.DataReplayForm","title":"<code>DataReplayForm</code>","text":"<p>               Bases: <code>QWidget</code>, <code>Ui_DataReplay_Form</code></p> <p>\u6570\u636e\u56de\u653e\u7a97\u4f53</p> Source code in <code>src\\components\\DataReplay\\data_replay_demo.py</code> <pre><code>class DataReplayForm(QWidget, Ui_DataReplay_Form):\n    \"\"\"\u6570\u636e\u56de\u653e\u7a97\u4f53\"\"\"\n    def __init__(self):\n        super(DataReplayForm, self).__init__()\n        self.setupUi(self)\n        self.data = pd.DataFrame() \n        self.all_data = {}\n        self.curves=[]\n        self.timestamps = np.array([])       # x\u8f74\u65f6\u95f4\u6233\n        self.window_width = 0                # \u5f53\u524d\u7a97\u53e3\u5bbd\u5ea6\n        self.scroll_position = 0             # \u5f53\u524d\u6eda\u52a8\u8d77\u59cb\u4f4d\u7f6e\n\n        self.initUI()\n        self.init_graph()\n        self.init_connections()\n\n\n    def initUI(self):\n        self.setWindowTitle('\u6570\u636e\u56de\u653e')\n        self.treeWidget_datafile.setSelectionMode(QAbstractItemView.ExtendedSelection)\n        self.treeWidget_datafile.setContextMenuPolicy(Qt.CustomContextMenu)\n        self.pushButton_plot.setIcon(QIcon(ICON_BACKWARD))\n        self.horizontalSlider.setAttribute(Qt.WA_Hover, True)\n        self.horizontalSlider.installEventFilter(self)\n\n\n    def init_graph(self):\n        \"\"\"\n        \u521d\u59cb\u5316\u7ed8\u56fe\u76f8\u5173\u7ec4\u4ef6\u548c\u754c\u9762\u5143\u7d20\u3002\n\n        \u8be5\u51fd\u6570\u5b8c\u6210\u4ee5\u4e0b\u4e3b\u8981\u5de5\u4f5c\uff1a\n        1. \u521b\u5efa\u5e76\u914d\u7f6e\u7ed8\u56fe\u63a7\u4ef6\uff08PlotWidget\uff09\u53ca\u76f8\u5173\u89c6\u56fe\u7ec4\u4ef6\uff1b\n        2. \u8bbe\u7f6e\u56fe\u8868\u6807\u9898\u3001\u5750\u6807\u8f74\u6807\u7b7e\u53ca\u7f51\u683c\u7ebf\uff1b\n        3. \u6dfb\u52a0\u56fe\u4f8b\u3001\u9f20\u6807\u4ea4\u4e92\u4e8b\u4ef6\u76d1\u542c\u5668\uff1b\n        4. \u521d\u59cb\u5316\u7528\u4e8e\u4ea4\u4e92\u63d0\u793a\u7684\u6587\u672c\u6846\u3001\u9ad8\u4eae\u6807\u8bb0\u70b9\u53ca\u5341\u5b57\u53c2\u8003\u7ebf\u7b49\u56fe\u5f62\u5143\u7d20\u3002\n\n        \"\"\"\n        self.view_box = LimitedViewBox()\n        self.plot_widget = pg.PlotWidget(viewBox=self.view_box)\n        self.plot_widget.setBackground('w')\n        self.plot_widget.showGrid(x=True, y=True)\n        self.plot_widget.addLegend()\n        self.gridLayout_plot.addWidget(self.plot_widget)\n\n        # \u8bbe\u7f6e\u6807\u9898\u548c\u5750\u6807\u8f74\u6807\u7b7e\n        self.plot_widget.getPlotItem().setTitle(\" \", color='k', size='15pt')\n        self.plot_widget.getPlotItem().setLabel('left', \" \", units='', **{'color': 'black', 'font-size': '12pt'})\n        self.plot_widget.getPlotItem().setLabel('bottom', \"\u65f6\u95f4\", units='ms', **{'color': 'black', 'font-size': '12pt'})\n\n        # \u7ed1\u5b9a\u9f20\u6807\u79fb\u52a8\u4e8b\u4ef6\uff08\u76d1\u542c\u6574\u4e2aplot\u533a\u57df\uff09\n        self.proxy = pg.SignalProxy(self.plot_widget.scene().sigMouseMoved, rateLimit=60, slot=self.onMouseMoved)\n        self.highlighted_curve = None\n        self.text_item = pg.TextItem(anchor=(0,1), border='w', fill=(0, 0, 0, 100))\n        self.text_item.setZValue(11)\n        self.plot_widget.addItem(self.text_item)\n        self.text_item.hide()\n\n        # \u5b9e\u5fc3\u5c0f\u5706\u70b9\n        self.hover_marker = pg.ScatterPlotItem(\n            size=8,\n            pen=pg.mkPen('k'),\n            brush=pg.mkBrush('y'),\n            symbol='o'\n        )\n        self.hover_marker.setZValue(10)\n        self.plot_widget.addItem(self.hover_marker)\n\n        # \u865a\u7ebf\u5341\u5b57\u7ebf\n        dash_pen = pg.mkPen(color='gray', width=1, style=Qt.DashLine)\n        self.v_line = pg.InfiniteLine(angle=90, movable=False, pen=dash_pen)\n        self.h_line = pg.InfiniteLine(angle=0, movable=False, pen=dash_pen)\n        self.v_line.setZValue(9)\n        self.h_line.setZValue(9)\n        self.plot_widget.addItem(self.v_line, ignoreBounds=True)\n        self.plot_widget.addItem(self.h_line, ignoreBounds=True)\n\n        # \u60ac\u6d6e\u6570\u636e\u6587\u672c\u6846\n        self.text_item = pg.TextItem(anchor=(0,1), border='w', fill=(0, 0, 0, 100))\n        self.text_item.setZValue(11)\n        self.plot_widget.addItem(self.text_item)\n        self.text_item.hide()\n\n\n    def init_connections(self):\n        \"\"\"\u521d\u59cb\u5316\u4fe1\u53f7\u69fd\u8fde\u63a5\"\"\"\n        self.horizontalSlider.valueChanged.connect(self.scroll_plot)\n        self.pushButton_plot.clicked.connect(self.draw_plot)\n        self.treeWidget_datafile.customContextMenuRequested.connect(self.TreeContextMenuEvent)\n\n    def TreeContextMenuEvent(self, pos):\n        \"\"\"\u53f3\u952e\u83dc\u5355\u4e8b\u4ef6\"\"\"\n        self.item = self.treeWidget_datafile.itemAt(pos)\n        TreeMenu = QMenu(parent=self.treeWidget_datafile)\n\n        # \u6587\u4ef6\u64cd\u4f5c\u7c7b \n        OpenFile = QAction('\u6dfb\u52a0\u6587\u4ef6', self)\n        OpenFile.setIcon(QIcon(ICON_PLUS))\n        RemoveFile = QAction('\u79fb\u9664\u6587\u4ef6', self)\n        RemoveFile.setIcon(QIcon(ICON_MINUS))\n        TreeMenu.addAction(OpenFile)\n        TreeMenu.addAction(RemoveFile)\n        TreeMenu.addSeparator()  # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n        # \u9009\u62e9\u64cd\u4f5c\u7c7b\n        CheckedAll = QAction('\u5168\u9009', self)\n        CheckedAll.setIcon(QIcon(ICON_ALLCHECK))\n        UncheckedAll = QAction('\u53d6\u6d88\u5168\u9009', self)\n        UncheckedAll.setIcon(QIcon(ICON_ALLUNCHECK))\n        TreeMenu.addAction(CheckedAll)\n        TreeMenu.addAction(UncheckedAll)\n        TreeMenu.addSeparator()  # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n        # \u5176\u4ed6\u64cd\u4f5c\u7c7b\n        ClearAll = QAction('\u6e05\u7a7a\u5217\u8868', self)\n        ClearAll.setIcon(QIcon(ICON_BROOM))\n        TreeMenu.addAction(ClearAll)\n\n        # \u7ed1\u5b9a\u4fe1\u53f7\n        OpenFile.triggered.connect(self.load_csv)\n        RemoveFile.triggered.connect(self.remove_file)\n        CheckedAll.triggered.connect(self.SelectedAll)\n        UncheckedAll.triggered.connect(self.SelectedClear)\n        ClearAll.triggered.connect(self.clear_all_files)\n\n        # \u663e\u793a\u83dc\u5355\n        TreeMenu.exec_(self.treeWidget_datafile.mapToGlobal(pos))\n\n\n    def SelectedAll(self):\n        \"\"\"\u5168\u9009\"\"\"\n        iterator = QTreeWidgetItemIterator(self.treeWidget_datafile)\n        while iterator.value():\n            item = iterator.value()\n            item.setCheckState(0, Qt.Checked)\n            iterator += 1\n\n\n    def SelectedClear(self):\n        \"\"\"\u53d6\u6d88\u5168\u9009\"\"\"\n        iterator = QTreeWidgetItemIterator(self.treeWidget_datafile)\n        while iterator.value():\n            item = iterator.value()\n            item.setCheckState(0, Qt.Unchecked)\n            iterator += 1\n\n\n    def clear_all_files(self):\n        \"\"\"\u6e05\u7a7a\u6570\u636e\u5217\u8868\u5e76\u6e05\u7a7a\u56fe\u8868\"\"\"\n        self.treeWidget_datafile.clear()\n        self.plot_widget.clear()\n\n        # \u6e05\u7406\u5185\u90e8\u53d8\u91cf\n        self.all_data = {}\n        self.curves = []\n        self.selected_columns = []\n        self.data = pd.DataFrame() \n\n\n    def remove_file(self):\n        \"\"\"\u79fb\u9664\u6240\u9009\u6587\u4ef6\u5e76\u4e14\u5237\u65b0\u6587\u4ef6\u5217\u8868\u4ee5\u53ca\u56fe\u8868\"\"\"\n        selected_items = self.treeWidget_datafile.selectedItems()\n\n        if not selected_items:\n            return  # \u6ca1\u6709\u9009\u4e2d\u9879\uff0c\u76f4\u63a5\u8fd4\u56de\n\n        for item in selected_items:\n            # \u786e\u4fdd\u662f\u9876\u5c42\u8282\u70b9\uff08\u5373\u6587\u4ef6\uff09\n            if item.parent() is None:\n                filename = item.text(0)\n                del self.all_data[filename]  # \u4ece\u6570\u636e\u4e2d\u5220\u9664\n                index = self.treeWidget_datafile.indexOfTopLevelItem(item)\n                self.treeWidget_datafile.takeTopLevelItem(index)  # \u4ece\u6811\u4e2d\u5220\u9664\n\n        # \u5237\u65b0\u5217\u8ba1\u6570\u5668\u548c\u6620\u5c04\n        self.col_counter = {}\n        self.column_mapping = {}\n\n        for filename, df in self.all_data.items():\n            for col in df.columns:\n                self.col_counter[col] = self.col_counter.get(col, 0) + 1\n                self.column_mapping[(filename, col)] = col\n\n        # \u91cd\u65b0\u7ed8\u56fe\n        self.draw_plot()\n\n\n\n    def load_csv(self):\n        \"\"\"\n        \u52a0\u8f7dCSV\u6587\u4ef6\u5230\u7a0b\u5e8f\u4e2d\uff0c\u652f\u6301\u591a\u4e2a\u6587\u4ef6\u7684\u6279\u91cf\u52a0\u8f7d\u3002\n        CSV\u683c\u5f0f\u8981\u6c42\uff1a\u9996\u884c\u4e3a\u5217\u540d\uff0c\u7b2c\u4e8c\u884c\u4e3a\u5355\u4f4d\uff0c\u540e\u7eed\u4e3a\u6570\u636e\u884c\u3002\n\n        \u8fd4\u56de\u503c:\n            \u65e0\u8fd4\u56de\u503c\u3002\u52a0\u8f7d\u7684\u6570\u636e\u5b58\u50a8\u5728 self.all_data \u4e2d\uff0c\u5e76\u66f4\u65b0\u754c\u9762\u7ec4\u4ef6\u3002\n\n        \u529f\u80fd\u8bf4\u660e\uff1a\n            - \u4f7f\u7528\u6587\u4ef6\u5bf9\u8bdd\u6846\u9009\u62e9\u4e00\u4e2a\u6216\u591a\u4e2aCSV\u6587\u4ef6\uff1b\n            - \u6bcf\u4e2a\u6587\u4ef6\u89e3\u6790\u4e3a\u5e26\u591a\u7ea7\u5217\u540d\uff08\u540d\u79f0+\u5355\u4f4d\uff09\u7684DataFrame\uff1b\n            - \u65f6\u95f4\u6233\u5217\u4f5c\u4e3a\u7d22\u5f15\u5904\u7406\uff1b\n            - \u907f\u514d\u91cd\u590d\u52a0\u8f7d\u540c\u4e00\u6587\u4ef6\uff1b\n            - \u5728TreeWidget\u4e2d\u5c55\u793a\u6587\u4ef6\u7ed3\u6784\u548c\u5217\u4fe1\u606f\uff1b\n            - \u66f4\u65b0\u6ed1\u52a8\u6761\u7684\u6700\u5927\u503c\u4ee5\u5339\u914d\u6700\u65b0\u52a0\u8f7d\u6587\u4ef6\u7684\u6570\u636e\u957f\u5ea6\u3002\n        \"\"\"\n        # \u6253\u5f00\u6587\u4ef6\u9009\u62e9\u5bf9\u8bdd\u6846\uff0c\u5141\u8bb8\u9009\u62e9\u591a\u4e2aCSV\u6587\u4ef6\n        paths, _ = QFileDialog.getOpenFileNames(self, \"\u9009\u62e9CSV\u6587\u4ef6\", \"\", \"*.csv\")\n        if not paths:\n            return\n\n        # \u521d\u59cb\u5316\u6570\u636e\u5b58\u50a8\u7ed3\u6784\n        if not hasattr(self, \"all_data\"):\n            self.all_data = {}\n        self.col_counter = {}  # \u7edf\u8ba1\u6240\u6709\u5217\u540d\u51fa\u73b0\u6b21\u6570\n        self.column_mapping = {}  # (filename, name) -&gt; (name, unit)\n\n        # \u904d\u5386\u9009\u4e2d\u7684\u6bcf\u4e2a\u6587\u4ef6\u8def\u5f84\u8fdb\u884c\u5904\u7406\n        for path in paths:\n            filename = os.path.basename(path)\n\n            # \u907f\u514d\u91cd\u590d\u52a0\u8f7d\u76f8\u540c\u6587\u4ef6\u540d\u7684\u6587\u4ef6\n            if filename in self.all_data:\n                QMessageBox.information(self, \"\u63d0\u793a\", f\"{filename} \u5df2\u88ab\u52a0\u8f7d\uff0c\u8bf7\u52ff\u91cd\u590d\u64cd\u4f5c\")\n                continue\n\n            # \u5c1d\u8bd5\u8bfb\u53d6CSV\u6587\u4ef6\uff0c\u524d\u4e24\u884c\u4e3a\u6807\u9898\u884c\uff08\u5217\u540d+\u5355\u4f4d\uff09\n            try:\n                df = pd.read_csv(path, header=[0, 1])  # \u4e24\u884c\u6807\u9898\uff08\u5217\u540d + \u5355\u4f4d\uff09\n            except Exception as e:\n                QMessageBox.warning(self, \"\u9519\u8bef\", f\"\u8bfb\u53d6\u6587\u4ef6\u5931\u8d25\uff1a{filename}\\n{str(e)}\")\n                continue\n\n            # \u8bbe\u7f6e\u65f6\u95f4\u6233\u5217\u4e3a\u7d22\u5f15\u5e76\u5220\u9664\u539f\u65f6\u95f4\u5217\n            df.index = pd.to_datetime(df[df.columns[0]])  # \u5c06\u65f6\u95f4\u6233\u5217\u8bbe\u4e3a index\n            df.drop(columns=[df.columns[0]], inplace=True)  # \u5220\u9664\u539f\u65f6\u95f4\u5217\n\n            # \u5b58\u50a8\u89e3\u6790\u540e\u7684DataFrame\n            self.all_data[filename] = df\n\n            # \u7edf\u8ba1\u5217\u540d\u51fa\u73b0\u6b21\u6570\u5e76\u8bb0\u5f55\u5b8c\u6574\u6620\u5c04\u5173\u7cfb\n            for col in df.columns:\n                name, unit = col\n                self.col_counter[name] = self.col_counter.get(name, 0) + 1\n                self.column_mapping[(filename, name)] = (name, unit)\n\n        # \u66f4\u65b0TreeWidget\u663e\u793a\u5185\u5bb9\uff1a\u5c55\u793a\u6587\u4ef6\u53ca\u5176\u5217\u4fe1\u606f\uff08\u4ec5\u663e\u793a\u5217\u540d\uff09\n        for filename, df in self.all_data.items():\n            exists = False\n            for i in range(self.treeWidget_datafile.topLevelItemCount()):\n                item = self.treeWidget_datafile.topLevelItem(i)\n                if item.text(0) == filename:\n                    exists = True\n                    break\n            if not exists:\n                root = QTreeWidgetItem([filename])\n                root.setToolTip(0, path)\n                root.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable | Qt.ItemIsUserCheckable | Qt.ItemIsAutoTristate)\n                root.setCheckState(0, Qt.Unchecked)\n                for name, unit in df.columns:\n                    item = QTreeWidgetItem([name])  # \u663e\u793a\u5217\u540d\n                    item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable | Qt.ItemIsUserCheckable | Qt.ItemIsAutoTristate)\n                    item.setCheckState(0, Qt.Unchecked)\n                    item.setToolTip(0, f\"\u5355\u4f4d: {unit}\")\n                    root.addChild(item)\n                self.treeWidget_datafile.addTopLevelItem(root)\n                root.setExpanded(True)\n\n        # \u5982\u679c\u6210\u529f\u52a0\u8f7d\u4e86\u6570\u636e\uff0c\u5219\u66f4\u65b0\u6ed1\u52a8\u6761\u6700\u5927\u503c\u4e3a\u6700\u540e\u4e00\u4e2a\u6587\u4ef6\u7684\u884c\u6570\n        if self.all_data:\n            last_df = list(self.all_data.values())[-1]\n            self.horizontalSlider.setMaximum(len(last_df))\n\n\n\n    def draw_plot(self):\n        \"\"\"\n        \u6839\u636e\u5f53\u524d\u9009\u62e9\u7684\u6587\u4ef6\u548c\u5217\uff0c\u7ed8\u5236\u5bf9\u5e94\u7684\u56fe\u8868\u3002\n\n        \u8be5\u65b9\u6cd5\u4f1a\uff1a\n        - \u6e05\u9664\u5f53\u524d\u7ed8\u56fe\u533a\u57df\u5e76\u4fdd\u7559\u5fc5\u8981\u7684\u4ea4\u4e92\u5143\u7d20\uff1b\n        - \u904d\u5386\u6240\u6709\u6587\u4ef6\u53ca\u5176\u9009\u4e2d\u7684\u5217\uff0c\u6784\u5efa\u7ed8\u56fe\u6570\u636e\uff1b\n        - \u7ed8\u5236\u6bcf\u6761\u66f2\u7ebf\uff0c\u5e76\u8bbe\u7f6e\u989c\u8272\u548c\u56fe\u4f8b\uff1b\n        - \u8bbe\u7f6e\u5750\u6807\u8f74\u8303\u56f4\u548c\u6ed1\u52a8\u6761\u53c2\u6570\uff0c\u4ee5\u652f\u6301\u6570\u636e\u6d4f\u89c8\u3002\n\n        \"\"\"\n        # \u6e05\u9664\u7ed8\u56fe\u4f46\u4fdd\u7559\u4ea4\u4e92\u5143\u7d20\n        self.plot_widget.clear()\n        self.plot_widget.addItem(self.text_item)\n        self.plot_widget.addItem(self.hover_marker)\n        self.plot_widget.addItem(self.v_line, ignoreBounds=True)\n        self.plot_widget.addItem(self.h_line, ignoreBounds=True)\n        self.text_item.hide()\n        self.highlighted_curve = None\n        self.curves = []  # \u4fdd\u5b58\u6240\u6709PlotDataItem\n        combined_df = pd.DataFrame()\n        self.selected_columns = []\n\n        # \u904d\u5386\u6240\u6709\u6587\u4ef6\n        for i in range(self.treeWidget_datafile.topLevelItemCount()):\n            file_item = self.treeWidget_datafile.topLevelItem(i)\n            filename = file_item.text(0)\n            df = self.all_data.get(filename)\n            if df is None:\n                continue\n\n            # \u904d\u5386\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u5217\n            for j in range(file_item.childCount()):\n                col_item = file_item.child(j)\n                if col_item.checkState(0) == Qt.Checked:\n                    col = col_item.text(0)  # \u539f\u59cb\u5217\u540d\n                    unit= col_item.toolTip(0).split(\"\u5355\u4f4d: \")[1]\n                    if self.col_counter[col] &gt; 1:\n                        legend_name = f\"{col} {unit} ({filename})\"\n                    else:\n                        legend_name = f'{col} {unit}'\n\n                    # \u6dfb\u52a0\u5230\u7ed8\u56fe\u6570\u636e\n                    combined_df[legend_name] = df[col]\n                    self.selected_columns.append((legend_name, legend_name))\n\n        if combined_df.empty:\n            return\n\n        self.data = combined_df\n        self.timestamps = np.arange(len(combined_df))  \n        self.window_width = max(100, int(len(self.timestamps) * 0.1))\n        self.scroll_position = 0  # \u521d\u59cb\u8d77\u70b9\n\n        # \u904d\u5386\u6240\u6709\u9009\u4e2d\u7684\u5217\n        for i, (colname, legend_name) in enumerate(self.selected_columns):\n            y = self.data[legend_name].to_numpy()\n            color = QColor.fromHsv((i * 30) % 255, 200, 230)\n            curve = self.plot_widget.plot(self.timestamps, y, pen=pg.mkPen(color=color, width=1), name=legend_name)\n            curve.default_pen = pg.mkPen(color=color, width=1)\n            self.curves.append((curve, self.timestamps, y))\n\n        x_min = self.scroll_position\n        x_max = self.scroll_position + self.window_width\n        y_min, y_max = combined_df.min().min(), combined_df.max().max()\n\n        y_range = y_max - y_min\n        # \u6dfb\u52a0 5% \u7684\u4e0a\u4e0b\u7559\u767d\n        padding = y_range * 0.05\n        y_min -= padding\n        y_max += padding\n\n        vb = self.view_box\n        vb.setLimits(\n            xMin=0,\n            xMax=len(self.timestamps),\n            yMin=y_min,\n            yMax=y_max,\n            minXRange=10,\n            maxXRange=len(self.timestamps),\n            minYRange=y_range * 0.01,\n            maxYRange=y_range * 1.1\n        )\n        vb.setXRange(x_min, x_max, padding=0)\n        vb.setYRange(y_min, y_max, padding=0)\n\n        # \u8bbe\u7f6e\u6ed1\u52a8\u6761\u6700\u5927\u503c\u4e3a 100\uff08\u767e\u5206\u6bd4\u63a7\u5236\uff09\n        self.horizontalSlider.setMaximum(100)\n        self.horizontalSlider.setValue(0)\n\n\n    def scroll_plot(self, value):\n        \"\"\"\n        \u6839\u636e\u6ed1\u52a8\u6761\u4f4d\u7f6e\u6eda\u52a8\u56fe\u8868\u663e\u793a\u533a\u57df\n\n        \u53c2\u6570:\n            value (int): \u6ed1\u52a8\u6761\u7684\u5f53\u524d\u4f4d\u7f6e\u503c\uff0c\u8303\u56f4\u901a\u5e38\u4e3a0-100\n\n        \u8fd4\u56de\u503c:\n            None: \u65e0\u8fd4\u56de\u503c\uff0c\u76f4\u63a5\u4fee\u6539\u56fe\u8868\u663e\u793a\u533a\u57df\n        \"\"\"\n        # \u5982\u679c\u6ca1\u6709\u65f6\u95f4\u6233\u6216\u8005\u65f6\u95f4\u6233\u957f\u5ea6\u4e3a0\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n        if not hasattr(self, 'timestamps') or len(self.timestamps) == 0:\n            return\n\n        # \u83b7\u53d6\u65f6\u95f4\u6233\u7684\u603b\u6570\n        total_points = len(self.timestamps)\n        # \u5982\u679c\u65f6\u95f4\u6233\u603b\u6570\u5c0f\u4e8e\u7b49\u4e8e\u7a97\u53e3\u5bbd\u5ea6\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n        if total_points &lt;= self.window_width:\n            return\n\n        # \u8ba1\u7b97\u8d77\u59cb\u7d22\u5f15\u4f4d\u7f6e\n        max_start = total_points - self.window_width\n        # \u6839\u636e\u6ed1\u52a8\u6761\u4f4d\u7f6e\u8ba1\u7b97\u6eda\u52a8\u4f4d\u7f6e\n        self.scroll_position = int((value / 100.0) * max_start)\n        # \u786e\u4fdd\u6eda\u52a8\u4f4d\u7f6e\u5728\u6709\u6548\u8303\u56f4\u5185\n        self.scroll_position = max(0, min(self.scroll_position, max_start))\n\n        # \u83b7\u53d6\u56fe\u8868\u7684\u89c6\u56fe\u6846\n        vb = self.plot_widget.getViewBox()\n        # \u8bbe\u7f6eX\u8f74\u8303\u56f4\uff0c\u4ece\u6eda\u52a8\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5230\u6eda\u52a8\u4f4d\u7f6e\u52a0\u4e0a\u7a97\u53e3\u5bbd\u5ea6\u7ed3\u675f\uff0c\u4e0d\u586b\u5145\n        vb.setXRange(self.scroll_position,\n                     self.scroll_position + self.window_width,\n                     padding=0)\n\n\n    def eventFilter(self, source, event):\n        \"\"\"\n        \u81ea\u5b9a\u4e49\u4e8b\u4ef6\u8fc7\u6ee4\u5668\uff0c\u7528\u4e8e\u5904\u7406\u6c34\u5e73\u6ed1\u52a8\u6761\u7684\u60ac\u505c\u4e8b\u4ef6\u5e76\u663e\u793a\u5bf9\u5e94\u6570\u636e\u7684\u65f6\u95f4\u6233\u63d0\u793a\n\n        \u53c2\u6570:\n            source: \u4e8b\u4ef6\u6765\u6e90\u5bf9\u8c61\n            event: \u4e8b\u4ef6\u5bf9\u8c61\n\n        \u8fd4\u56de\u503c:\n            bool: \u8fd4\u56de\u7236\u7c7b\u4e8b\u4ef6\u8fc7\u6ee4\u5668\u7684\u5904\u7406\u7ed3\u679c\n        \"\"\"\n        # \u5982\u679c\u4e8b\u4ef6\u6e90\u662f\u6c34\u5e73\u6ed1\u52a8\u6761\uff0c\u5e76\u4e14\u4e8b\u4ef6\u7c7b\u578b\u662f\u60ac\u505c\u79fb\u52a8\n        if source == self.horizontalSlider and event.type() == QEvent.HoverMove:\n            # \u83b7\u53d6\u9f20\u6807\u4f4d\u7f6e\n            pos = event.pos()\n            # \u8ba1\u7b97\u6ed1\u52a8\u6761\u7684\u503c\n            val = self.horizontalSlider.minimum() + (\n                (self.horizontalSlider.maximum() - self.horizontalSlider.minimum())\n                * pos.x()\n                / self.horizontalSlider.width()\n            )\n            # \u8ba1\u7b97\u7d22\u5f15\n            index = int(len(self.data) * (val / 100.0))\n            # \u5982\u679c\u7d22\u5f15\u5728\u6570\u636e\u8303\u56f4\u5185\n            if 0 &lt;= index &lt; len(self.data):\n                try:\n                    # \u83b7\u53d6\u65f6\u95f4\u6233\n                    timestamp = self.data.index[index]\n                    # \u5982\u679c\u65f6\u95f4\u6233\u662fpd.Timestamp\u7c7b\u578b\n                    if isinstance(timestamp, pd.Timestamp):\n                        # \u683c\u5f0f\u5316\u65f6\u95f4\u6233\n                        tip = timestamp.strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]\n                    else:\n                        # \u5426\u5219\u76f4\u63a5\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n                        tip = str(timestamp)\n                    # \u663e\u793a\u63d0\u793a\u4fe1\u606f\n                    QToolTip.showText(self.horizontalSlider.mapToGlobal(pos), tip)\n                except Exception:\n                    pass\n        # \u8fd4\u56de\u7236\u7c7b\u7684\u4e8b\u4ef6\u8fc7\u6ee4\u5668\n        return super().eventFilter(source, event)\n\n\n\n\n    def onMouseMoved(self, evt):\n        \"\"\"\n        \u9f20\u6807\u79fb\u52a8\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\n\n        \u5f53\u9f20\u6807\u5728\u7ed8\u56fe\u533a\u57df\u79fb\u52a8\u65f6\uff0c\u672c\u51fd\u6570\u88ab\u8c03\u7528\uff0c\u4ee5\u5b9e\u73b0\u52a8\u6001\u663e\u793a\u6570\u636e\u6d6e\u7a97\u3001\u9ad8\u4eae\u66f2\u7ebf\u3001\u7ed8\u5236\u5341\u5b57\u7ebf\u7b49\u529f\u80fd\n\n        \u53c2\u6570:\n        evt: \u4e8b\u4ef6\u5bf9\u8c61\uff0c\u5305\u542b\u9f20\u6807\u4f4d\u7f6e\u7b49\u4fe1\u606f\n        \"\"\"\n        # \u83b7\u53d6\u9f20\u6807\u4f4d\u7f6e\n        pos = evt[0]\n        # \u83b7\u53d6\u89c6\u53e3\u77e9\u5f62\n        view_rect = self.plot_widget.viewport().rect()\n        # \u83b7\u53d6\u5168\u5c40\u5750\u6807\u7cfb\u4e0b\u7684\u9f20\u6807\u4f4d\u7f6e\n        global_pos = self.plot_widget.mapFromGlobal(QCursor.pos())\n\n        # \u5982\u679c\u9f20\u6807\u4f4d\u7f6e\u4e0d\u5728\u89c6\u53e3\u77e9\u5f62\u5185\uff0c\u5219\u9690\u85cf\u76f8\u5173\u663e\u793a\u5143\u7d20\u5e76\u8fd4\u56de\n        if not view_rect.contains(global_pos):\n            self.text_item.hide()\n            self.hover_marker.clear()\n            self.v_line.hide()\n            self.h_line.hide()\n            self.restore_curve(self.highlighted_curve)\n            self.highlighted_curve = None\n            return\n\n        # \u5c06\u9f20\u6807\u4f4d\u7f6e\u6620\u5c04\u5230\u89c6\u56fe\u5750\u6807\n        view_pos = self.plot_widget.plotItem.vb.mapSceneToView(pos)\n        # \u83b7\u53d6\u9f20\u6807\u5728\u50cf\u7d20\u5750\u6807\u7cfb\u4e0b\u7684\u4f4d\u7f6e\n        mouse_pixel_pos = pos.toPoint()\n\n        # \u8bbe\u7f6e\u50cf\u7d20\u9608\u503c\n        pixel_threshold = 20\n\n        # \u521d\u59cb\u5316\u6700\u8fd1\u7684\u66f2\u7ebf\u53ca\u76f8\u5173\u4fe1\u606f\n        closest_curve = None\n        closest_idx = None\n        closest_dist = float('inf')\n        closest_x_data = None\n        closest_y_data = None\n\n        # \u904d\u5386\u6240\u6709\u66f2\u7ebf\uff0c\u5bfb\u627e\u6700\u8fd1\u7684\u70b9\n        for curve, x_data, y_data in self.curves:\n            if len(x_data) == 0:\n                continue\n\n            for i in range(len(x_data)):\n                pt_data = QPointF(x_data[i], y_data[i])\n                pt_pixel = self.plot_widget.plotItem.vb.mapViewToScene(pt_data).toPoint()\n                dist = (pt_pixel - mouse_pixel_pos).manhattanLength()\n\n                if dist &lt; pixel_threshold and dist &lt; closest_dist:\n                    closest_dist = dist\n                    closest_curve = curve\n                    closest_idx = i\n                    closest_x_data = x_data\n                    closest_y_data = y_data\n\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\u6700\u8fd1\u7684\u66f2\u7ebf\uff0c\u5219\u9690\u85cf\u76f8\u5173\u663e\u793a\u5143\u7d20\u5e76\u8fd4\u56de\n        if closest_curve is None:\n            self.text_item.hide()\n            self.hover_marker.clear()\n            self.v_line.hide()\n            self.h_line.hide()\n            self.restore_curve(self.highlighted_curve)\n            self.highlighted_curve = None\n            return\n\n        # \u6062\u590d\u5176\u4ed6\u66f2\u7ebf\u539f\u8272\n        if self.highlighted_curve is not None and self.highlighted_curve != closest_curve:\n            self.highlighted_curve.setPen(self.highlighted_curve.default_pen)\n\n        # \u9ad8\u4eae\u5f53\u524d\u66f2\u7ebf\n        self.highlight_curve(closest_curve)\n        self.highlighted_curve = closest_curve\n\n        # \u83b7\u53d6\u547d\u4e2d\u70b9\u5750\u6807\n        x_val = closest_x_data[closest_idx]\n        y_val = closest_y_data[closest_idx]\n\n        # \u663e\u793a\u5c0f\u5706\u70b9\n        self.hover_marker.setData([x_val], [y_val])\n\n        # \u663e\u793a\u5341\u5b57\u7ebf\n        self.v_line.setPos(x_val)\n        self.h_line.setPos(y_val)\n        self.v_line.show()\n        self.h_line.show()\n\n        # \u663e\u793a\u6570\u636e\u6d6e\u7a97\n        text = f'{closest_curve.name()}\\nX: {int(x_val)}\\nY: {y_val:.3f}\\nMIN: {min(closest_y_data):.3f}\\nMAX: {max(closest_y_data):.3f}\\nAVG: {np.mean(closest_y_data):.3f}\\n'\n        self.text_item.setText(text)\n        self.text_item.setPos(view_pos.x(), view_pos.y())\n        self.text_item.show()\n\n\n    def highlight_curve(self, curve):\n        \"\"\"\u5c06\u66f2\u7ebf\u52a0\u7c97\u9ad8\u4eae\u663e\u793a\"\"\"\n        if curve:\n            curve.setPen(pg.mkPen(color=curve.default_pen.color(), width=2))\n\n\n    def restore_curve(self, curve):\n        \"\"\"\u6062\u590d\u66f2\u7ebf\u539f\u59cb\u6837\u5f0f\"\"\"\n        if curve:\n            curve.setPen(curve.default_pen)\n</code></pre>"},{"location":"API/data_replay/#src.components.DataReplay.data_replay_demo.DataReplayForm.SelectedAll","title":"<code>SelectedAll()</code>","text":"<p>\u5168\u9009</p> Source code in <code>src\\components\\DataReplay\\data_replay_demo.py</code> <pre><code>def SelectedAll(self):\n    \"\"\"\u5168\u9009\"\"\"\n    iterator = QTreeWidgetItemIterator(self.treeWidget_datafile)\n    while iterator.value():\n        item = iterator.value()\n        item.setCheckState(0, Qt.Checked)\n        iterator += 1\n</code></pre>"},{"location":"API/data_replay/#src.components.DataReplay.data_replay_demo.DataReplayForm.SelectedClear","title":"<code>SelectedClear()</code>","text":"<p>\u53d6\u6d88\u5168\u9009</p> Source code in <code>src\\components\\DataReplay\\data_replay_demo.py</code> <pre><code>def SelectedClear(self):\n    \"\"\"\u53d6\u6d88\u5168\u9009\"\"\"\n    iterator = QTreeWidgetItemIterator(self.treeWidget_datafile)\n    while iterator.value():\n        item = iterator.value()\n        item.setCheckState(0, Qt.Unchecked)\n        iterator += 1\n</code></pre>"},{"location":"API/data_replay/#src.components.DataReplay.data_replay_demo.DataReplayForm.TreeContextMenuEvent","title":"<code>TreeContextMenuEvent(pos)</code>","text":"<p>\u53f3\u952e\u83dc\u5355\u4e8b\u4ef6</p> Source code in <code>src\\components\\DataReplay\\data_replay_demo.py</code> <pre><code>def TreeContextMenuEvent(self, pos):\n    \"\"\"\u53f3\u952e\u83dc\u5355\u4e8b\u4ef6\"\"\"\n    self.item = self.treeWidget_datafile.itemAt(pos)\n    TreeMenu = QMenu(parent=self.treeWidget_datafile)\n\n    # \u6587\u4ef6\u64cd\u4f5c\u7c7b \n    OpenFile = QAction('\u6dfb\u52a0\u6587\u4ef6', self)\n    OpenFile.setIcon(QIcon(ICON_PLUS))\n    RemoveFile = QAction('\u79fb\u9664\u6587\u4ef6', self)\n    RemoveFile.setIcon(QIcon(ICON_MINUS))\n    TreeMenu.addAction(OpenFile)\n    TreeMenu.addAction(RemoveFile)\n    TreeMenu.addSeparator()  # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n    # \u9009\u62e9\u64cd\u4f5c\u7c7b\n    CheckedAll = QAction('\u5168\u9009', self)\n    CheckedAll.setIcon(QIcon(ICON_ALLCHECK))\n    UncheckedAll = QAction('\u53d6\u6d88\u5168\u9009', self)\n    UncheckedAll.setIcon(QIcon(ICON_ALLUNCHECK))\n    TreeMenu.addAction(CheckedAll)\n    TreeMenu.addAction(UncheckedAll)\n    TreeMenu.addSeparator()  # \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n    # \u5176\u4ed6\u64cd\u4f5c\u7c7b\n    ClearAll = QAction('\u6e05\u7a7a\u5217\u8868', self)\n    ClearAll.setIcon(QIcon(ICON_BROOM))\n    TreeMenu.addAction(ClearAll)\n\n    # \u7ed1\u5b9a\u4fe1\u53f7\n    OpenFile.triggered.connect(self.load_csv)\n    RemoveFile.triggered.connect(self.remove_file)\n    CheckedAll.triggered.connect(self.SelectedAll)\n    UncheckedAll.triggered.connect(self.SelectedClear)\n    ClearAll.triggered.connect(self.clear_all_files)\n\n    # \u663e\u793a\u83dc\u5355\n    TreeMenu.exec_(self.treeWidget_datafile.mapToGlobal(pos))\n</code></pre>"},{"location":"API/data_replay/#src.components.DataReplay.data_replay_demo.DataReplayForm.clear_all_files","title":"<code>clear_all_files()</code>","text":"<p>\u6e05\u7a7a\u6570\u636e\u5217\u8868\u5e76\u6e05\u7a7a\u56fe\u8868</p> Source code in <code>src\\components\\DataReplay\\data_replay_demo.py</code> <pre><code>def clear_all_files(self):\n    \"\"\"\u6e05\u7a7a\u6570\u636e\u5217\u8868\u5e76\u6e05\u7a7a\u56fe\u8868\"\"\"\n    self.treeWidget_datafile.clear()\n    self.plot_widget.clear()\n\n    # \u6e05\u7406\u5185\u90e8\u53d8\u91cf\n    self.all_data = {}\n    self.curves = []\n    self.selected_columns = []\n    self.data = pd.DataFrame() \n</code></pre>"},{"location":"API/data_replay/#src.components.DataReplay.data_replay_demo.DataReplayForm.draw_plot","title":"<code>draw_plot()</code>","text":"<p>\u6839\u636e\u5f53\u524d\u9009\u62e9\u7684\u6587\u4ef6\u548c\u5217\uff0c\u7ed8\u5236\u5bf9\u5e94\u7684\u56fe\u8868\u3002</p> <p>\u8be5\u65b9\u6cd5\u4f1a\uff1a - \u6e05\u9664\u5f53\u524d\u7ed8\u56fe\u533a\u57df\u5e76\u4fdd\u7559\u5fc5\u8981\u7684\u4ea4\u4e92\u5143\u7d20\uff1b - \u904d\u5386\u6240\u6709\u6587\u4ef6\u53ca\u5176\u9009\u4e2d\u7684\u5217\uff0c\u6784\u5efa\u7ed8\u56fe\u6570\u636e\uff1b - \u7ed8\u5236\u6bcf\u6761\u66f2\u7ebf\uff0c\u5e76\u8bbe\u7f6e\u989c\u8272\u548c\u56fe\u4f8b\uff1b - \u8bbe\u7f6e\u5750\u6807\u8f74\u8303\u56f4\u548c\u6ed1\u52a8\u6761\u53c2\u6570\uff0c\u4ee5\u652f\u6301\u6570\u636e\u6d4f\u89c8\u3002</p> Source code in <code>src\\components\\DataReplay\\data_replay_demo.py</code> <pre><code>def draw_plot(self):\n    \"\"\"\n    \u6839\u636e\u5f53\u524d\u9009\u62e9\u7684\u6587\u4ef6\u548c\u5217\uff0c\u7ed8\u5236\u5bf9\u5e94\u7684\u56fe\u8868\u3002\n\n    \u8be5\u65b9\u6cd5\u4f1a\uff1a\n    - \u6e05\u9664\u5f53\u524d\u7ed8\u56fe\u533a\u57df\u5e76\u4fdd\u7559\u5fc5\u8981\u7684\u4ea4\u4e92\u5143\u7d20\uff1b\n    - \u904d\u5386\u6240\u6709\u6587\u4ef6\u53ca\u5176\u9009\u4e2d\u7684\u5217\uff0c\u6784\u5efa\u7ed8\u56fe\u6570\u636e\uff1b\n    - \u7ed8\u5236\u6bcf\u6761\u66f2\u7ebf\uff0c\u5e76\u8bbe\u7f6e\u989c\u8272\u548c\u56fe\u4f8b\uff1b\n    - \u8bbe\u7f6e\u5750\u6807\u8f74\u8303\u56f4\u548c\u6ed1\u52a8\u6761\u53c2\u6570\uff0c\u4ee5\u652f\u6301\u6570\u636e\u6d4f\u89c8\u3002\n\n    \"\"\"\n    # \u6e05\u9664\u7ed8\u56fe\u4f46\u4fdd\u7559\u4ea4\u4e92\u5143\u7d20\n    self.plot_widget.clear()\n    self.plot_widget.addItem(self.text_item)\n    self.plot_widget.addItem(self.hover_marker)\n    self.plot_widget.addItem(self.v_line, ignoreBounds=True)\n    self.plot_widget.addItem(self.h_line, ignoreBounds=True)\n    self.text_item.hide()\n    self.highlighted_curve = None\n    self.curves = []  # \u4fdd\u5b58\u6240\u6709PlotDataItem\n    combined_df = pd.DataFrame()\n    self.selected_columns = []\n\n    # \u904d\u5386\u6240\u6709\u6587\u4ef6\n    for i in range(self.treeWidget_datafile.topLevelItemCount()):\n        file_item = self.treeWidget_datafile.topLevelItem(i)\n        filename = file_item.text(0)\n        df = self.all_data.get(filename)\n        if df is None:\n            continue\n\n        # \u904d\u5386\u6587\u4ef6\u4e2d\u7684\u6240\u6709\u5217\n        for j in range(file_item.childCount()):\n            col_item = file_item.child(j)\n            if col_item.checkState(0) == Qt.Checked:\n                col = col_item.text(0)  # \u539f\u59cb\u5217\u540d\n                unit= col_item.toolTip(0).split(\"\u5355\u4f4d: \")[1]\n                if self.col_counter[col] &gt; 1:\n                    legend_name = f\"{col} {unit} ({filename})\"\n                else:\n                    legend_name = f'{col} {unit}'\n\n                # \u6dfb\u52a0\u5230\u7ed8\u56fe\u6570\u636e\n                combined_df[legend_name] = df[col]\n                self.selected_columns.append((legend_name, legend_name))\n\n    if combined_df.empty:\n        return\n\n    self.data = combined_df\n    self.timestamps = np.arange(len(combined_df))  \n    self.window_width = max(100, int(len(self.timestamps) * 0.1))\n    self.scroll_position = 0  # \u521d\u59cb\u8d77\u70b9\n\n    # \u904d\u5386\u6240\u6709\u9009\u4e2d\u7684\u5217\n    for i, (colname, legend_name) in enumerate(self.selected_columns):\n        y = self.data[legend_name].to_numpy()\n        color = QColor.fromHsv((i * 30) % 255, 200, 230)\n        curve = self.plot_widget.plot(self.timestamps, y, pen=pg.mkPen(color=color, width=1), name=legend_name)\n        curve.default_pen = pg.mkPen(color=color, width=1)\n        self.curves.append((curve, self.timestamps, y))\n\n    x_min = self.scroll_position\n    x_max = self.scroll_position + self.window_width\n    y_min, y_max = combined_df.min().min(), combined_df.max().max()\n\n    y_range = y_max - y_min\n    # \u6dfb\u52a0 5% \u7684\u4e0a\u4e0b\u7559\u767d\n    padding = y_range * 0.05\n    y_min -= padding\n    y_max += padding\n\n    vb = self.view_box\n    vb.setLimits(\n        xMin=0,\n        xMax=len(self.timestamps),\n        yMin=y_min,\n        yMax=y_max,\n        minXRange=10,\n        maxXRange=len(self.timestamps),\n        minYRange=y_range * 0.01,\n        maxYRange=y_range * 1.1\n    )\n    vb.setXRange(x_min, x_max, padding=0)\n    vb.setYRange(y_min, y_max, padding=0)\n\n    # \u8bbe\u7f6e\u6ed1\u52a8\u6761\u6700\u5927\u503c\u4e3a 100\uff08\u767e\u5206\u6bd4\u63a7\u5236\uff09\n    self.horizontalSlider.setMaximum(100)\n    self.horizontalSlider.setValue(0)\n</code></pre>"},{"location":"API/data_replay/#src.components.DataReplay.data_replay_demo.DataReplayForm.eventFilter","title":"<code>eventFilter(source, event)</code>","text":"<p>\u81ea\u5b9a\u4e49\u4e8b\u4ef6\u8fc7\u6ee4\u5668\uff0c\u7528\u4e8e\u5904\u7406\u6c34\u5e73\u6ed1\u52a8\u6761\u7684\u60ac\u505c\u4e8b\u4ef6\u5e76\u663e\u793a\u5bf9\u5e94\u6570\u636e\u7684\u65f6\u95f4\u6233\u63d0\u793a</p> \u53c2\u6570 <p>source: \u4e8b\u4ef6\u6765\u6e90\u5bf9\u8c61 event: \u4e8b\u4ef6\u5bf9\u8c61</p> \u8fd4\u56de\u503c <p>bool: \u8fd4\u56de\u7236\u7c7b\u4e8b\u4ef6\u8fc7\u6ee4\u5668\u7684\u5904\u7406\u7ed3\u679c</p> Source code in <code>src\\components\\DataReplay\\data_replay_demo.py</code> <pre><code>def eventFilter(self, source, event):\n    \"\"\"\n    \u81ea\u5b9a\u4e49\u4e8b\u4ef6\u8fc7\u6ee4\u5668\uff0c\u7528\u4e8e\u5904\u7406\u6c34\u5e73\u6ed1\u52a8\u6761\u7684\u60ac\u505c\u4e8b\u4ef6\u5e76\u663e\u793a\u5bf9\u5e94\u6570\u636e\u7684\u65f6\u95f4\u6233\u63d0\u793a\n\n    \u53c2\u6570:\n        source: \u4e8b\u4ef6\u6765\u6e90\u5bf9\u8c61\n        event: \u4e8b\u4ef6\u5bf9\u8c61\n\n    \u8fd4\u56de\u503c:\n        bool: \u8fd4\u56de\u7236\u7c7b\u4e8b\u4ef6\u8fc7\u6ee4\u5668\u7684\u5904\u7406\u7ed3\u679c\n    \"\"\"\n    # \u5982\u679c\u4e8b\u4ef6\u6e90\u662f\u6c34\u5e73\u6ed1\u52a8\u6761\uff0c\u5e76\u4e14\u4e8b\u4ef6\u7c7b\u578b\u662f\u60ac\u505c\u79fb\u52a8\n    if source == self.horizontalSlider and event.type() == QEvent.HoverMove:\n        # \u83b7\u53d6\u9f20\u6807\u4f4d\u7f6e\n        pos = event.pos()\n        # \u8ba1\u7b97\u6ed1\u52a8\u6761\u7684\u503c\n        val = self.horizontalSlider.minimum() + (\n            (self.horizontalSlider.maximum() - self.horizontalSlider.minimum())\n            * pos.x()\n            / self.horizontalSlider.width()\n        )\n        # \u8ba1\u7b97\u7d22\u5f15\n        index = int(len(self.data) * (val / 100.0))\n        # \u5982\u679c\u7d22\u5f15\u5728\u6570\u636e\u8303\u56f4\u5185\n        if 0 &lt;= index &lt; len(self.data):\n            try:\n                # \u83b7\u53d6\u65f6\u95f4\u6233\n                timestamp = self.data.index[index]\n                # \u5982\u679c\u65f6\u95f4\u6233\u662fpd.Timestamp\u7c7b\u578b\n                if isinstance(timestamp, pd.Timestamp):\n                    # \u683c\u5f0f\u5316\u65f6\u95f4\u6233\n                    tip = timestamp.strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]\n                else:\n                    # \u5426\u5219\u76f4\u63a5\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\n                    tip = str(timestamp)\n                # \u663e\u793a\u63d0\u793a\u4fe1\u606f\n                QToolTip.showText(self.horizontalSlider.mapToGlobal(pos), tip)\n            except Exception:\n                pass\n    # \u8fd4\u56de\u7236\u7c7b\u7684\u4e8b\u4ef6\u8fc7\u6ee4\u5668\n    return super().eventFilter(source, event)\n</code></pre>"},{"location":"API/data_replay/#src.components.DataReplay.data_replay_demo.DataReplayForm.highlight_curve","title":"<code>highlight_curve(curve)</code>","text":"<p>\u5c06\u66f2\u7ebf\u52a0\u7c97\u9ad8\u4eae\u663e\u793a</p> Source code in <code>src\\components\\DataReplay\\data_replay_demo.py</code> <pre><code>def highlight_curve(self, curve):\n    \"\"\"\u5c06\u66f2\u7ebf\u52a0\u7c97\u9ad8\u4eae\u663e\u793a\"\"\"\n    if curve:\n        curve.setPen(pg.mkPen(color=curve.default_pen.color(), width=2))\n</code></pre>"},{"location":"API/data_replay/#src.components.DataReplay.data_replay_demo.DataReplayForm.init_connections","title":"<code>init_connections()</code>","text":"<p>\u521d\u59cb\u5316\u4fe1\u53f7\u69fd\u8fde\u63a5</p> Source code in <code>src\\components\\DataReplay\\data_replay_demo.py</code> <pre><code>def init_connections(self):\n    \"\"\"\u521d\u59cb\u5316\u4fe1\u53f7\u69fd\u8fde\u63a5\"\"\"\n    self.horizontalSlider.valueChanged.connect(self.scroll_plot)\n    self.pushButton_plot.clicked.connect(self.draw_plot)\n    self.treeWidget_datafile.customContextMenuRequested.connect(self.TreeContextMenuEvent)\n</code></pre>"},{"location":"API/data_replay/#src.components.DataReplay.data_replay_demo.DataReplayForm.init_graph","title":"<code>init_graph()</code>","text":"<p>\u521d\u59cb\u5316\u7ed8\u56fe\u76f8\u5173\u7ec4\u4ef6\u548c\u754c\u9762\u5143\u7d20\u3002</p> <p>\u8be5\u51fd\u6570\u5b8c\u6210\u4ee5\u4e0b\u4e3b\u8981\u5de5\u4f5c\uff1a 1. \u521b\u5efa\u5e76\u914d\u7f6e\u7ed8\u56fe\u63a7\u4ef6\uff08PlotWidget\uff09\u53ca\u76f8\u5173\u89c6\u56fe\u7ec4\u4ef6\uff1b 2. \u8bbe\u7f6e\u56fe\u8868\u6807\u9898\u3001\u5750\u6807\u8f74\u6807\u7b7e\u53ca\u7f51\u683c\u7ebf\uff1b 3. \u6dfb\u52a0\u56fe\u4f8b\u3001\u9f20\u6807\u4ea4\u4e92\u4e8b\u4ef6\u76d1\u542c\u5668\uff1b 4. \u521d\u59cb\u5316\u7528\u4e8e\u4ea4\u4e92\u63d0\u793a\u7684\u6587\u672c\u6846\u3001\u9ad8\u4eae\u6807\u8bb0\u70b9\u53ca\u5341\u5b57\u53c2\u8003\u7ebf\u7b49\u56fe\u5f62\u5143\u7d20\u3002</p> Source code in <code>src\\components\\DataReplay\\data_replay_demo.py</code> <pre><code>def init_graph(self):\n    \"\"\"\n    \u521d\u59cb\u5316\u7ed8\u56fe\u76f8\u5173\u7ec4\u4ef6\u548c\u754c\u9762\u5143\u7d20\u3002\n\n    \u8be5\u51fd\u6570\u5b8c\u6210\u4ee5\u4e0b\u4e3b\u8981\u5de5\u4f5c\uff1a\n    1. \u521b\u5efa\u5e76\u914d\u7f6e\u7ed8\u56fe\u63a7\u4ef6\uff08PlotWidget\uff09\u53ca\u76f8\u5173\u89c6\u56fe\u7ec4\u4ef6\uff1b\n    2. \u8bbe\u7f6e\u56fe\u8868\u6807\u9898\u3001\u5750\u6807\u8f74\u6807\u7b7e\u53ca\u7f51\u683c\u7ebf\uff1b\n    3. \u6dfb\u52a0\u56fe\u4f8b\u3001\u9f20\u6807\u4ea4\u4e92\u4e8b\u4ef6\u76d1\u542c\u5668\uff1b\n    4. \u521d\u59cb\u5316\u7528\u4e8e\u4ea4\u4e92\u63d0\u793a\u7684\u6587\u672c\u6846\u3001\u9ad8\u4eae\u6807\u8bb0\u70b9\u53ca\u5341\u5b57\u53c2\u8003\u7ebf\u7b49\u56fe\u5f62\u5143\u7d20\u3002\n\n    \"\"\"\n    self.view_box = LimitedViewBox()\n    self.plot_widget = pg.PlotWidget(viewBox=self.view_box)\n    self.plot_widget.setBackground('w')\n    self.plot_widget.showGrid(x=True, y=True)\n    self.plot_widget.addLegend()\n    self.gridLayout_plot.addWidget(self.plot_widget)\n\n    # \u8bbe\u7f6e\u6807\u9898\u548c\u5750\u6807\u8f74\u6807\u7b7e\n    self.plot_widget.getPlotItem().setTitle(\" \", color='k', size='15pt')\n    self.plot_widget.getPlotItem().setLabel('left', \" \", units='', **{'color': 'black', 'font-size': '12pt'})\n    self.plot_widget.getPlotItem().setLabel('bottom', \"\u65f6\u95f4\", units='ms', **{'color': 'black', 'font-size': '12pt'})\n\n    # \u7ed1\u5b9a\u9f20\u6807\u79fb\u52a8\u4e8b\u4ef6\uff08\u76d1\u542c\u6574\u4e2aplot\u533a\u57df\uff09\n    self.proxy = pg.SignalProxy(self.plot_widget.scene().sigMouseMoved, rateLimit=60, slot=self.onMouseMoved)\n    self.highlighted_curve = None\n    self.text_item = pg.TextItem(anchor=(0,1), border='w', fill=(0, 0, 0, 100))\n    self.text_item.setZValue(11)\n    self.plot_widget.addItem(self.text_item)\n    self.text_item.hide()\n\n    # \u5b9e\u5fc3\u5c0f\u5706\u70b9\n    self.hover_marker = pg.ScatterPlotItem(\n        size=8,\n        pen=pg.mkPen('k'),\n        brush=pg.mkBrush('y'),\n        symbol='o'\n    )\n    self.hover_marker.setZValue(10)\n    self.plot_widget.addItem(self.hover_marker)\n\n    # \u865a\u7ebf\u5341\u5b57\u7ebf\n    dash_pen = pg.mkPen(color='gray', width=1, style=Qt.DashLine)\n    self.v_line = pg.InfiniteLine(angle=90, movable=False, pen=dash_pen)\n    self.h_line = pg.InfiniteLine(angle=0, movable=False, pen=dash_pen)\n    self.v_line.setZValue(9)\n    self.h_line.setZValue(9)\n    self.plot_widget.addItem(self.v_line, ignoreBounds=True)\n    self.plot_widget.addItem(self.h_line, ignoreBounds=True)\n\n    # \u60ac\u6d6e\u6570\u636e\u6587\u672c\u6846\n    self.text_item = pg.TextItem(anchor=(0,1), border='w', fill=(0, 0, 0, 100))\n    self.text_item.setZValue(11)\n    self.plot_widget.addItem(self.text_item)\n    self.text_item.hide()\n</code></pre>"},{"location":"API/data_replay/#src.components.DataReplay.data_replay_demo.DataReplayForm.load_csv","title":"<code>load_csv()</code>","text":"<p>\u52a0\u8f7dCSV\u6587\u4ef6\u5230\u7a0b\u5e8f\u4e2d\uff0c\u652f\u6301\u591a\u4e2a\u6587\u4ef6\u7684\u6279\u91cf\u52a0\u8f7d\u3002 CSV\u683c\u5f0f\u8981\u6c42\uff1a\u9996\u884c\u4e3a\u5217\u540d\uff0c\u7b2c\u4e8c\u884c\u4e3a\u5355\u4f4d\uff0c\u540e\u7eed\u4e3a\u6570\u636e\u884c\u3002</p> \u8fd4\u56de\u503c <p>\u65e0\u8fd4\u56de\u503c\u3002\u52a0\u8f7d\u7684\u6570\u636e\u5b58\u50a8\u5728 self.all_data \u4e2d\uff0c\u5e76\u66f4\u65b0\u754c\u9762\u7ec4\u4ef6\u3002</p> <p>\u529f\u80fd\u8bf4\u660e\uff1a     - \u4f7f\u7528\u6587\u4ef6\u5bf9\u8bdd\u6846\u9009\u62e9\u4e00\u4e2a\u6216\u591a\u4e2aCSV\u6587\u4ef6\uff1b     - \u6bcf\u4e2a\u6587\u4ef6\u89e3\u6790\u4e3a\u5e26\u591a\u7ea7\u5217\u540d\uff08\u540d\u79f0+\u5355\u4f4d\uff09\u7684DataFrame\uff1b     - \u65f6\u95f4\u6233\u5217\u4f5c\u4e3a\u7d22\u5f15\u5904\u7406\uff1b     - \u907f\u514d\u91cd\u590d\u52a0\u8f7d\u540c\u4e00\u6587\u4ef6\uff1b     - \u5728TreeWidget\u4e2d\u5c55\u793a\u6587\u4ef6\u7ed3\u6784\u548c\u5217\u4fe1\u606f\uff1b     - \u66f4\u65b0\u6ed1\u52a8\u6761\u7684\u6700\u5927\u503c\u4ee5\u5339\u914d\u6700\u65b0\u52a0\u8f7d\u6587\u4ef6\u7684\u6570\u636e\u957f\u5ea6\u3002</p> Source code in <code>src\\components\\DataReplay\\data_replay_demo.py</code> <pre><code>def load_csv(self):\n    \"\"\"\n    \u52a0\u8f7dCSV\u6587\u4ef6\u5230\u7a0b\u5e8f\u4e2d\uff0c\u652f\u6301\u591a\u4e2a\u6587\u4ef6\u7684\u6279\u91cf\u52a0\u8f7d\u3002\n    CSV\u683c\u5f0f\u8981\u6c42\uff1a\u9996\u884c\u4e3a\u5217\u540d\uff0c\u7b2c\u4e8c\u884c\u4e3a\u5355\u4f4d\uff0c\u540e\u7eed\u4e3a\u6570\u636e\u884c\u3002\n\n    \u8fd4\u56de\u503c:\n        \u65e0\u8fd4\u56de\u503c\u3002\u52a0\u8f7d\u7684\u6570\u636e\u5b58\u50a8\u5728 self.all_data \u4e2d\uff0c\u5e76\u66f4\u65b0\u754c\u9762\u7ec4\u4ef6\u3002\n\n    \u529f\u80fd\u8bf4\u660e\uff1a\n        - \u4f7f\u7528\u6587\u4ef6\u5bf9\u8bdd\u6846\u9009\u62e9\u4e00\u4e2a\u6216\u591a\u4e2aCSV\u6587\u4ef6\uff1b\n        - \u6bcf\u4e2a\u6587\u4ef6\u89e3\u6790\u4e3a\u5e26\u591a\u7ea7\u5217\u540d\uff08\u540d\u79f0+\u5355\u4f4d\uff09\u7684DataFrame\uff1b\n        - \u65f6\u95f4\u6233\u5217\u4f5c\u4e3a\u7d22\u5f15\u5904\u7406\uff1b\n        - \u907f\u514d\u91cd\u590d\u52a0\u8f7d\u540c\u4e00\u6587\u4ef6\uff1b\n        - \u5728TreeWidget\u4e2d\u5c55\u793a\u6587\u4ef6\u7ed3\u6784\u548c\u5217\u4fe1\u606f\uff1b\n        - \u66f4\u65b0\u6ed1\u52a8\u6761\u7684\u6700\u5927\u503c\u4ee5\u5339\u914d\u6700\u65b0\u52a0\u8f7d\u6587\u4ef6\u7684\u6570\u636e\u957f\u5ea6\u3002\n    \"\"\"\n    # \u6253\u5f00\u6587\u4ef6\u9009\u62e9\u5bf9\u8bdd\u6846\uff0c\u5141\u8bb8\u9009\u62e9\u591a\u4e2aCSV\u6587\u4ef6\n    paths, _ = QFileDialog.getOpenFileNames(self, \"\u9009\u62e9CSV\u6587\u4ef6\", \"\", \"*.csv\")\n    if not paths:\n        return\n\n    # \u521d\u59cb\u5316\u6570\u636e\u5b58\u50a8\u7ed3\u6784\n    if not hasattr(self, \"all_data\"):\n        self.all_data = {}\n    self.col_counter = {}  # \u7edf\u8ba1\u6240\u6709\u5217\u540d\u51fa\u73b0\u6b21\u6570\n    self.column_mapping = {}  # (filename, name) -&gt; (name, unit)\n\n    # \u904d\u5386\u9009\u4e2d\u7684\u6bcf\u4e2a\u6587\u4ef6\u8def\u5f84\u8fdb\u884c\u5904\u7406\n    for path in paths:\n        filename = os.path.basename(path)\n\n        # \u907f\u514d\u91cd\u590d\u52a0\u8f7d\u76f8\u540c\u6587\u4ef6\u540d\u7684\u6587\u4ef6\n        if filename in self.all_data:\n            QMessageBox.information(self, \"\u63d0\u793a\", f\"{filename} \u5df2\u88ab\u52a0\u8f7d\uff0c\u8bf7\u52ff\u91cd\u590d\u64cd\u4f5c\")\n            continue\n\n        # \u5c1d\u8bd5\u8bfb\u53d6CSV\u6587\u4ef6\uff0c\u524d\u4e24\u884c\u4e3a\u6807\u9898\u884c\uff08\u5217\u540d+\u5355\u4f4d\uff09\n        try:\n            df = pd.read_csv(path, header=[0, 1])  # \u4e24\u884c\u6807\u9898\uff08\u5217\u540d + \u5355\u4f4d\uff09\n        except Exception as e:\n            QMessageBox.warning(self, \"\u9519\u8bef\", f\"\u8bfb\u53d6\u6587\u4ef6\u5931\u8d25\uff1a{filename}\\n{str(e)}\")\n            continue\n\n        # \u8bbe\u7f6e\u65f6\u95f4\u6233\u5217\u4e3a\u7d22\u5f15\u5e76\u5220\u9664\u539f\u65f6\u95f4\u5217\n        df.index = pd.to_datetime(df[df.columns[0]])  # \u5c06\u65f6\u95f4\u6233\u5217\u8bbe\u4e3a index\n        df.drop(columns=[df.columns[0]], inplace=True)  # \u5220\u9664\u539f\u65f6\u95f4\u5217\n\n        # \u5b58\u50a8\u89e3\u6790\u540e\u7684DataFrame\n        self.all_data[filename] = df\n\n        # \u7edf\u8ba1\u5217\u540d\u51fa\u73b0\u6b21\u6570\u5e76\u8bb0\u5f55\u5b8c\u6574\u6620\u5c04\u5173\u7cfb\n        for col in df.columns:\n            name, unit = col\n            self.col_counter[name] = self.col_counter.get(name, 0) + 1\n            self.column_mapping[(filename, name)] = (name, unit)\n\n    # \u66f4\u65b0TreeWidget\u663e\u793a\u5185\u5bb9\uff1a\u5c55\u793a\u6587\u4ef6\u53ca\u5176\u5217\u4fe1\u606f\uff08\u4ec5\u663e\u793a\u5217\u540d\uff09\n    for filename, df in self.all_data.items():\n        exists = False\n        for i in range(self.treeWidget_datafile.topLevelItemCount()):\n            item = self.treeWidget_datafile.topLevelItem(i)\n            if item.text(0) == filename:\n                exists = True\n                break\n        if not exists:\n            root = QTreeWidgetItem([filename])\n            root.setToolTip(0, path)\n            root.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable | Qt.ItemIsUserCheckable | Qt.ItemIsAutoTristate)\n            root.setCheckState(0, Qt.Unchecked)\n            for name, unit in df.columns:\n                item = QTreeWidgetItem([name])  # \u663e\u793a\u5217\u540d\n                item.setFlags(Qt.ItemIsEnabled | Qt.ItemIsSelectable | Qt.ItemIsUserCheckable | Qt.ItemIsAutoTristate)\n                item.setCheckState(0, Qt.Unchecked)\n                item.setToolTip(0, f\"\u5355\u4f4d: {unit}\")\n                root.addChild(item)\n            self.treeWidget_datafile.addTopLevelItem(root)\n            root.setExpanded(True)\n\n    # \u5982\u679c\u6210\u529f\u52a0\u8f7d\u4e86\u6570\u636e\uff0c\u5219\u66f4\u65b0\u6ed1\u52a8\u6761\u6700\u5927\u503c\u4e3a\u6700\u540e\u4e00\u4e2a\u6587\u4ef6\u7684\u884c\u6570\n    if self.all_data:\n        last_df = list(self.all_data.values())[-1]\n        self.horizontalSlider.setMaximum(len(last_df))\n</code></pre>"},{"location":"API/data_replay/#src.components.DataReplay.data_replay_demo.DataReplayForm.onMouseMoved","title":"<code>onMouseMoved(evt)</code>","text":"<p>\u9f20\u6807\u79fb\u52a8\u4e8b\u4ef6\u5904\u7406\u51fd\u6570</p> <p>\u5f53\u9f20\u6807\u5728\u7ed8\u56fe\u533a\u57df\u79fb\u52a8\u65f6\uff0c\u672c\u51fd\u6570\u88ab\u8c03\u7528\uff0c\u4ee5\u5b9e\u73b0\u52a8\u6001\u663e\u793a\u6570\u636e\u6d6e\u7a97\u3001\u9ad8\u4eae\u66f2\u7ebf\u3001\u7ed8\u5236\u5341\u5b57\u7ebf\u7b49\u529f\u80fd</p> <p>\u53c2\u6570: evt: \u4e8b\u4ef6\u5bf9\u8c61\uff0c\u5305\u542b\u9f20\u6807\u4f4d\u7f6e\u7b49\u4fe1\u606f</p> Source code in <code>src\\components\\DataReplay\\data_replay_demo.py</code> <pre><code>def onMouseMoved(self, evt):\n    \"\"\"\n    \u9f20\u6807\u79fb\u52a8\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\n\n    \u5f53\u9f20\u6807\u5728\u7ed8\u56fe\u533a\u57df\u79fb\u52a8\u65f6\uff0c\u672c\u51fd\u6570\u88ab\u8c03\u7528\uff0c\u4ee5\u5b9e\u73b0\u52a8\u6001\u663e\u793a\u6570\u636e\u6d6e\u7a97\u3001\u9ad8\u4eae\u66f2\u7ebf\u3001\u7ed8\u5236\u5341\u5b57\u7ebf\u7b49\u529f\u80fd\n\n    \u53c2\u6570:\n    evt: \u4e8b\u4ef6\u5bf9\u8c61\uff0c\u5305\u542b\u9f20\u6807\u4f4d\u7f6e\u7b49\u4fe1\u606f\n    \"\"\"\n    # \u83b7\u53d6\u9f20\u6807\u4f4d\u7f6e\n    pos = evt[0]\n    # \u83b7\u53d6\u89c6\u53e3\u77e9\u5f62\n    view_rect = self.plot_widget.viewport().rect()\n    # \u83b7\u53d6\u5168\u5c40\u5750\u6807\u7cfb\u4e0b\u7684\u9f20\u6807\u4f4d\u7f6e\n    global_pos = self.plot_widget.mapFromGlobal(QCursor.pos())\n\n    # \u5982\u679c\u9f20\u6807\u4f4d\u7f6e\u4e0d\u5728\u89c6\u53e3\u77e9\u5f62\u5185\uff0c\u5219\u9690\u85cf\u76f8\u5173\u663e\u793a\u5143\u7d20\u5e76\u8fd4\u56de\n    if not view_rect.contains(global_pos):\n        self.text_item.hide()\n        self.hover_marker.clear()\n        self.v_line.hide()\n        self.h_line.hide()\n        self.restore_curve(self.highlighted_curve)\n        self.highlighted_curve = None\n        return\n\n    # \u5c06\u9f20\u6807\u4f4d\u7f6e\u6620\u5c04\u5230\u89c6\u56fe\u5750\u6807\n    view_pos = self.plot_widget.plotItem.vb.mapSceneToView(pos)\n    # \u83b7\u53d6\u9f20\u6807\u5728\u50cf\u7d20\u5750\u6807\u7cfb\u4e0b\u7684\u4f4d\u7f6e\n    mouse_pixel_pos = pos.toPoint()\n\n    # \u8bbe\u7f6e\u50cf\u7d20\u9608\u503c\n    pixel_threshold = 20\n\n    # \u521d\u59cb\u5316\u6700\u8fd1\u7684\u66f2\u7ebf\u53ca\u76f8\u5173\u4fe1\u606f\n    closest_curve = None\n    closest_idx = None\n    closest_dist = float('inf')\n    closest_x_data = None\n    closest_y_data = None\n\n    # \u904d\u5386\u6240\u6709\u66f2\u7ebf\uff0c\u5bfb\u627e\u6700\u8fd1\u7684\u70b9\n    for curve, x_data, y_data in self.curves:\n        if len(x_data) == 0:\n            continue\n\n        for i in range(len(x_data)):\n            pt_data = QPointF(x_data[i], y_data[i])\n            pt_pixel = self.plot_widget.plotItem.vb.mapViewToScene(pt_data).toPoint()\n            dist = (pt_pixel - mouse_pixel_pos).manhattanLength()\n\n            if dist &lt; pixel_threshold and dist &lt; closest_dist:\n                closest_dist = dist\n                closest_curve = curve\n                closest_idx = i\n                closest_x_data = x_data\n                closest_y_data = y_data\n\n    # \u5982\u679c\u6ca1\u6709\u627e\u5230\u6700\u8fd1\u7684\u66f2\u7ebf\uff0c\u5219\u9690\u85cf\u76f8\u5173\u663e\u793a\u5143\u7d20\u5e76\u8fd4\u56de\n    if closest_curve is None:\n        self.text_item.hide()\n        self.hover_marker.clear()\n        self.v_line.hide()\n        self.h_line.hide()\n        self.restore_curve(self.highlighted_curve)\n        self.highlighted_curve = None\n        return\n\n    # \u6062\u590d\u5176\u4ed6\u66f2\u7ebf\u539f\u8272\n    if self.highlighted_curve is not None and self.highlighted_curve != closest_curve:\n        self.highlighted_curve.setPen(self.highlighted_curve.default_pen)\n\n    # \u9ad8\u4eae\u5f53\u524d\u66f2\u7ebf\n    self.highlight_curve(closest_curve)\n    self.highlighted_curve = closest_curve\n\n    # \u83b7\u53d6\u547d\u4e2d\u70b9\u5750\u6807\n    x_val = closest_x_data[closest_idx]\n    y_val = closest_y_data[closest_idx]\n\n    # \u663e\u793a\u5c0f\u5706\u70b9\n    self.hover_marker.setData([x_val], [y_val])\n\n    # \u663e\u793a\u5341\u5b57\u7ebf\n    self.v_line.setPos(x_val)\n    self.h_line.setPos(y_val)\n    self.v_line.show()\n    self.h_line.show()\n\n    # \u663e\u793a\u6570\u636e\u6d6e\u7a97\n    text = f'{closest_curve.name()}\\nX: {int(x_val)}\\nY: {y_val:.3f}\\nMIN: {min(closest_y_data):.3f}\\nMAX: {max(closest_y_data):.3f}\\nAVG: {np.mean(closest_y_data):.3f}\\n'\n    self.text_item.setText(text)\n    self.text_item.setPos(view_pos.x(), view_pos.y())\n    self.text_item.show()\n</code></pre>"},{"location":"API/data_replay/#src.components.DataReplay.data_replay_demo.DataReplayForm.remove_file","title":"<code>remove_file()</code>","text":"<p>\u79fb\u9664\u6240\u9009\u6587\u4ef6\u5e76\u4e14\u5237\u65b0\u6587\u4ef6\u5217\u8868\u4ee5\u53ca\u56fe\u8868</p> Source code in <code>src\\components\\DataReplay\\data_replay_demo.py</code> <pre><code>def remove_file(self):\n    \"\"\"\u79fb\u9664\u6240\u9009\u6587\u4ef6\u5e76\u4e14\u5237\u65b0\u6587\u4ef6\u5217\u8868\u4ee5\u53ca\u56fe\u8868\"\"\"\n    selected_items = self.treeWidget_datafile.selectedItems()\n\n    if not selected_items:\n        return  # \u6ca1\u6709\u9009\u4e2d\u9879\uff0c\u76f4\u63a5\u8fd4\u56de\n\n    for item in selected_items:\n        # \u786e\u4fdd\u662f\u9876\u5c42\u8282\u70b9\uff08\u5373\u6587\u4ef6\uff09\n        if item.parent() is None:\n            filename = item.text(0)\n            del self.all_data[filename]  # \u4ece\u6570\u636e\u4e2d\u5220\u9664\n            index = self.treeWidget_datafile.indexOfTopLevelItem(item)\n            self.treeWidget_datafile.takeTopLevelItem(index)  # \u4ece\u6811\u4e2d\u5220\u9664\n\n    # \u5237\u65b0\u5217\u8ba1\u6570\u5668\u548c\u6620\u5c04\n    self.col_counter = {}\n    self.column_mapping = {}\n\n    for filename, df in self.all_data.items():\n        for col in df.columns:\n            self.col_counter[col] = self.col_counter.get(col, 0) + 1\n            self.column_mapping[(filename, col)] = col\n\n    # \u91cd\u65b0\u7ed8\u56fe\n    self.draw_plot()\n</code></pre>"},{"location":"API/data_replay/#src.components.DataReplay.data_replay_demo.DataReplayForm.restore_curve","title":"<code>restore_curve(curve)</code>","text":"<p>\u6062\u590d\u66f2\u7ebf\u539f\u59cb\u6837\u5f0f</p> Source code in <code>src\\components\\DataReplay\\data_replay_demo.py</code> <pre><code>def restore_curve(self, curve):\n    \"\"\"\u6062\u590d\u66f2\u7ebf\u539f\u59cb\u6837\u5f0f\"\"\"\n    if curve:\n        curve.setPen(curve.default_pen)\n</code></pre>"},{"location":"API/data_replay/#src.components.DataReplay.data_replay_demo.DataReplayForm.scroll_plot","title":"<code>scroll_plot(value)</code>","text":"<p>\u6839\u636e\u6ed1\u52a8\u6761\u4f4d\u7f6e\u6eda\u52a8\u56fe\u8868\u663e\u793a\u533a\u57df</p> \u53c2\u6570 <p>value (int): \u6ed1\u52a8\u6761\u7684\u5f53\u524d\u4f4d\u7f6e\u503c\uff0c\u8303\u56f4\u901a\u5e38\u4e3a0-100</p> \u8fd4\u56de\u503c <p>None: \u65e0\u8fd4\u56de\u503c\uff0c\u76f4\u63a5\u4fee\u6539\u56fe\u8868\u663e\u793a\u533a\u57df</p> Source code in <code>src\\components\\DataReplay\\data_replay_demo.py</code> <pre><code>def scroll_plot(self, value):\n    \"\"\"\n    \u6839\u636e\u6ed1\u52a8\u6761\u4f4d\u7f6e\u6eda\u52a8\u56fe\u8868\u663e\u793a\u533a\u57df\n\n    \u53c2\u6570:\n        value (int): \u6ed1\u52a8\u6761\u7684\u5f53\u524d\u4f4d\u7f6e\u503c\uff0c\u8303\u56f4\u901a\u5e38\u4e3a0-100\n\n    \u8fd4\u56de\u503c:\n        None: \u65e0\u8fd4\u56de\u503c\uff0c\u76f4\u63a5\u4fee\u6539\u56fe\u8868\u663e\u793a\u533a\u57df\n    \"\"\"\n    # \u5982\u679c\u6ca1\u6709\u65f6\u95f4\u6233\u6216\u8005\u65f6\u95f4\u6233\u957f\u5ea6\u4e3a0\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n    if not hasattr(self, 'timestamps') or len(self.timestamps) == 0:\n        return\n\n    # \u83b7\u53d6\u65f6\u95f4\u6233\u7684\u603b\u6570\n    total_points = len(self.timestamps)\n    # \u5982\u679c\u65f6\u95f4\u6233\u603b\u6570\u5c0f\u4e8e\u7b49\u4e8e\u7a97\u53e3\u5bbd\u5ea6\uff0c\u5219\u76f4\u63a5\u8fd4\u56de\n    if total_points &lt;= self.window_width:\n        return\n\n    # \u8ba1\u7b97\u8d77\u59cb\u7d22\u5f15\u4f4d\u7f6e\n    max_start = total_points - self.window_width\n    # \u6839\u636e\u6ed1\u52a8\u6761\u4f4d\u7f6e\u8ba1\u7b97\u6eda\u52a8\u4f4d\u7f6e\n    self.scroll_position = int((value / 100.0) * max_start)\n    # \u786e\u4fdd\u6eda\u52a8\u4f4d\u7f6e\u5728\u6709\u6548\u8303\u56f4\u5185\n    self.scroll_position = max(0, min(self.scroll_position, max_start))\n\n    # \u83b7\u53d6\u56fe\u8868\u7684\u89c6\u56fe\u6846\n    vb = self.plot_widget.getViewBox()\n    # \u8bbe\u7f6eX\u8f74\u8303\u56f4\uff0c\u4ece\u6eda\u52a8\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5230\u6eda\u52a8\u4f4d\u7f6e\u52a0\u4e0a\u7a97\u53e3\u5bbd\u5ea6\u7ed3\u675f\uff0c\u4e0d\u586b\u5145\n    vb.setXRange(self.scroll_position,\n                 self.scroll_position + self.window_width,\n                 padding=0)\n</code></pre>"},{"location":"API/data_replay/#src.components.DataReplay.data_replay_demo.LimitedViewBox","title":"<code>LimitedViewBox</code>","text":"<p>               Bases: <code>ViewBox</code></p> <p>\u9650\u5236\u7f29\u653e\u8303\u56f4\u7684ViewBox</p> Source code in <code>src\\components\\DataReplay\\data_replay_demo.py</code> <pre><code>class LimitedViewBox(pg.ViewBox):\n    \"\"\"\u9650\u5236\u7f29\u653e\u8303\u56f4\u7684ViewBox\"\"\"\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs)\n        self._limits = None  # \u5b58\u50a8\u7f29\u653e\u9650\u5236\n\n    def setLimits(self, **kwargs):\n        self._limits = kwargs\n        super().setLimits(**kwargs)\n\n    def wheelEvent(self, ev, axis=None):\n        super().wheelEvent(ev, axis)\n\n        if self._limits is None:\n            return\n\n        # \u5f53\u524d\u89c6\u56fe\u8303\u56f4\n        x_range = self.viewRange()[0]\n        y_range = self.viewRange()[1]\n\n        x_min, x_max = x_range\n        y_min, y_max = y_range\n\n        # \u9650\u5236\u53c2\u6570\n        limits = self._limits\n\n        # \u9650\u5236x\u8303\u56f4\n        if 'xMin' in limits and x_min &lt; limits['xMin']:\n            x_min = limits['xMin']\n        if 'xMax' in limits and x_max &gt; limits['xMax']:\n            x_max = limits['xMax']\n\n        # \u9650\u5236y\u8303\u56f4\n        if 'yMin' in limits and y_min &lt; limits['yMin']:\n            y_min = limits['yMin']\n        if 'yMax' in limits and y_max &gt; limits['yMax']:\n            y_max = limits['yMax']\n\n        # \u9650\u5236x\u7f29\u653e\u7a97\u53e3\u5bbd\u5ea6\n        if 'minXRange' in limits and (x_max - x_min) &lt; limits['minXRange']:\n            center_x = (x_min + x_max) / 2\n            half = limits['minXRange'] / 2\n            x_min = center_x - half\n            x_max = center_x + half\n\n        if 'maxXRange' in limits and (x_max - x_min) &gt; limits['maxXRange']:\n            center_x = (x_min + x_max) / 2\n            half = limits['maxXRange'] / 2\n            x_min = center_x - half\n            x_max = center_x + half\n\n        # \u9650\u5236y\u7f29\u653e\u7a97\u53e3\u9ad8\u5ea6\n        if 'minYRange' in limits and (y_max - y_min) &lt; limits['minYRange']:\n            center_y = (y_min + y_max) / 2\n            half = limits['minYRange'] / 2\n            y_min = center_y - half\n            y_max = center_y + half\n\n        if 'maxYRange' in limits and (y_max - y_min) &gt; limits['maxYRange']:\n            center_y = (y_min + y_max) / 2\n            half = limits['maxYRange'] / 2\n            y_min = center_y - half\n            y_max = center_y + half\n\n        # \u5e94\u7528\u9650\u5236\u540e\u7684\u8303\u56f4\n        self.setXRange(x_min, x_max, padding=0)\n        self.setYRange(y_min, y_max, padding=0)\n</code></pre>"},{"location":"API/log_viewer/","title":"\u65e5\u5fd7\u67e5\u770b\u5668 LogViewer API","text":"","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm","title":"<code>src.components.LogViewer.log_viewer_demo.LogCheckForm</code>","text":"<p>               Bases: <code>QWidget</code>, <code>Ui_log_viewer</code></p> <p>\u65e5\u5fd7\u67e5\u770b\u5668\u4e3b\u7a97\u53e3\u7c7b</p> <p>\u63d0\u4f9b\u65e5\u5fd7\u6587\u4ef6\u6d4f\u89c8\u3001\u8fc7\u6ee4\u3001\u5220\u9664\u7b49\u529f\u80fd\u7684\u56fe\u5f62\u754c\u9762\u7ec4\u4ef6\u3002</p> Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>class LogCheckForm(QWidget, Ui_log_viewer):\n    \"\"\"\u65e5\u5fd7\u67e5\u770b\u5668\u4e3b\u7a97\u53e3\u7c7b\n\n    \u63d0\u4f9b\u65e5\u5fd7\u6587\u4ef6\u6d4f\u89c8\u3001\u8fc7\u6ee4\u3001\u5220\u9664\u7b49\u529f\u80fd\u7684\u56fe\u5f62\u754c\u9762\u7ec4\u4ef6\u3002\n    \"\"\"\n\n    def __init__(self):\n        \"\"\"\u521d\u59cb\u5316\u65e5\u5fd7\u67e5\u770b\u5668\u754c\u9762\"\"\"\n        super(LogCheckForm, self).__init__()\n        self.setupUi(self)\n        self._log_files_cache = None  # \u65e5\u5fd7\u6587\u4ef6\u7f13\u5b58\n        self._cache_timestamp = 0     # \u7f13\u5b58\u65f6\u95f4\u6233\n        self.InitUI()\n\n    def Get_Log_Files(self, force_refresh=False):\n        \"\"\"\u83b7\u53d6\u65e5\u5fd7\u6587\u4ef6\u5217\u8868\uff0c\u5e26\u7f13\u5b58\u673a\u5236\n\n        Args:\n            force_refresh (bool): \u662f\u5426\u5f3a\u5236\u5237\u65b0\u7f13\u5b58\uff0c\u9ed8\u8ba4\u4e3aFalse\n\n        Returns:\n            list: \u65e5\u5fd7\u6587\u4ef6\u8def\u5f84\u5217\u8868\n        \"\"\"\n        current_time = datetime.now().timestamp()\n\n        # \u5982\u679c\u7f13\u5b58\u5b58\u5728\u4e14\u672a\u8fc7\u671f\uff085\u79d2\u5185\uff09\uff0c\u76f4\u63a5\u8fd4\u56de\u7f13\u5b58\n        if (not force_refresh and\n            self._log_files_cache is not None and\n            current_time - self._cache_timestamp &lt; 5):\n            return self._log_files_cache\n\n        # \u91cd\u65b0\u83b7\u53d6\u6587\u4ef6\u5217\u8868\u5e76\u66f4\u65b0\u7f13\u5b58\n        self._log_files_cache = glob.glob(os.path.join(LOG_FILES, \"*.log\"))\n        self._cache_timestamp = current_time\n        return self._log_files_cache\n\n    def Invalidate_Log_Files_Cache(self):\n        \"\"\"\u4f7f\u65e5\u5fd7\u6587\u4ef6\u7f13\u5b58\u5931\u6548\"\"\"\n        self._log_files_cache = None\n        self._cache_timestamp = 0\n\n    def InitUI(self):\n        \"\"\"\u521d\u59cb\u5316\u7528\u6237\u754c\u9762\"\"\"\n        self.setWindowTitle('\u5386\u53f2\u65e5\u5fd7')\n        strdate = datetime.now().strftime('%Y-%m-%d')\n        self.current_log_content = \"\"  # \u5b58\u50a8\u5f53\u524d\u5b8c\u6574\u65e5\u5fd7\u5185\u5bb9\n        self.batch_mode = False  # \u6279\u91cf\u5220\u9664\u6a21\u5f0f\u6807\u5fd7\n\n        # \u8bbe\u7f6e\u5217\u8868\u63a7\u4ef6\u652f\u6301\u591a\u9009\n        self.listWidget_historyLogs.setSelectionMode(QAbstractItemView.ExtendedSelection)\n\n        # \u8bbe\u7f6e\u53f3\u952e\u83dc\u5355\n        self.listWidget_historyLogs.setContextMenuPolicy(Qt.CustomContextMenu)\n        self.listWidget_historyLogs.customContextMenuRequested.connect(self.Show_Context_Menu)\n\n        self.Get_Log_File_By_Date(strdate)\n        self.Set_Log_Date()\n        self.calendarWidget.selectionChanged.connect(\n            lambda: self.Get_Log_File_By_Date(self.calendarWidget.selectedDate().toString(\"yyyy-MM-dd\"))\n        )\n        self.comboBox_logType.currentTextChanged.connect(self.Filter_Log_By_Type)\n        self.listWidget_historyLogs.itemClicked.connect(self.On_History_Log_Clicked)\n\n        # \u8fde\u63a5\u6309\u94ae\u4e8b\u4ef6\n        self.pushButton_batchMode.clicked.connect(self.Enter_Batch_Mode)\n        self.pushButton_deleteSelected.clicked.connect(self.Delete_Selected_Logs)\n        self.pushButton_cancelBatch.clicked.connect(self.Exit_Batch_Mode)\n        self.pushButton_deleteByDate.clicked.connect(self.Delete_Logs_By_Date)\n\n        # \u8bbe\u7f6e\u6309\u94ae\u6837\u5f0f\n        self.Set_Button_Styles()\n\n        self.Load_History_Log_List()\n        # \u8bbe\u7f6e\u5e94\u7528\u56fe\u6807\n        try:\n            icon_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))),\n                                        \"assets\", \"icon\", \"\u6587\u4ef6\u6587\u6863.svg\")\n            if os.path.exists(icon_path):\n                self.setWindowIcon(QIcon(icon_path))\n        except Exception as e:\n            print(f\"\u8bbe\u7f6e\u56fe\u6807\u5931\u8d25: {e}\")\n\n    def Set_Log_Date(self):\n        \"\"\"\u5728\u65e5\u5386\u63a7\u4ef6\u4e2d\u9ad8\u4eae\u663e\u793a\u6709\u65e5\u5fd7\u6587\u4ef6\u7684\u65e5\u671f\"\"\"\n        log_files = self.Get_Log_Files()\n        for logfile in log_files:\n            date = os.path.basename(logfile)\n            date = date.split('_')[1].split('.')[0]\n            date = datetime.strptime(date, '%Y-%m-%d').date()\n            format = QTextCharFormat()\n            format.setBackground(QColor(180, 238, 180))\n            self.calendarWidget.setDateTextFormat(date, format)\n\n    def Get_Log_File_By_Date(self, date):\n        \"\"\"\u6839\u636e\u65e5\u671f\u83b7\u53d6\u5e76\u663e\u793a\u5bf9\u5e94\u7684\u65e5\u5fd7\u6587\u4ef6\u5185\u5bb9\n\n        Args:\n            date (str): \u65e5\u671f\u5b57\u7b26\u4e32\uff0c\u683c\u5f0f\u4e3a'yyyy-MM-dd'\n        \"\"\"\n        log_files = self.Get_Log_Files()\n        for logfile in log_files:\n            if date in logfile:\n                with open(logfile, 'r', encoding='utf-8') as file:\n                    self.current_log_content = file.read()\n                    self.Update_Log_Types()  # \u52a8\u6001\u66f4\u65b0\u65e5\u5fd7\u7c7b\u578b\n                    self.Filter_Log_By_Type(self.comboBox_logType.currentText())\n                return\n        # \u5982\u679c\u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u65e5\u671f\u7684\u65e5\u5fd7\u6587\u4ef6\uff0c\u6e05\u7a7a\u663e\u793a\n        self.current_log_content = \"\"\n        self.plainTextEdit_log.clear()\n        self.Update_Log_Types()  # \u6e05\u7a7a\u65e5\u5fd7\u7c7b\u578b\n\n    def Update_Log_Types(self):\n        \"\"\"\u52a8\u6001\u626b\u63cf\u5f53\u524d\u65e5\u5fd7\u5185\u5bb9\u4e2d\u7684\u6240\u6709\u65e5\u5fd7\u7c7b\u578b\u5e76\u66f4\u65b0\u4e0b\u62c9\u6846\"\"\"\n        # \u4fdd\u5b58\u5f53\u524d\u9009\u62e9\u7684\u7c7b\u578b\n        current_selection = self.comboBox_logType.currentText()\n\n        # \u6e05\u7a7a\u4e0b\u62c9\u6846\n        self.comboBox_logType.clear()\n\n        # \u6dfb\u52a0\"\u5168\u90e8\"\u9009\u9879\n        self.comboBox_logType.addItem(\"\u5168\u90e8\")\n\n        if self.current_log_content:\n            # \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u63d0\u53d6\u6240\u6709\u65e5\u5fd7\u7ea7\u522b\n            # \u65e5\u5fd7\u683c\u5f0f: YYYY/MM/DD HH:MM:SS - \u6a21\u5757\u540d - \u65e5\u5fd7\u7ea7\u522b - \u6d88\u606f\n            log_levels = set()\n            pattern = r'\\d{4}/\\d{2}/\\d{2} \\d{2}:\\d{2}:\\d{2} - [^-]+ - ([A-Z]+)\\s*- '\n            matches = re.findall(pattern, self.current_log_content)\n\n            for match in matches:\n                log_levels.add(match.strip())\n\n            # \u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\u5e76\u6dfb\u52a0\u5230\u4e0b\u62c9\u6846\n            for level in sorted(log_levels):\n                self.comboBox_logType.addItem(level)\n\n        # \u5c1d\u8bd5\u6062\u590d\u4e4b\u524d\u7684\u9009\u62e9\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u9009\u62e9\"\u5168\u90e8\"\n        index = self.comboBox_logType.findText(current_selection)\n        if index &gt;= 0:\n            self.comboBox_logType.setCurrentIndex(index)\n        else:\n            self.comboBox_logType.setCurrentIndex(0)  # \u9009\u62e9\"\u5168\u90e8\"\n\n    def Filter_Log_By_Type(self, log_type):\n        \"\"\"\u6839\u636e\u65e5\u5fd7\u7c7b\u578b\u8fc7\u6ee4\u65e5\u5fd7\u5185\u5bb9\u5e76\u5e94\u7528\u989c\u8272\n\n        Args:\n            log_type (str): \u65e5\u5fd7\u7c7b\u578b\uff0c\u5982\"ERROR\", \"INFO\"\u7b49\n        \"\"\"\n        if not self.current_log_content:\n            return\n\n        self.plainTextEdit_log.clear()\n\n        if log_type == \"\u5168\u90e8\":\n            # \u663e\u793a\u6240\u6709\u65e5\u5fd7\u5e76\u5e94\u7528\u989c\u8272\n            self.Apply_Colors_To_All_Logs()\n        else:\n            # \u6309\u7c7b\u578b\u8fc7\u6ee4\u65e5\u5fd7\u5e76\u5e94\u7528\u989c\u8272\n            lines = self.current_log_content.split('\\n')\n            filtered_lines = []\n\n            for line in lines:\n                if log_type in line:\n                    filtered_lines.append(line)\n\n            filtered_content = '\\n'.join(filtered_lines)\n            self.Apply_Colors_To_Content(filtered_content)\n\n    def Apply_Colors_To_All_Logs(self):\n        \"\"\"\u4e3a\u6240\u6709\u65e5\u5fd7\u5e94\u7528\u989c\u8272\"\"\"\n        self.Apply_Colors_To_Content(self.current_log_content)\n\n    def Apply_Colors_To_Content(self, content):\n        \"\"\"\u4e3a\u6307\u5b9a\u5185\u5bb9\u5e94\u7528\u989c\u8272 - \u4f18\u5316\u7248\u672c\n\n        Args:\n            content (str): \u9700\u8981\u5e94\u7528\u989c\u8272\u7684\u65e5\u5fd7\u5185\u5bb9\n        \"\"\"\n        # \u5b9a\u4e49\u65e5\u5fd7\u7ea7\u522b\u5bf9\u5e94\u7684\u989c\u8272\n        log_colors = {\n            'ERROR': '#FF0000',      # \u7ea2\u8272\n            'CRITICAL': '#8B0000',   # \u6df1\u7ea2\u8272\n            'WARNING': '#FF8C00',    # \u6a59\u8272\n            'INFO': '#0000FF',       # \u84dd\u8272\n            'DEBUG': '#808080',      # \u7070\u8272\n        }\n\n        lines = content.split('\\n')\n\n        # \u68c0\u67e5\u5185\u5bb9\u5927\u5c0f\uff0c\u5982\u679c\u8fc7\u5927\u5219\u4f7f\u7528\u7b80\u5316\u6e32\u67d3\n        if len(lines) &gt; 5000:  # \u8d85\u8fc75000\u884c\u4f7f\u7528\u7b80\u5316\u6a21\u5f0f\n            self.Apply_Colors_Simple(content, log_colors)\n            return\n\n        # \u6279\u91cf\u6784\u5efaHTML\u5185\u5bb9\uff0c\u907f\u514d\u9891\u7e41\u7684appendHtml\u8c03\u7528\n        html_content = []\n        batch_size = 500  # \u6bcf\u6279\u5904\u7406500\u884c\n\n        for i in range(0, len(lines), batch_size):\n            batch_lines = lines[i:i + batch_size]\n            batch_html = []\n\n            for line in batch_lines:\n                if line.strip():  # \u8df3\u8fc7\u7a7a\u884c\n                    # \u68c0\u6d4b\u65e5\u5fd7\u7ea7\u522b\u5e76\u53ea\u5bf9\u7ea7\u522b\u5173\u952e\u8bcd\u5e94\u7528\u989c\u8272\n                    colored_line = line\n                    for level, color in log_colors.items():\n                        if f' - {level}' in line:\n                            # \u53ea\u5bf9\u65e5\u5fd7\u7ea7\u522b\u5173\u952e\u8bcd\u5e94\u7528\u989c\u8272\uff0c\u5176\u4ed6\u90e8\u5206\u4fdd\u6301\u9ed8\u8ba4\u989c\u8272\n                            colored_line = line.replace(\n                                f' - {level}',\n                                f' - &lt;span style=\"color: {color}\"&gt;{level}&lt;/span&gt;'\n                            )\n                            break\n\n                    # HTML\u8f6c\u4e49\u7279\u6b8a\u5b57\u7b26\uff08\u9664\u4e86\u6211\u4eec\u6dfb\u52a0\u7684span\u6807\u7b7e\uff09\n                    if '&lt;span style=' not in colored_line:\n                        colored_line = colored_line.replace('&amp;', '&amp;amp;').replace('&lt;', '&amp;lt;').replace('&gt;', '&amp;gt;')\n\n                    batch_html.append(colored_line)\n\n            # \u6279\u91cf\u6dfb\u52a0\u5230\u6587\u672c\u6846\n            if batch_html:\n                self.plainTextEdit_log.appendHtml('&lt;br&gt;'.join(batch_html) + '&lt;br&gt;')\n\n            # \u6bcf\u6279\u5904\u7406\u540e\u5237\u65b0UI\uff0c\u4fdd\u6301\u54cd\u5e94\u6027\n            QtWidgets.QApplication.processEvents()\n\n    def Apply_Colors_Simple(self, content, log_colors):\n        \"\"\"\u7b80\u5316\u7684\u989c\u8272\u6e32\u67d3\u6a21\u5f0f\uff0c\u7528\u4e8e\u5927\u91cf\u65e5\u5fd7\n\n        Args:\n            content (str): \u65e5\u5fd7\u5185\u5bb9\n            log_colors (dict): \u65e5\u5fd7\u7ea7\u522b\u4e0e\u989c\u8272\u7684\u6620\u5c04\u5b57\u5178\n        \"\"\"\n        # \u5bf9\u4e8e\u5927\u91cf\u65e5\u5fd7\uff0c\u4f7f\u7528\u7eaf\u6587\u672c\u6a21\u5f0f\u4ee5\u63d0\u9ad8\u6027\u80fd\n        self.plainTextEdit_log.clear()\n        self.plainTextEdit_log.appendPlainText(\"\u65e5\u5fd7\u5185\u5bb9\u8fc7\u591a\uff0c\u4f7f\u7528\u7b80\u5316\u663e\u793a\u6a21\u5f0f...\\n\\n\")\n\n        # \u53ea\u663e\u793a\u524d2000\u884c\u548c\u540e1000\u884c\n        lines = content.split('\\n')\n        if len(lines) &gt; 3000:\n            preview_lines = lines[:2000] + ['\\n... \u7701\u7565\u4e2d\u95f4\u90e8\u5206 ...\\n'] + lines[-1000:]\n        else:\n            preview_lines = lines\n\n        # \u5206\u6279\u663e\u793a\uff0c\u907f\u514d\u4e00\u6b21\u6027\u52a0\u8f7d\u8fc7\u591a\u5185\u5bb9\n        batch_size = 1000\n        for i in range(0, len(preview_lines), batch_size):\n            batch = preview_lines[i:i + batch_size]\n            self.plainTextEdit_log.appendPlainText('\\n'.join(batch))\n            QtWidgets.QApplication.processEvents()\n\n    def Load_History_Log_List(self):\n        \"\"\"\u52a0\u8f7d\u5386\u53f2\u65e5\u5fd7\u6587\u4ef6\u5217\u8868 - \u4f18\u5316\u7248\u672c\"\"\"\n        try:\n            self.listWidget_historyLogs.clear()\n            log_files = self.Get_Log_Files()\n            log_files.sort()  # \u6309\u6587\u4ef6\u540d\u6392\u5e8f\n\n            # \u5148\u5feb\u901f\u52a0\u8f7d\u6587\u4ef6\u540d\uff0c\u540e\u7eed\u5f02\u6b65\u52a0\u8f7d\u8be6\u7ec6\u4fe1\u606f\n            for logfile in log_files:\n                try:\n                    # \u63d0\u53d6\u65e5\u671f\u4fe1\u606f\n                    date = os.path.basename(logfile).split('_')[1].split('.')[0]\n\n                    # \u83b7\u53d6\u6587\u4ef6\u5927\u5c0f\u4f5c\u4e3a\u5feb\u901f\u6307\u6807\n                    file_size = os.path.getsize(logfile)\n                    size_kb = file_size // 1024\n\n                    # \u521b\u5efa\u663e\u793a\u6587\u672c\uff08\u5148\u663e\u793a\u6587\u4ef6\u5927\u5c0f\uff0c\u907f\u514d\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\uff09\n                    display_text = f\"{date} ({size_kb}KB)\"\n\n                    # \u6dfb\u52a0\u5230\u5217\u8868\u63a7\u4ef6\n                    item = QListWidgetItem(display_text)\n                    item.setData(Qt.UserRole, date)  # \u5b58\u50a8\u65e5\u671f\u4fe1\u606f\n                    item.setData(Qt.UserRole + 1, logfile)  # \u5b58\u50a8\u6587\u4ef6\u8def\u5f84\n\n                    # \u6839\u636e\u6279\u91cf\u6a21\u5f0f\u8bbe\u7f6e\u590d\u9009\u6846\n                    if self.batch_mode:\n                        item.setFlags(item.flags() | Qt.ItemIsUserCheckable)\n                        item.setCheckState(Qt.Unchecked)\n                    else:\n                        item.setFlags(item.flags() &amp; ~Qt.ItemIsUserCheckable)\n\n                    self.listWidget_historyLogs.addItem(item)\n\n                except Exception as e:\n                    print(f\"\u5904\u7406\u6587\u4ef6 {logfile} \u65f6\u51fa\u9519: {e}\")\n\n            # \u5f02\u6b65\u66f4\u65b0\u8be6\u7ec6\u4fe1\u606f\uff08\u884c\u6570\u7edf\u8ba1\uff09\n            QtCore.QTimer.singleShot(100, self.Update_Log_Counts_Async)\n\n        except Exception as e:\n            print(f\"\u52a0\u8f7d\u5386\u53f2\u65e5\u5fd7\u5217\u8868\u65f6\u51fa\u9519: {e}\")\n\n    def Update_Log_Counts_Async(self):\n        \"\"\"\u5f02\u6b65\u66f4\u65b0\u65e5\u5fd7\u884c\u6570\u7edf\u8ba1\"\"\"\n        try:\n            for i in range(self.listWidget_historyLogs.count()):\n                item = self.listWidget_historyLogs.item(i)\n                if item:\n                    logfile = item.data(Qt.UserRole + 1)\n                    date = item.data(Qt.UserRole)\n\n                    try:\n                        # \u4f7f\u7528\u66f4\u9ad8\u6548\u7684\u884c\u6570\u7edf\u8ba1\u65b9\u6cd5\n                        log_count = self.Count_Log_Lines_Fast(logfile)\n\n                        # \u66f4\u65b0\u663e\u793a\u6587\u672c\n                        display_text = f\"{date} ({log_count}\u6761\u65e5\u5fd7)\"\n                        item.setText(display_text)\n\n                        # \u5f3a\u5236\u5237\u65b0UI\n                        QtWidgets.QApplication.processEvents()\n\n                    except Exception as e:\n                        print(f\"\u66f4\u65b0\u6587\u4ef6 {logfile} \u884c\u6570\u65f6\u51fa\u9519: {e}\")\n\n        except Exception as e:\n            print(f\"\u5f02\u6b65\u66f4\u65b0\u65e5\u5fd7\u884c\u6570\u65f6\u51fa\u9519: {e}\")\n\n    def Count_Log_Lines_Fast(self, filepath):\n        \"\"\"\u5feb\u901f\u7edf\u8ba1\u65e5\u5fd7\u6587\u4ef6\u884c\u6570\n\n        Args:\n            filepath (str): \u65e5\u5fd7\u6587\u4ef6\u8def\u5f84\n\n        Returns:\n            int: \u6587\u4ef6\u884c\u6570\n        \"\"\"\n        try:\n            count = 0\n            with open(filepath, 'r', encoding='utf-8') as file:\n                # \u4f7f\u7528\u7f13\u51b2\u8bfb\u53d6\uff0c\u907f\u514d\u4e00\u6b21\u6027\u52a0\u8f7d\u6574\u4e2a\u6587\u4ef6\n                buffer_size = 8192\n                while True:\n                    buffer = file.read(buffer_size)\n                    if not buffer:\n                        break\n                    count += buffer.count('\\n')\n            return count\n        except Exception as e:\n            print(f\"\u7edf\u8ba1\u6587\u4ef6 {filepath} \u884c\u6570\u65f6\u51fa\u9519: {e}\")\n            return 0\n\n    def On_History_Log_Clicked(self, item):\n        \"\"\"\u5904\u7406\u5386\u53f2\u65e5\u5fd7\u5217\u8868\u70b9\u51fb\u4e8b\u4ef6\n\n        Args:\n            item (QListWidgetItem): \u88ab\u70b9\u51fb\u7684\u5217\u8868\u9879\n        \"\"\"\n        try:\n            # \u83b7\u53d6\u5b58\u50a8\u7684\u65e5\u671f\u4fe1\u606f\n            date = item.data(Qt.UserRole)\n            if date:\n                # \u4e34\u65f6\u65ad\u5f00\u65e5\u5386\u4fe1\u53f7\u8fde\u63a5\uff0c\u907f\u514d\u5faa\u73af\u89e6\u53d1\n                self.calendarWidget.selectionChanged.disconnect()\n\n                # \u8bbe\u7f6e\u65e5\u5386\u63a7\u4ef6\u5230\u5bf9\u5e94\u65e5\u671f\n                selected_date = QDate.fromString(date, \"yyyy-MM-dd\")\n                if selected_date.isValid():\n                    self.calendarWidget.setSelectedDate(selected_date)\n\n                # \u91cd\u65b0\u8fde\u63a5\u4fe1\u53f7\n                self.calendarWidget.selectionChanged.connect(\n                    lambda: self.Get_Log_File_By_Date(self.calendarWidget.selectedDate().toString(\"yyyy-MM-dd\"))\n                )\n\n                # \u52a0\u8f7d\u5bf9\u5e94\u65e5\u671f\u7684\u65e5\u5fd7\n                self.Get_Log_File_By_Date(date)\n        except Exception as e:\n            print(f\"\u5904\u7406\u5386\u53f2\u65e5\u5fd7\u70b9\u51fb\u4e8b\u4ef6\u65f6\u51fa\u9519: {e}\")\n\n    def Show_Context_Menu(self, position):\n        \"\"\"\u663e\u793a\u53f3\u952e\u83dc\u5355\n\n        Args:\n            position (QPoint): \u83dc\u5355\u663e\u793a\u4f4d\u7f6e\n        \"\"\"\n        item = self.listWidget_historyLogs.itemAt(position)\n        if item:\n            context_menu = QMenu(self)\n            delete_action = QAction(\"\u5220\u9664\u6b64\u65e5\u5fd7\u6587\u4ef6\", self)\n            delete_action.triggered.connect(lambda: self.Delete_Single_Log(item))\n            context_menu.addAction(delete_action)\n            context_menu.exec_(self.listWidget_historyLogs.mapToGlobal(position))\n\n    def Delete_Single_Log(self, item):\n        \"\"\"\u5220\u9664\u5355\u4e2a\u65e5\u5fd7\u6587\u4ef6\n\n        Args:\n            item (QListWidgetItem): \u8981\u5220\u9664\u7684\u65e5\u5fd7\u6587\u4ef6\u9879\n        \"\"\"\n        try:\n            logfile = item.data(Qt.UserRole + 1)\n            date = item.data(Qt.UserRole)\n\n            # \u786e\u8ba4\u5220\u9664\n            reply = QMessageBox.question(self, '\u786e\u8ba4\u5220\u9664',\n                                       f'\u786e\u5b9a\u8981\u5220\u9664\u65e5\u5fd7\u6587\u4ef6 \"{date}\" \u5417\uff1f\\n\u6b64\u64cd\u4f5c\u4e0d\u53ef\u64a4\u9500\uff01',\n                                       QMessageBox.Yes | QMessageBox.No,\n                                       QMessageBox.No)\n\n            if reply == QMessageBox.Yes:\n                # \u5220\u9664\u6587\u4ef6\n                if os.path.exists(logfile):\n                    os.remove(logfile)\n\n                    # \u4ece\u5217\u8868\u4e2d\u79fb\u9664\n                    row = self.listWidget_historyLogs.row(item)\n                    self.listWidget_historyLogs.takeItem(row)\n\n                    # \u6e05\u7a7a\u5f53\u524d\u663e\u793a\u7684\u65e5\u5fd7\u5185\u5bb9\uff08\u5982\u679c\u5220\u9664\u7684\u662f\u5f53\u524d\u663e\u793a\u7684\u6587\u4ef6\uff09\n                    current_date = self.calendarWidget.selectedDate().toString(\"yyyy-MM-dd\")\n                    if date == current_date:\n                        self.current_log_content = \"\"\n                        self.plainTextEdit_log.clear()\n                        self.Update_Log_Types()\n\n                    # \u4f7f\u7f13\u5b58\u5931\u6548\u5e76\u66f4\u65b0\u65e5\u5386\u663e\u793a\n                    self.Invalidate_Log_Files_Cache()\n                    self.Set_Log_Date()\n\n                    QMessageBox.information(self, '\u5220\u9664\u6210\u529f', f'\u65e5\u5fd7\u6587\u4ef6 \"{date}\" \u5df2\u5220\u9664')\n                else:\n                    QMessageBox.warning(self, '\u5220\u9664\u5931\u8d25', f'\u6587\u4ef6\u4e0d\u5b58\u5728: {logfile}')\n\n        except Exception as e:\n            QMessageBox.critical(self, '\u5220\u9664\u5931\u8d25', f'\u5220\u9664\u6587\u4ef6\u65f6\u51fa\u9519: {str(e)}')\n\n    def Delete_Selected_Logs(self):\n        \"\"\"\u6279\u91cf\u5220\u9664\u9009\u4e2d\u7684\u65e5\u5fd7\u6587\u4ef6\"\"\"\n        try:\n            # \u5728\u6279\u91cf\u6a21\u5f0f\u4e0b\uff0c\u68c0\u67e5\u590d\u9009\u6846\u72b6\u6001\n            selected_items = []\n            for i in range(self.listWidget_historyLogs.count()):\n                item = self.listWidget_historyLogs.item(i)\n                if item.checkState() == Qt.Checked:\n                    selected_items.append(item)\n\n            if not selected_items:\n                QMessageBox.information(self, '\u63d0\u793a', '\u8bf7\u5148\u52fe\u9009\u8981\u5220\u9664\u7684\u65e5\u5fd7\u6587\u4ef6')\n                return\n\n            # \u786e\u8ba4\u5220\u9664\n            file_list = [item.data(Qt.UserRole) for item in selected_items]\n            reply = QMessageBox.question(self, '\u786e\u8ba4\u6279\u91cf\u5220\u9664',\n                                       f'\u786e\u5b9a\u8981\u5220\u9664\u4ee5\u4e0b {len(selected_items)} \u4e2a\u65e5\u5fd7\u6587\u4ef6\u5417\uff1f\\n\\n' +\n                                       '\\n'.join(file_list) +\n                                       '\\n\\n\u6b64\u64cd\u4f5c\u4e0d\u53ef\u64a4\u9500\uff01',\n                                       QMessageBox.Yes | QMessageBox.No,\n                                       QMessageBox.No)\n\n            if reply == QMessageBox.Yes:\n                deleted_count = 0\n                failed_files = []\n                current_date = self.calendarWidget.selectedDate().toString(\"yyyy-MM-dd\")\n                need_clear_display = False\n\n                for item in selected_items:\n                    try:\n                        logfile = item.data(Qt.UserRole + 1)\n                        date = item.data(Qt.UserRole)\n\n                        if os.path.exists(logfile):\n                            os.remove(logfile)\n                            deleted_count += 1\n\n                            # \u68c0\u67e5\u662f\u5426\u9700\u8981\u6e05\u7a7a\u5f53\u524d\u663e\u793a\n                            if date == current_date:\n                                need_clear_display = True\n                        else:\n                            failed_files.append(f'{date} (\u6587\u4ef6\u4e0d\u5b58\u5728)')\n\n                    except Exception as e:\n                        failed_files.append(f'{item.data(Qt.UserRole)} (\u5220\u9664\u5931\u8d25: {str(e)})')\n\n                # \u4f7f\u7f13\u5b58\u5931\u6548\u5e76\u91cd\u65b0\u52a0\u8f7d\u5217\u8868\n                self.Invalidate_Log_Files_Cache()\n                self.Load_History_Log_List()\n\n                # \u6e05\u7a7a\u5f53\u524d\u663e\u793a\uff08\u5982\u679c\u9700\u8981\uff09\n                if need_clear_display:\n                    self.current_log_content = \"\"\n                    self.plainTextEdit_log.clear()\n                    self.Update_Log_Types()\n\n                # \u66f4\u65b0\u65e5\u5386\u663e\u793a\n                self.Set_Log_Date()\n\n                # \u663e\u793a\u7ed3\u679c\n                if failed_files:\n                    QMessageBox.warning(self, '\u6279\u91cf\u5220\u9664\u5b8c\u6210',\n                                       f'\u6210\u529f\u5220\u9664 {deleted_count} \u4e2a\u6587\u4ef6\\n\\n\u5931\u8d25\u7684\u6587\u4ef6:\\n' +\n                                       '\\n'.join(failed_files))\n                else:\n                    QMessageBox.information(self, '\u6279\u91cf\u5220\u9664\u6210\u529f', f'\u6210\u529f\u5220\u9664 {deleted_count} \u4e2a\u65e5\u5fd7\u6587\u4ef6')\n\n        except Exception as e:\n            QMessageBox.critical(self, '\u6279\u91cf\u5220\u9664\u5931\u8d25', f'\u6279\u91cf\u5220\u9664\u65f6\u51fa\u9519: {str(e)}')\n\n    def Enter_Batch_Mode(self):\n        \"\"\"\u8fdb\u5165\u6279\u91cf\u5220\u9664\u6a21\u5f0f\"\"\"\n        self.batch_mode = True\n\n        # \u5207\u6362\u6309\u94ae\u663e\u793a\u72b6\u6001\n        self.pushButton_batchMode.setVisible(False)\n        self.pushButton_deleteSelected.setVisible(True)\n        self.pushButton_cancelBatch.setVisible(True)\n\n        # \u91cd\u65b0\u52a0\u8f7d\u5217\u8868\u4ee5\u663e\u793a\u590d\u9009\u6846\n        self.Load_History_Log_List()\n\n        # \u7981\u7528\u53f3\u952e\u83dc\u5355\u548c\u5355\u51fb\u4e8b\u4ef6\n        self.listWidget_historyLogs.setContextMenuPolicy(Qt.NoContextMenu)\n        self.listWidget_historyLogs.itemClicked.disconnect()\n\n    def Exit_Batch_Mode(self):\n        \"\"\"\u9000\u51fa\u6279\u91cf\u5220\u9664\u6a21\u5f0f\"\"\"\n        self.batch_mode = False\n\n        # \u5207\u6362\u6309\u94ae\u663e\u793a\u72b6\u6001\n        self.pushButton_batchMode.setVisible(True)\n        self.pushButton_deleteSelected.setVisible(False)\n        self.pushButton_cancelBatch.setVisible(False)\n\n        # \u91cd\u65b0\u52a0\u8f7d\u5217\u8868\u4ee5\u9690\u85cf\u590d\u9009\u6846\n        self.Load_History_Log_List()\n\n        # \u6062\u590d\u53f3\u952e\u83dc\u5355\u548c\u5355\u51fb\u4e8b\u4ef6\n        self.listWidget_historyLogs.setContextMenuPolicy(Qt.CustomContextMenu)\n        self.listWidget_historyLogs.itemClicked.connect(self.On_History_Log_Clicked)\n\n    def Delete_Logs_By_Date(self):\n        \"\"\"\u6309\u65e5\u671f\u8303\u56f4\u5220\u9664\u65e5\u5fd7\u6587\u4ef6\"\"\"\n        try:\n            # \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u5929\u6570\n            days, ok = QInputDialog.getInt(self, '\u6309\u65e5\u671f\u5220\u9664\u65e5\u5fd7',\n                                          '\u8bf7\u8f93\u5165\u8981\u5220\u9664\u591a\u5c11\u5929\u524d\u7684\u65e5\u5fd7\u6587\u4ef6\uff1a\\n(\u4f8b\u5982\uff1a\u8f93\u51657\u8868\u793a\u5220\u96647\u5929\u524d\u53ca\u66f4\u65e9\u7684\u65e5\u5fd7)',\n                                          7, 1, 365, 1)\n\n            if not ok:\n                return\n\n            # \u8ba1\u7b97\u622a\u6b62\u65e5\u671f\n            cutoff_date = datetime.now() - timedelta(days=days)\n            cutoff_date_str = cutoff_date.strftime('%Y-%m-%d')\n\n            # \u67e5\u627e\u7b26\u5408\u6761\u4ef6\u7684\u65e5\u5fd7\u6587\u4ef6\n            log_files = self.Get_Log_Files()\n            files_to_delete = []\n\n            for logfile in log_files:\n                try:\n                    # \u4ece\u6587\u4ef6\u540d\u63d0\u53d6\u65e5\u671f\n                    filename = os.path.basename(logfile)\n                    date_str = filename.split('_')[1].split('.')[0]\n                    file_date = datetime.strptime(date_str, '%Y-%m-%d')\n\n                    # \u5982\u679c\u6587\u4ef6\u65e5\u671f\u65e9\u4e8e\u622a\u6b62\u65e5\u671f\uff0c\u52a0\u5165\u5220\u9664\u5217\u8868\n                    if file_date &lt; cutoff_date:\n                        files_to_delete.append((logfile, date_str))\n\n                except Exception as e:\n                    print(f\"\u89e3\u6790\u6587\u4ef6\u65e5\u671f\u65f6\u51fa\u9519 {logfile}: {e}\")\n                    continue\n\n            if not files_to_delete:\n                QMessageBox.information(self, '\u63d0\u793a', f'\u6ca1\u6709\u627e\u5230{days}\u5929\u524d\u7684\u65e5\u5fd7\u6587\u4ef6')\n                return\n\n            # \u786e\u8ba4\u5220\u9664\n            file_list = [date for _, date in files_to_delete]\n            reply = QMessageBox.question(self, '\u786e\u8ba4\u6309\u65e5\u671f\u5220\u9664',\n                                       f'\u627e\u5230 {len(files_to_delete)} \u4e2a{days}\u5929\u524d\u7684\u65e5\u5fd7\u6587\u4ef6\uff1a\\n\\n' +\n                                       '\\n'.join(file_list[:10]) +\n                                       (f'\\n... \u8fd8\u6709{len(file_list)-10}\u4e2a\u6587\u4ef6' if len(file_list) &gt; 10 else '') +\n                                       f'\\n\\n\u786e\u5b9a\u8981\u5220\u9664{cutoff_date_str}\u4e4b\u524d\u7684\u6240\u6709\u65e5\u5fd7\u6587\u4ef6\u5417\uff1f\\n\u6b64\u64cd\u4f5c\u4e0d\u53ef\u64a4\u9500\uff01',\n                                       QMessageBox.Yes | QMessageBox.No,\n                                       QMessageBox.No)\n\n            if reply == QMessageBox.Yes:\n                deleted_count = 0\n                failed_files = []\n                current_date = self.calendarWidget.selectedDate().toString(\"yyyy-MM-dd\")\n                need_clear_display = False\n\n                for logfile, date_str in files_to_delete:\n                    try:\n                        if os.path.exists(logfile):\n                            os.remove(logfile)\n                            deleted_count += 1\n\n                            # \u68c0\u67e5\u662f\u5426\u9700\u8981\u6e05\u7a7a\u5f53\u524d\u663e\u793a\n                            if date_str == current_date:\n                                need_clear_display = True\n                        else:\n                            failed_files.append(f'{date_str} (\u6587\u4ef6\u4e0d\u5b58\u5728)')\n\n                    except Exception as e:\n                        failed_files.append(f'{date_str} (\u5220\u9664\u5931\u8d25: {str(e)})')\n\n                # \u4f7f\u7f13\u5b58\u5931\u6548\u5e76\u91cd\u65b0\u52a0\u8f7d\u5217\u8868\n                self.Invalidate_Log_Files_Cache()\n                self.Load_History_Log_List()\n\n                # \u6e05\u7a7a\u5f53\u524d\u663e\u793a\uff08\u5982\u679c\u9700\u8981\uff09\n                if need_clear_display:\n                    self.current_log_content = \"\"\n                    self.plainTextEdit_log.clear()\n                    self.Update_Log_Types()\n\n                # \u66f4\u65b0\u65e5\u5386\u663e\u793a\n                self.Set_Log_Date()\n\n                # \u663e\u793a\u7ed3\u679c\n                if failed_files:\n                    QMessageBox.warning(self, '\u6309\u65e5\u671f\u5220\u9664\u5b8c\u6210',\n                                       f'\u6210\u529f\u5220\u9664 {deleted_count} \u4e2a\u6587\u4ef6\\n\\n\u5931\u8d25\u7684\u6587\u4ef6:\\n' +\n                                       '\\n'.join(failed_files))\n                else:\n                    QMessageBox.information(self, '\u6309\u65e5\u671f\u5220\u9664\u6210\u529f', f'\u6210\u529f\u5220\u9664 {deleted_count} \u4e2a{days}\u5929\u524d\u7684\u65e5\u5fd7\u6587\u4ef6')\n\n        except Exception as e:\n            QMessageBox.critical(self, '\u6309\u65e5\u671f\u5220\u9664\u5931\u8d25', f'\u6309\u65e5\u671f\u5220\u9664\u65f6\u51fa\u9519: {str(e)}')\n\n    def Set_Button_Styles(self):\n        \"\"\"\u8bbe\u7f6e\u6309\u94ae\u6837\u5f0f\"\"\"\n        # \u6279\u91cf\u6a21\u5f0f\u6309\u94ae\u6837\u5f0f - \u84dd\u8272\u80cc\u666f\n        batch_style = \"\"\"\n            QPushButton {\n                background-color: #3498db;\n                color: white;\n                border: none;\n                padding: 8px 16px;\n                border-radius: 4px;\n                font-weight: bold;\n            }\n            QPushButton:hover {\n                background-color: #2980b9;\n            }\n            QPushButton:pressed {\n                background-color: #21618c;\n            }\n        \"\"\"\n\n        # \u5220\u9664\u9009\u4e2d\u6309\u94ae\u6837\u5f0f - \u7ea2\u8272\u80cc\u666f\n        delete_style = \"\"\"\n            QPushButton {\n                background-color: #e74c3c;\n                color: white;\n                border: none;\n                padding: 8px 16px;\n                border-radius: 4px;\n                font-weight: bold;\n            }\n            QPushButton:hover {\n                background-color: #c0392b;\n            }\n            QPushButton:pressed {\n                background-color: #a93226;\n            }\n        \"\"\"\n\n        # \u53d6\u6d88\u6309\u94ae\u6837\u5f0f - \u7070\u8272\u80cc\u666f\n        cancel_style = \"\"\"\n            QPushButton {\n                background-color: #95a5a6;\n                color: white;\n                border: none;\n                padding: 8px 16px;\n                border-radius: 4px;\n                font-weight: bold;\n            }\n            QPushButton:hover {\n                background-color: #7f8c8d;\n            }\n            QPushButton:pressed {\n                background-color: #6c7b7d;\n            }\n        \"\"\"\n\n        # \u6309\u65f6\u95f4\u5220\u9664\u6309\u94ae\u6837\u5f0f - \u7d2b\u8272\u80cc\u666f\n        date_delete_style = \"\"\"\n            QPushButton {\n                background-color: #9b59b6;\n                color: white;\n                border: none;\n                padding: 8px 16px;\n                border-radius: 4px;\n                font-weight: bold;\n            }\n            QPushButton:hover {\n                background-color: #8e44ad;\n            }\n            QPushButton:pressed {\n                background-color: #7d3c98;\n            }\n        \"\"\"\n\n        # \u5e94\u7528\u6837\u5f0f\n        self.pushButton_deleteSelected.setStyleSheet(delete_style)\n        self.pushButton_batchMode.setStyleSheet(batch_style)\n        self.pushButton_cancelBatch.setStyleSheet(cancel_style)\n        self.pushButton_deleteByDate.setStyleSheet(date_delete_style)\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.Apply_Colors_Simple","title":"<code>Apply_Colors_Simple(content, log_colors)</code>","text":"<p>\u7b80\u5316\u7684\u989c\u8272\u6e32\u67d3\u6a21\u5f0f\uff0c\u7528\u4e8e\u5927\u91cf\u65e5\u5fd7</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>\u65e5\u5fd7\u5185\u5bb9</p> required <code>log_colors</code> <code>dict</code> <p>\u65e5\u5fd7\u7ea7\u522b\u4e0e\u989c\u8272\u7684\u6620\u5c04\u5b57\u5178</p> required Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def Apply_Colors_Simple(self, content, log_colors):\n    \"\"\"\u7b80\u5316\u7684\u989c\u8272\u6e32\u67d3\u6a21\u5f0f\uff0c\u7528\u4e8e\u5927\u91cf\u65e5\u5fd7\n\n    Args:\n        content (str): \u65e5\u5fd7\u5185\u5bb9\n        log_colors (dict): \u65e5\u5fd7\u7ea7\u522b\u4e0e\u989c\u8272\u7684\u6620\u5c04\u5b57\u5178\n    \"\"\"\n    # \u5bf9\u4e8e\u5927\u91cf\u65e5\u5fd7\uff0c\u4f7f\u7528\u7eaf\u6587\u672c\u6a21\u5f0f\u4ee5\u63d0\u9ad8\u6027\u80fd\n    self.plainTextEdit_log.clear()\n    self.plainTextEdit_log.appendPlainText(\"\u65e5\u5fd7\u5185\u5bb9\u8fc7\u591a\uff0c\u4f7f\u7528\u7b80\u5316\u663e\u793a\u6a21\u5f0f...\\n\\n\")\n\n    # \u53ea\u663e\u793a\u524d2000\u884c\u548c\u540e1000\u884c\n    lines = content.split('\\n')\n    if len(lines) &gt; 3000:\n        preview_lines = lines[:2000] + ['\\n... \u7701\u7565\u4e2d\u95f4\u90e8\u5206 ...\\n'] + lines[-1000:]\n    else:\n        preview_lines = lines\n\n    # \u5206\u6279\u663e\u793a\uff0c\u907f\u514d\u4e00\u6b21\u6027\u52a0\u8f7d\u8fc7\u591a\u5185\u5bb9\n    batch_size = 1000\n    for i in range(0, len(preview_lines), batch_size):\n        batch = preview_lines[i:i + batch_size]\n        self.plainTextEdit_log.appendPlainText('\\n'.join(batch))\n        QtWidgets.QApplication.processEvents()\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.Apply_Colors_To_All_Logs","title":"<code>Apply_Colors_To_All_Logs()</code>","text":"<p>\u4e3a\u6240\u6709\u65e5\u5fd7\u5e94\u7528\u989c\u8272</p> Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def Apply_Colors_To_All_Logs(self):\n    \"\"\"\u4e3a\u6240\u6709\u65e5\u5fd7\u5e94\u7528\u989c\u8272\"\"\"\n    self.Apply_Colors_To_Content(self.current_log_content)\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.Apply_Colors_To_Content","title":"<code>Apply_Colors_To_Content(content)</code>","text":"<p>\u4e3a\u6307\u5b9a\u5185\u5bb9\u5e94\u7528\u989c\u8272 - \u4f18\u5316\u7248\u672c</p> <p>Parameters:</p> Name Type Description Default <code>content</code> <code>str</code> <p>\u9700\u8981\u5e94\u7528\u989c\u8272\u7684\u65e5\u5fd7\u5185\u5bb9</p> required Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def Apply_Colors_To_Content(self, content):\n    \"\"\"\u4e3a\u6307\u5b9a\u5185\u5bb9\u5e94\u7528\u989c\u8272 - \u4f18\u5316\u7248\u672c\n\n    Args:\n        content (str): \u9700\u8981\u5e94\u7528\u989c\u8272\u7684\u65e5\u5fd7\u5185\u5bb9\n    \"\"\"\n    # \u5b9a\u4e49\u65e5\u5fd7\u7ea7\u522b\u5bf9\u5e94\u7684\u989c\u8272\n    log_colors = {\n        'ERROR': '#FF0000',      # \u7ea2\u8272\n        'CRITICAL': '#8B0000',   # \u6df1\u7ea2\u8272\n        'WARNING': '#FF8C00',    # \u6a59\u8272\n        'INFO': '#0000FF',       # \u84dd\u8272\n        'DEBUG': '#808080',      # \u7070\u8272\n    }\n\n    lines = content.split('\\n')\n\n    # \u68c0\u67e5\u5185\u5bb9\u5927\u5c0f\uff0c\u5982\u679c\u8fc7\u5927\u5219\u4f7f\u7528\u7b80\u5316\u6e32\u67d3\n    if len(lines) &gt; 5000:  # \u8d85\u8fc75000\u884c\u4f7f\u7528\u7b80\u5316\u6a21\u5f0f\n        self.Apply_Colors_Simple(content, log_colors)\n        return\n\n    # \u6279\u91cf\u6784\u5efaHTML\u5185\u5bb9\uff0c\u907f\u514d\u9891\u7e41\u7684appendHtml\u8c03\u7528\n    html_content = []\n    batch_size = 500  # \u6bcf\u6279\u5904\u7406500\u884c\n\n    for i in range(0, len(lines), batch_size):\n        batch_lines = lines[i:i + batch_size]\n        batch_html = []\n\n        for line in batch_lines:\n            if line.strip():  # \u8df3\u8fc7\u7a7a\u884c\n                # \u68c0\u6d4b\u65e5\u5fd7\u7ea7\u522b\u5e76\u53ea\u5bf9\u7ea7\u522b\u5173\u952e\u8bcd\u5e94\u7528\u989c\u8272\n                colored_line = line\n                for level, color in log_colors.items():\n                    if f' - {level}' in line:\n                        # \u53ea\u5bf9\u65e5\u5fd7\u7ea7\u522b\u5173\u952e\u8bcd\u5e94\u7528\u989c\u8272\uff0c\u5176\u4ed6\u90e8\u5206\u4fdd\u6301\u9ed8\u8ba4\u989c\u8272\n                        colored_line = line.replace(\n                            f' - {level}',\n                            f' - &lt;span style=\"color: {color}\"&gt;{level}&lt;/span&gt;'\n                        )\n                        break\n\n                # HTML\u8f6c\u4e49\u7279\u6b8a\u5b57\u7b26\uff08\u9664\u4e86\u6211\u4eec\u6dfb\u52a0\u7684span\u6807\u7b7e\uff09\n                if '&lt;span style=' not in colored_line:\n                    colored_line = colored_line.replace('&amp;', '&amp;amp;').replace('&lt;', '&amp;lt;').replace('&gt;', '&amp;gt;')\n\n                batch_html.append(colored_line)\n\n        # \u6279\u91cf\u6dfb\u52a0\u5230\u6587\u672c\u6846\n        if batch_html:\n            self.plainTextEdit_log.appendHtml('&lt;br&gt;'.join(batch_html) + '&lt;br&gt;')\n\n        # \u6bcf\u6279\u5904\u7406\u540e\u5237\u65b0UI\uff0c\u4fdd\u6301\u54cd\u5e94\u6027\n        QtWidgets.QApplication.processEvents()\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.Count_Log_Lines_Fast","title":"<code>Count_Log_Lines_Fast(filepath)</code>","text":"<p>\u5feb\u901f\u7edf\u8ba1\u65e5\u5fd7\u6587\u4ef6\u884c\u6570</p> <p>Parameters:</p> Name Type Description Default <code>filepath</code> <code>str</code> <p>\u65e5\u5fd7\u6587\u4ef6\u8def\u5f84</p> required <p>Returns:</p> Name Type Description <code>int</code> <p>\u6587\u4ef6\u884c\u6570</p> Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def Count_Log_Lines_Fast(self, filepath):\n    \"\"\"\u5feb\u901f\u7edf\u8ba1\u65e5\u5fd7\u6587\u4ef6\u884c\u6570\n\n    Args:\n        filepath (str): \u65e5\u5fd7\u6587\u4ef6\u8def\u5f84\n\n    Returns:\n        int: \u6587\u4ef6\u884c\u6570\n    \"\"\"\n    try:\n        count = 0\n        with open(filepath, 'r', encoding='utf-8') as file:\n            # \u4f7f\u7528\u7f13\u51b2\u8bfb\u53d6\uff0c\u907f\u514d\u4e00\u6b21\u6027\u52a0\u8f7d\u6574\u4e2a\u6587\u4ef6\n            buffer_size = 8192\n            while True:\n                buffer = file.read(buffer_size)\n                if not buffer:\n                    break\n                count += buffer.count('\\n')\n        return count\n    except Exception as e:\n        print(f\"\u7edf\u8ba1\u6587\u4ef6 {filepath} \u884c\u6570\u65f6\u51fa\u9519: {e}\")\n        return 0\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.Delete_Logs_By_Date","title":"<code>Delete_Logs_By_Date()</code>","text":"<p>\u6309\u65e5\u671f\u8303\u56f4\u5220\u9664\u65e5\u5fd7\u6587\u4ef6</p> Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def Delete_Logs_By_Date(self):\n    \"\"\"\u6309\u65e5\u671f\u8303\u56f4\u5220\u9664\u65e5\u5fd7\u6587\u4ef6\"\"\"\n    try:\n        # \u83b7\u53d6\u7528\u6237\u8f93\u5165\u7684\u5929\u6570\n        days, ok = QInputDialog.getInt(self, '\u6309\u65e5\u671f\u5220\u9664\u65e5\u5fd7',\n                                      '\u8bf7\u8f93\u5165\u8981\u5220\u9664\u591a\u5c11\u5929\u524d\u7684\u65e5\u5fd7\u6587\u4ef6\uff1a\\n(\u4f8b\u5982\uff1a\u8f93\u51657\u8868\u793a\u5220\u96647\u5929\u524d\u53ca\u66f4\u65e9\u7684\u65e5\u5fd7)',\n                                      7, 1, 365, 1)\n\n        if not ok:\n            return\n\n        # \u8ba1\u7b97\u622a\u6b62\u65e5\u671f\n        cutoff_date = datetime.now() - timedelta(days=days)\n        cutoff_date_str = cutoff_date.strftime('%Y-%m-%d')\n\n        # \u67e5\u627e\u7b26\u5408\u6761\u4ef6\u7684\u65e5\u5fd7\u6587\u4ef6\n        log_files = self.Get_Log_Files()\n        files_to_delete = []\n\n        for logfile in log_files:\n            try:\n                # \u4ece\u6587\u4ef6\u540d\u63d0\u53d6\u65e5\u671f\n                filename = os.path.basename(logfile)\n                date_str = filename.split('_')[1].split('.')[0]\n                file_date = datetime.strptime(date_str, '%Y-%m-%d')\n\n                # \u5982\u679c\u6587\u4ef6\u65e5\u671f\u65e9\u4e8e\u622a\u6b62\u65e5\u671f\uff0c\u52a0\u5165\u5220\u9664\u5217\u8868\n                if file_date &lt; cutoff_date:\n                    files_to_delete.append((logfile, date_str))\n\n            except Exception as e:\n                print(f\"\u89e3\u6790\u6587\u4ef6\u65e5\u671f\u65f6\u51fa\u9519 {logfile}: {e}\")\n                continue\n\n        if not files_to_delete:\n            QMessageBox.information(self, '\u63d0\u793a', f'\u6ca1\u6709\u627e\u5230{days}\u5929\u524d\u7684\u65e5\u5fd7\u6587\u4ef6')\n            return\n\n        # \u786e\u8ba4\u5220\u9664\n        file_list = [date for _, date in files_to_delete]\n        reply = QMessageBox.question(self, '\u786e\u8ba4\u6309\u65e5\u671f\u5220\u9664',\n                                   f'\u627e\u5230 {len(files_to_delete)} \u4e2a{days}\u5929\u524d\u7684\u65e5\u5fd7\u6587\u4ef6\uff1a\\n\\n' +\n                                   '\\n'.join(file_list[:10]) +\n                                   (f'\\n... \u8fd8\u6709{len(file_list)-10}\u4e2a\u6587\u4ef6' if len(file_list) &gt; 10 else '') +\n                                   f'\\n\\n\u786e\u5b9a\u8981\u5220\u9664{cutoff_date_str}\u4e4b\u524d\u7684\u6240\u6709\u65e5\u5fd7\u6587\u4ef6\u5417\uff1f\\n\u6b64\u64cd\u4f5c\u4e0d\u53ef\u64a4\u9500\uff01',\n                                   QMessageBox.Yes | QMessageBox.No,\n                                   QMessageBox.No)\n\n        if reply == QMessageBox.Yes:\n            deleted_count = 0\n            failed_files = []\n            current_date = self.calendarWidget.selectedDate().toString(\"yyyy-MM-dd\")\n            need_clear_display = False\n\n            for logfile, date_str in files_to_delete:\n                try:\n                    if os.path.exists(logfile):\n                        os.remove(logfile)\n                        deleted_count += 1\n\n                        # \u68c0\u67e5\u662f\u5426\u9700\u8981\u6e05\u7a7a\u5f53\u524d\u663e\u793a\n                        if date_str == current_date:\n                            need_clear_display = True\n                    else:\n                        failed_files.append(f'{date_str} (\u6587\u4ef6\u4e0d\u5b58\u5728)')\n\n                except Exception as e:\n                    failed_files.append(f'{date_str} (\u5220\u9664\u5931\u8d25: {str(e)})')\n\n            # \u4f7f\u7f13\u5b58\u5931\u6548\u5e76\u91cd\u65b0\u52a0\u8f7d\u5217\u8868\n            self.Invalidate_Log_Files_Cache()\n            self.Load_History_Log_List()\n\n            # \u6e05\u7a7a\u5f53\u524d\u663e\u793a\uff08\u5982\u679c\u9700\u8981\uff09\n            if need_clear_display:\n                self.current_log_content = \"\"\n                self.plainTextEdit_log.clear()\n                self.Update_Log_Types()\n\n            # \u66f4\u65b0\u65e5\u5386\u663e\u793a\n            self.Set_Log_Date()\n\n            # \u663e\u793a\u7ed3\u679c\n            if failed_files:\n                QMessageBox.warning(self, '\u6309\u65e5\u671f\u5220\u9664\u5b8c\u6210',\n                                   f'\u6210\u529f\u5220\u9664 {deleted_count} \u4e2a\u6587\u4ef6\\n\\n\u5931\u8d25\u7684\u6587\u4ef6:\\n' +\n                                   '\\n'.join(failed_files))\n            else:\n                QMessageBox.information(self, '\u6309\u65e5\u671f\u5220\u9664\u6210\u529f', f'\u6210\u529f\u5220\u9664 {deleted_count} \u4e2a{days}\u5929\u524d\u7684\u65e5\u5fd7\u6587\u4ef6')\n\n    except Exception as e:\n        QMessageBox.critical(self, '\u6309\u65e5\u671f\u5220\u9664\u5931\u8d25', f'\u6309\u65e5\u671f\u5220\u9664\u65f6\u51fa\u9519: {str(e)}')\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.Delete_Selected_Logs","title":"<code>Delete_Selected_Logs()</code>","text":"<p>\u6279\u91cf\u5220\u9664\u9009\u4e2d\u7684\u65e5\u5fd7\u6587\u4ef6</p> Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def Delete_Selected_Logs(self):\n    \"\"\"\u6279\u91cf\u5220\u9664\u9009\u4e2d\u7684\u65e5\u5fd7\u6587\u4ef6\"\"\"\n    try:\n        # \u5728\u6279\u91cf\u6a21\u5f0f\u4e0b\uff0c\u68c0\u67e5\u590d\u9009\u6846\u72b6\u6001\n        selected_items = []\n        for i in range(self.listWidget_historyLogs.count()):\n            item = self.listWidget_historyLogs.item(i)\n            if item.checkState() == Qt.Checked:\n                selected_items.append(item)\n\n        if not selected_items:\n            QMessageBox.information(self, '\u63d0\u793a', '\u8bf7\u5148\u52fe\u9009\u8981\u5220\u9664\u7684\u65e5\u5fd7\u6587\u4ef6')\n            return\n\n        # \u786e\u8ba4\u5220\u9664\n        file_list = [item.data(Qt.UserRole) for item in selected_items]\n        reply = QMessageBox.question(self, '\u786e\u8ba4\u6279\u91cf\u5220\u9664',\n                                   f'\u786e\u5b9a\u8981\u5220\u9664\u4ee5\u4e0b {len(selected_items)} \u4e2a\u65e5\u5fd7\u6587\u4ef6\u5417\uff1f\\n\\n' +\n                                   '\\n'.join(file_list) +\n                                   '\\n\\n\u6b64\u64cd\u4f5c\u4e0d\u53ef\u64a4\u9500\uff01',\n                                   QMessageBox.Yes | QMessageBox.No,\n                                   QMessageBox.No)\n\n        if reply == QMessageBox.Yes:\n            deleted_count = 0\n            failed_files = []\n            current_date = self.calendarWidget.selectedDate().toString(\"yyyy-MM-dd\")\n            need_clear_display = False\n\n            for item in selected_items:\n                try:\n                    logfile = item.data(Qt.UserRole + 1)\n                    date = item.data(Qt.UserRole)\n\n                    if os.path.exists(logfile):\n                        os.remove(logfile)\n                        deleted_count += 1\n\n                        # \u68c0\u67e5\u662f\u5426\u9700\u8981\u6e05\u7a7a\u5f53\u524d\u663e\u793a\n                        if date == current_date:\n                            need_clear_display = True\n                    else:\n                        failed_files.append(f'{date} (\u6587\u4ef6\u4e0d\u5b58\u5728)')\n\n                except Exception as e:\n                    failed_files.append(f'{item.data(Qt.UserRole)} (\u5220\u9664\u5931\u8d25: {str(e)})')\n\n            # \u4f7f\u7f13\u5b58\u5931\u6548\u5e76\u91cd\u65b0\u52a0\u8f7d\u5217\u8868\n            self.Invalidate_Log_Files_Cache()\n            self.Load_History_Log_List()\n\n            # \u6e05\u7a7a\u5f53\u524d\u663e\u793a\uff08\u5982\u679c\u9700\u8981\uff09\n            if need_clear_display:\n                self.current_log_content = \"\"\n                self.plainTextEdit_log.clear()\n                self.Update_Log_Types()\n\n            # \u66f4\u65b0\u65e5\u5386\u663e\u793a\n            self.Set_Log_Date()\n\n            # \u663e\u793a\u7ed3\u679c\n            if failed_files:\n                QMessageBox.warning(self, '\u6279\u91cf\u5220\u9664\u5b8c\u6210',\n                                   f'\u6210\u529f\u5220\u9664 {deleted_count} \u4e2a\u6587\u4ef6\\n\\n\u5931\u8d25\u7684\u6587\u4ef6:\\n' +\n                                   '\\n'.join(failed_files))\n            else:\n                QMessageBox.information(self, '\u6279\u91cf\u5220\u9664\u6210\u529f', f'\u6210\u529f\u5220\u9664 {deleted_count} \u4e2a\u65e5\u5fd7\u6587\u4ef6')\n\n    except Exception as e:\n        QMessageBox.critical(self, '\u6279\u91cf\u5220\u9664\u5931\u8d25', f'\u6279\u91cf\u5220\u9664\u65f6\u51fa\u9519: {str(e)}')\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.Delete_Single_Log","title":"<code>Delete_Single_Log(item)</code>","text":"<p>\u5220\u9664\u5355\u4e2a\u65e5\u5fd7\u6587\u4ef6</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>QListWidgetItem</code> <p>\u8981\u5220\u9664\u7684\u65e5\u5fd7\u6587\u4ef6\u9879</p> required Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def Delete_Single_Log(self, item):\n    \"\"\"\u5220\u9664\u5355\u4e2a\u65e5\u5fd7\u6587\u4ef6\n\n    Args:\n        item (QListWidgetItem): \u8981\u5220\u9664\u7684\u65e5\u5fd7\u6587\u4ef6\u9879\n    \"\"\"\n    try:\n        logfile = item.data(Qt.UserRole + 1)\n        date = item.data(Qt.UserRole)\n\n        # \u786e\u8ba4\u5220\u9664\n        reply = QMessageBox.question(self, '\u786e\u8ba4\u5220\u9664',\n                                   f'\u786e\u5b9a\u8981\u5220\u9664\u65e5\u5fd7\u6587\u4ef6 \"{date}\" \u5417\uff1f\\n\u6b64\u64cd\u4f5c\u4e0d\u53ef\u64a4\u9500\uff01',\n                                   QMessageBox.Yes | QMessageBox.No,\n                                   QMessageBox.No)\n\n        if reply == QMessageBox.Yes:\n            # \u5220\u9664\u6587\u4ef6\n            if os.path.exists(logfile):\n                os.remove(logfile)\n\n                # \u4ece\u5217\u8868\u4e2d\u79fb\u9664\n                row = self.listWidget_historyLogs.row(item)\n                self.listWidget_historyLogs.takeItem(row)\n\n                # \u6e05\u7a7a\u5f53\u524d\u663e\u793a\u7684\u65e5\u5fd7\u5185\u5bb9\uff08\u5982\u679c\u5220\u9664\u7684\u662f\u5f53\u524d\u663e\u793a\u7684\u6587\u4ef6\uff09\n                current_date = self.calendarWidget.selectedDate().toString(\"yyyy-MM-dd\")\n                if date == current_date:\n                    self.current_log_content = \"\"\n                    self.plainTextEdit_log.clear()\n                    self.Update_Log_Types()\n\n                # \u4f7f\u7f13\u5b58\u5931\u6548\u5e76\u66f4\u65b0\u65e5\u5386\u663e\u793a\n                self.Invalidate_Log_Files_Cache()\n                self.Set_Log_Date()\n\n                QMessageBox.information(self, '\u5220\u9664\u6210\u529f', f'\u65e5\u5fd7\u6587\u4ef6 \"{date}\" \u5df2\u5220\u9664')\n            else:\n                QMessageBox.warning(self, '\u5220\u9664\u5931\u8d25', f'\u6587\u4ef6\u4e0d\u5b58\u5728: {logfile}')\n\n    except Exception as e:\n        QMessageBox.critical(self, '\u5220\u9664\u5931\u8d25', f'\u5220\u9664\u6587\u4ef6\u65f6\u51fa\u9519: {str(e)}')\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.Enter_Batch_Mode","title":"<code>Enter_Batch_Mode()</code>","text":"<p>\u8fdb\u5165\u6279\u91cf\u5220\u9664\u6a21\u5f0f</p> Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def Enter_Batch_Mode(self):\n    \"\"\"\u8fdb\u5165\u6279\u91cf\u5220\u9664\u6a21\u5f0f\"\"\"\n    self.batch_mode = True\n\n    # \u5207\u6362\u6309\u94ae\u663e\u793a\u72b6\u6001\n    self.pushButton_batchMode.setVisible(False)\n    self.pushButton_deleteSelected.setVisible(True)\n    self.pushButton_cancelBatch.setVisible(True)\n\n    # \u91cd\u65b0\u52a0\u8f7d\u5217\u8868\u4ee5\u663e\u793a\u590d\u9009\u6846\n    self.Load_History_Log_List()\n\n    # \u7981\u7528\u53f3\u952e\u83dc\u5355\u548c\u5355\u51fb\u4e8b\u4ef6\n    self.listWidget_historyLogs.setContextMenuPolicy(Qt.NoContextMenu)\n    self.listWidget_historyLogs.itemClicked.disconnect()\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.Exit_Batch_Mode","title":"<code>Exit_Batch_Mode()</code>","text":"<p>\u9000\u51fa\u6279\u91cf\u5220\u9664\u6a21\u5f0f</p> Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def Exit_Batch_Mode(self):\n    \"\"\"\u9000\u51fa\u6279\u91cf\u5220\u9664\u6a21\u5f0f\"\"\"\n    self.batch_mode = False\n\n    # \u5207\u6362\u6309\u94ae\u663e\u793a\u72b6\u6001\n    self.pushButton_batchMode.setVisible(True)\n    self.pushButton_deleteSelected.setVisible(False)\n    self.pushButton_cancelBatch.setVisible(False)\n\n    # \u91cd\u65b0\u52a0\u8f7d\u5217\u8868\u4ee5\u9690\u85cf\u590d\u9009\u6846\n    self.Load_History_Log_List()\n\n    # \u6062\u590d\u53f3\u952e\u83dc\u5355\u548c\u5355\u51fb\u4e8b\u4ef6\n    self.listWidget_historyLogs.setContextMenuPolicy(Qt.CustomContextMenu)\n    self.listWidget_historyLogs.itemClicked.connect(self.On_History_Log_Clicked)\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.Filter_Log_By_Type","title":"<code>Filter_Log_By_Type(log_type)</code>","text":"<p>\u6839\u636e\u65e5\u5fd7\u7c7b\u578b\u8fc7\u6ee4\u65e5\u5fd7\u5185\u5bb9\u5e76\u5e94\u7528\u989c\u8272</p> <p>Parameters:</p> Name Type Description Default <code>log_type</code> <code>str</code> <p>\u65e5\u5fd7\u7c7b\u578b\uff0c\u5982\"ERROR\", \"INFO\"\u7b49</p> required Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def Filter_Log_By_Type(self, log_type):\n    \"\"\"\u6839\u636e\u65e5\u5fd7\u7c7b\u578b\u8fc7\u6ee4\u65e5\u5fd7\u5185\u5bb9\u5e76\u5e94\u7528\u989c\u8272\n\n    Args:\n        log_type (str): \u65e5\u5fd7\u7c7b\u578b\uff0c\u5982\"ERROR\", \"INFO\"\u7b49\n    \"\"\"\n    if not self.current_log_content:\n        return\n\n    self.plainTextEdit_log.clear()\n\n    if log_type == \"\u5168\u90e8\":\n        # \u663e\u793a\u6240\u6709\u65e5\u5fd7\u5e76\u5e94\u7528\u989c\u8272\n        self.Apply_Colors_To_All_Logs()\n    else:\n        # \u6309\u7c7b\u578b\u8fc7\u6ee4\u65e5\u5fd7\u5e76\u5e94\u7528\u989c\u8272\n        lines = self.current_log_content.split('\\n')\n        filtered_lines = []\n\n        for line in lines:\n            if log_type in line:\n                filtered_lines.append(line)\n\n        filtered_content = '\\n'.join(filtered_lines)\n        self.Apply_Colors_To_Content(filtered_content)\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.Get_Log_File_By_Date","title":"<code>Get_Log_File_By_Date(date)</code>","text":"<p>\u6839\u636e\u65e5\u671f\u83b7\u53d6\u5e76\u663e\u793a\u5bf9\u5e94\u7684\u65e5\u5fd7\u6587\u4ef6\u5185\u5bb9</p> <p>Parameters:</p> Name Type Description Default <code>date</code> <code>str</code> <p>\u65e5\u671f\u5b57\u7b26\u4e32\uff0c\u683c\u5f0f\u4e3a'yyyy-MM-dd'</p> required Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def Get_Log_File_By_Date(self, date):\n    \"\"\"\u6839\u636e\u65e5\u671f\u83b7\u53d6\u5e76\u663e\u793a\u5bf9\u5e94\u7684\u65e5\u5fd7\u6587\u4ef6\u5185\u5bb9\n\n    Args:\n        date (str): \u65e5\u671f\u5b57\u7b26\u4e32\uff0c\u683c\u5f0f\u4e3a'yyyy-MM-dd'\n    \"\"\"\n    log_files = self.Get_Log_Files()\n    for logfile in log_files:\n        if date in logfile:\n            with open(logfile, 'r', encoding='utf-8') as file:\n                self.current_log_content = file.read()\n                self.Update_Log_Types()  # \u52a8\u6001\u66f4\u65b0\u65e5\u5fd7\u7c7b\u578b\n                self.Filter_Log_By_Type(self.comboBox_logType.currentText())\n            return\n    # \u5982\u679c\u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u65e5\u671f\u7684\u65e5\u5fd7\u6587\u4ef6\uff0c\u6e05\u7a7a\u663e\u793a\n    self.current_log_content = \"\"\n    self.plainTextEdit_log.clear()\n    self.Update_Log_Types()  # \u6e05\u7a7a\u65e5\u5fd7\u7c7b\u578b\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.Get_Log_Files","title":"<code>Get_Log_Files(force_refresh=False)</code>","text":"<p>\u83b7\u53d6\u65e5\u5fd7\u6587\u4ef6\u5217\u8868\uff0c\u5e26\u7f13\u5b58\u673a\u5236</p> <p>Parameters:</p> Name Type Description Default <code>force_refresh</code> <code>bool</code> <p>\u662f\u5426\u5f3a\u5236\u5237\u65b0\u7f13\u5b58\uff0c\u9ed8\u8ba4\u4e3aFalse</p> <code>False</code> <p>Returns:</p> Name Type Description <code>list</code> <p>\u65e5\u5fd7\u6587\u4ef6\u8def\u5f84\u5217\u8868</p> Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def Get_Log_Files(self, force_refresh=False):\n    \"\"\"\u83b7\u53d6\u65e5\u5fd7\u6587\u4ef6\u5217\u8868\uff0c\u5e26\u7f13\u5b58\u673a\u5236\n\n    Args:\n        force_refresh (bool): \u662f\u5426\u5f3a\u5236\u5237\u65b0\u7f13\u5b58\uff0c\u9ed8\u8ba4\u4e3aFalse\n\n    Returns:\n        list: \u65e5\u5fd7\u6587\u4ef6\u8def\u5f84\u5217\u8868\n    \"\"\"\n    current_time = datetime.now().timestamp()\n\n    # \u5982\u679c\u7f13\u5b58\u5b58\u5728\u4e14\u672a\u8fc7\u671f\uff085\u79d2\u5185\uff09\uff0c\u76f4\u63a5\u8fd4\u56de\u7f13\u5b58\n    if (not force_refresh and\n        self._log_files_cache is not None and\n        current_time - self._cache_timestamp &lt; 5):\n        return self._log_files_cache\n\n    # \u91cd\u65b0\u83b7\u53d6\u6587\u4ef6\u5217\u8868\u5e76\u66f4\u65b0\u7f13\u5b58\n    self._log_files_cache = glob.glob(os.path.join(LOG_FILES, \"*.log\"))\n    self._cache_timestamp = current_time\n    return self._log_files_cache\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.InitUI","title":"<code>InitUI()</code>","text":"<p>\u521d\u59cb\u5316\u7528\u6237\u754c\u9762</p> Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def InitUI(self):\n    \"\"\"\u521d\u59cb\u5316\u7528\u6237\u754c\u9762\"\"\"\n    self.setWindowTitle('\u5386\u53f2\u65e5\u5fd7')\n    strdate = datetime.now().strftime('%Y-%m-%d')\n    self.current_log_content = \"\"  # \u5b58\u50a8\u5f53\u524d\u5b8c\u6574\u65e5\u5fd7\u5185\u5bb9\n    self.batch_mode = False  # \u6279\u91cf\u5220\u9664\u6a21\u5f0f\u6807\u5fd7\n\n    # \u8bbe\u7f6e\u5217\u8868\u63a7\u4ef6\u652f\u6301\u591a\u9009\n    self.listWidget_historyLogs.setSelectionMode(QAbstractItemView.ExtendedSelection)\n\n    # \u8bbe\u7f6e\u53f3\u952e\u83dc\u5355\n    self.listWidget_historyLogs.setContextMenuPolicy(Qt.CustomContextMenu)\n    self.listWidget_historyLogs.customContextMenuRequested.connect(self.Show_Context_Menu)\n\n    self.Get_Log_File_By_Date(strdate)\n    self.Set_Log_Date()\n    self.calendarWidget.selectionChanged.connect(\n        lambda: self.Get_Log_File_By_Date(self.calendarWidget.selectedDate().toString(\"yyyy-MM-dd\"))\n    )\n    self.comboBox_logType.currentTextChanged.connect(self.Filter_Log_By_Type)\n    self.listWidget_historyLogs.itemClicked.connect(self.On_History_Log_Clicked)\n\n    # \u8fde\u63a5\u6309\u94ae\u4e8b\u4ef6\n    self.pushButton_batchMode.clicked.connect(self.Enter_Batch_Mode)\n    self.pushButton_deleteSelected.clicked.connect(self.Delete_Selected_Logs)\n    self.pushButton_cancelBatch.clicked.connect(self.Exit_Batch_Mode)\n    self.pushButton_deleteByDate.clicked.connect(self.Delete_Logs_By_Date)\n\n    # \u8bbe\u7f6e\u6309\u94ae\u6837\u5f0f\n    self.Set_Button_Styles()\n\n    self.Load_History_Log_List()\n    # \u8bbe\u7f6e\u5e94\u7528\u56fe\u6807\n    try:\n        icon_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))),\n                                    \"assets\", \"icon\", \"\u6587\u4ef6\u6587\u6863.svg\")\n        if os.path.exists(icon_path):\n            self.setWindowIcon(QIcon(icon_path))\n    except Exception as e:\n        print(f\"\u8bbe\u7f6e\u56fe\u6807\u5931\u8d25: {e}\")\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.Invalidate_Log_Files_Cache","title":"<code>Invalidate_Log_Files_Cache()</code>","text":"<p>\u4f7f\u65e5\u5fd7\u6587\u4ef6\u7f13\u5b58\u5931\u6548</p> Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def Invalidate_Log_Files_Cache(self):\n    \"\"\"\u4f7f\u65e5\u5fd7\u6587\u4ef6\u7f13\u5b58\u5931\u6548\"\"\"\n    self._log_files_cache = None\n    self._cache_timestamp = 0\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.Load_History_Log_List","title":"<code>Load_History_Log_List()</code>","text":"<p>\u52a0\u8f7d\u5386\u53f2\u65e5\u5fd7\u6587\u4ef6\u5217\u8868 - \u4f18\u5316\u7248\u672c</p> Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def Load_History_Log_List(self):\n    \"\"\"\u52a0\u8f7d\u5386\u53f2\u65e5\u5fd7\u6587\u4ef6\u5217\u8868 - \u4f18\u5316\u7248\u672c\"\"\"\n    try:\n        self.listWidget_historyLogs.clear()\n        log_files = self.Get_Log_Files()\n        log_files.sort()  # \u6309\u6587\u4ef6\u540d\u6392\u5e8f\n\n        # \u5148\u5feb\u901f\u52a0\u8f7d\u6587\u4ef6\u540d\uff0c\u540e\u7eed\u5f02\u6b65\u52a0\u8f7d\u8be6\u7ec6\u4fe1\u606f\n        for logfile in log_files:\n            try:\n                # \u63d0\u53d6\u65e5\u671f\u4fe1\u606f\n                date = os.path.basename(logfile).split('_')[1].split('.')[0]\n\n                # \u83b7\u53d6\u6587\u4ef6\u5927\u5c0f\u4f5c\u4e3a\u5feb\u901f\u6307\u6807\n                file_size = os.path.getsize(logfile)\n                size_kb = file_size // 1024\n\n                # \u521b\u5efa\u663e\u793a\u6587\u672c\uff08\u5148\u663e\u793a\u6587\u4ef6\u5927\u5c0f\uff0c\u907f\u514d\u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\uff09\n                display_text = f\"{date} ({size_kb}KB)\"\n\n                # \u6dfb\u52a0\u5230\u5217\u8868\u63a7\u4ef6\n                item = QListWidgetItem(display_text)\n                item.setData(Qt.UserRole, date)  # \u5b58\u50a8\u65e5\u671f\u4fe1\u606f\n                item.setData(Qt.UserRole + 1, logfile)  # \u5b58\u50a8\u6587\u4ef6\u8def\u5f84\n\n                # \u6839\u636e\u6279\u91cf\u6a21\u5f0f\u8bbe\u7f6e\u590d\u9009\u6846\n                if self.batch_mode:\n                    item.setFlags(item.flags() | Qt.ItemIsUserCheckable)\n                    item.setCheckState(Qt.Unchecked)\n                else:\n                    item.setFlags(item.flags() &amp; ~Qt.ItemIsUserCheckable)\n\n                self.listWidget_historyLogs.addItem(item)\n\n            except Exception as e:\n                print(f\"\u5904\u7406\u6587\u4ef6 {logfile} \u65f6\u51fa\u9519: {e}\")\n\n        # \u5f02\u6b65\u66f4\u65b0\u8be6\u7ec6\u4fe1\u606f\uff08\u884c\u6570\u7edf\u8ba1\uff09\n        QtCore.QTimer.singleShot(100, self.Update_Log_Counts_Async)\n\n    except Exception as e:\n        print(f\"\u52a0\u8f7d\u5386\u53f2\u65e5\u5fd7\u5217\u8868\u65f6\u51fa\u9519: {e}\")\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.On_History_Log_Clicked","title":"<code>On_History_Log_Clicked(item)</code>","text":"<p>\u5904\u7406\u5386\u53f2\u65e5\u5fd7\u5217\u8868\u70b9\u51fb\u4e8b\u4ef6</p> <p>Parameters:</p> Name Type Description Default <code>item</code> <code>QListWidgetItem</code> <p>\u88ab\u70b9\u51fb\u7684\u5217\u8868\u9879</p> required Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def On_History_Log_Clicked(self, item):\n    \"\"\"\u5904\u7406\u5386\u53f2\u65e5\u5fd7\u5217\u8868\u70b9\u51fb\u4e8b\u4ef6\n\n    Args:\n        item (QListWidgetItem): \u88ab\u70b9\u51fb\u7684\u5217\u8868\u9879\n    \"\"\"\n    try:\n        # \u83b7\u53d6\u5b58\u50a8\u7684\u65e5\u671f\u4fe1\u606f\n        date = item.data(Qt.UserRole)\n        if date:\n            # \u4e34\u65f6\u65ad\u5f00\u65e5\u5386\u4fe1\u53f7\u8fde\u63a5\uff0c\u907f\u514d\u5faa\u73af\u89e6\u53d1\n            self.calendarWidget.selectionChanged.disconnect()\n\n            # \u8bbe\u7f6e\u65e5\u5386\u63a7\u4ef6\u5230\u5bf9\u5e94\u65e5\u671f\n            selected_date = QDate.fromString(date, \"yyyy-MM-dd\")\n            if selected_date.isValid():\n                self.calendarWidget.setSelectedDate(selected_date)\n\n            # \u91cd\u65b0\u8fde\u63a5\u4fe1\u53f7\n            self.calendarWidget.selectionChanged.connect(\n                lambda: self.Get_Log_File_By_Date(self.calendarWidget.selectedDate().toString(\"yyyy-MM-dd\"))\n            )\n\n            # \u52a0\u8f7d\u5bf9\u5e94\u65e5\u671f\u7684\u65e5\u5fd7\n            self.Get_Log_File_By_Date(date)\n    except Exception as e:\n        print(f\"\u5904\u7406\u5386\u53f2\u65e5\u5fd7\u70b9\u51fb\u4e8b\u4ef6\u65f6\u51fa\u9519: {e}\")\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.Set_Button_Styles","title":"<code>Set_Button_Styles()</code>","text":"<p>\u8bbe\u7f6e\u6309\u94ae\u6837\u5f0f</p> Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def Set_Button_Styles(self):\n    \"\"\"\u8bbe\u7f6e\u6309\u94ae\u6837\u5f0f\"\"\"\n    # \u6279\u91cf\u6a21\u5f0f\u6309\u94ae\u6837\u5f0f - \u84dd\u8272\u80cc\u666f\n    batch_style = \"\"\"\n        QPushButton {\n            background-color: #3498db;\n            color: white;\n            border: none;\n            padding: 8px 16px;\n            border-radius: 4px;\n            font-weight: bold;\n        }\n        QPushButton:hover {\n            background-color: #2980b9;\n        }\n        QPushButton:pressed {\n            background-color: #21618c;\n        }\n    \"\"\"\n\n    # \u5220\u9664\u9009\u4e2d\u6309\u94ae\u6837\u5f0f - \u7ea2\u8272\u80cc\u666f\n    delete_style = \"\"\"\n        QPushButton {\n            background-color: #e74c3c;\n            color: white;\n            border: none;\n            padding: 8px 16px;\n            border-radius: 4px;\n            font-weight: bold;\n        }\n        QPushButton:hover {\n            background-color: #c0392b;\n        }\n        QPushButton:pressed {\n            background-color: #a93226;\n        }\n    \"\"\"\n\n    # \u53d6\u6d88\u6309\u94ae\u6837\u5f0f - \u7070\u8272\u80cc\u666f\n    cancel_style = \"\"\"\n        QPushButton {\n            background-color: #95a5a6;\n            color: white;\n            border: none;\n            padding: 8px 16px;\n            border-radius: 4px;\n            font-weight: bold;\n        }\n        QPushButton:hover {\n            background-color: #7f8c8d;\n        }\n        QPushButton:pressed {\n            background-color: #6c7b7d;\n        }\n    \"\"\"\n\n    # \u6309\u65f6\u95f4\u5220\u9664\u6309\u94ae\u6837\u5f0f - \u7d2b\u8272\u80cc\u666f\n    date_delete_style = \"\"\"\n        QPushButton {\n            background-color: #9b59b6;\n            color: white;\n            border: none;\n            padding: 8px 16px;\n            border-radius: 4px;\n            font-weight: bold;\n        }\n        QPushButton:hover {\n            background-color: #8e44ad;\n        }\n        QPushButton:pressed {\n            background-color: #7d3c98;\n        }\n    \"\"\"\n\n    # \u5e94\u7528\u6837\u5f0f\n    self.pushButton_deleteSelected.setStyleSheet(delete_style)\n    self.pushButton_batchMode.setStyleSheet(batch_style)\n    self.pushButton_cancelBatch.setStyleSheet(cancel_style)\n    self.pushButton_deleteByDate.setStyleSheet(date_delete_style)\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.Set_Log_Date","title":"<code>Set_Log_Date()</code>","text":"<p>\u5728\u65e5\u5386\u63a7\u4ef6\u4e2d\u9ad8\u4eae\u663e\u793a\u6709\u65e5\u5fd7\u6587\u4ef6\u7684\u65e5\u671f</p> Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def Set_Log_Date(self):\n    \"\"\"\u5728\u65e5\u5386\u63a7\u4ef6\u4e2d\u9ad8\u4eae\u663e\u793a\u6709\u65e5\u5fd7\u6587\u4ef6\u7684\u65e5\u671f\"\"\"\n    log_files = self.Get_Log_Files()\n    for logfile in log_files:\n        date = os.path.basename(logfile)\n        date = date.split('_')[1].split('.')[0]\n        date = datetime.strptime(date, '%Y-%m-%d').date()\n        format = QTextCharFormat()\n        format.setBackground(QColor(180, 238, 180))\n        self.calendarWidget.setDateTextFormat(date, format)\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.Show_Context_Menu","title":"<code>Show_Context_Menu(position)</code>","text":"<p>\u663e\u793a\u53f3\u952e\u83dc\u5355</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>QPoint</code> <p>\u83dc\u5355\u663e\u793a\u4f4d\u7f6e</p> required Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def Show_Context_Menu(self, position):\n    \"\"\"\u663e\u793a\u53f3\u952e\u83dc\u5355\n\n    Args:\n        position (QPoint): \u83dc\u5355\u663e\u793a\u4f4d\u7f6e\n    \"\"\"\n    item = self.listWidget_historyLogs.itemAt(position)\n    if item:\n        context_menu = QMenu(self)\n        delete_action = QAction(\"\u5220\u9664\u6b64\u65e5\u5fd7\u6587\u4ef6\", self)\n        delete_action.triggered.connect(lambda: self.Delete_Single_Log(item))\n        context_menu.addAction(delete_action)\n        context_menu.exec_(self.listWidget_historyLogs.mapToGlobal(position))\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.Update_Log_Counts_Async","title":"<code>Update_Log_Counts_Async()</code>","text":"<p>\u5f02\u6b65\u66f4\u65b0\u65e5\u5fd7\u884c\u6570\u7edf\u8ba1</p> Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def Update_Log_Counts_Async(self):\n    \"\"\"\u5f02\u6b65\u66f4\u65b0\u65e5\u5fd7\u884c\u6570\u7edf\u8ba1\"\"\"\n    try:\n        for i in range(self.listWidget_historyLogs.count()):\n            item = self.listWidget_historyLogs.item(i)\n            if item:\n                logfile = item.data(Qt.UserRole + 1)\n                date = item.data(Qt.UserRole)\n\n                try:\n                    # \u4f7f\u7528\u66f4\u9ad8\u6548\u7684\u884c\u6570\u7edf\u8ba1\u65b9\u6cd5\n                    log_count = self.Count_Log_Lines_Fast(logfile)\n\n                    # \u66f4\u65b0\u663e\u793a\u6587\u672c\n                    display_text = f\"{date} ({log_count}\u6761\u65e5\u5fd7)\"\n                    item.setText(display_text)\n\n                    # \u5f3a\u5236\u5237\u65b0UI\n                    QtWidgets.QApplication.processEvents()\n\n                except Exception as e:\n                    print(f\"\u66f4\u65b0\u6587\u4ef6 {logfile} \u884c\u6570\u65f6\u51fa\u9519: {e}\")\n\n    except Exception as e:\n        print(f\"\u5f02\u6b65\u66f4\u65b0\u65e5\u5fd7\u884c\u6570\u65f6\u51fa\u9519: {e}\")\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.Update_Log_Types","title":"<code>Update_Log_Types()</code>","text":"<p>\u52a8\u6001\u626b\u63cf\u5f53\u524d\u65e5\u5fd7\u5185\u5bb9\u4e2d\u7684\u6240\u6709\u65e5\u5fd7\u7c7b\u578b\u5e76\u66f4\u65b0\u4e0b\u62c9\u6846</p> Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def Update_Log_Types(self):\n    \"\"\"\u52a8\u6001\u626b\u63cf\u5f53\u524d\u65e5\u5fd7\u5185\u5bb9\u4e2d\u7684\u6240\u6709\u65e5\u5fd7\u7c7b\u578b\u5e76\u66f4\u65b0\u4e0b\u62c9\u6846\"\"\"\n    # \u4fdd\u5b58\u5f53\u524d\u9009\u62e9\u7684\u7c7b\u578b\n    current_selection = self.comboBox_logType.currentText()\n\n    # \u6e05\u7a7a\u4e0b\u62c9\u6846\n    self.comboBox_logType.clear()\n\n    # \u6dfb\u52a0\"\u5168\u90e8\"\u9009\u9879\n    self.comboBox_logType.addItem(\"\u5168\u90e8\")\n\n    if self.current_log_content:\n        # \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u63d0\u53d6\u6240\u6709\u65e5\u5fd7\u7ea7\u522b\n        # \u65e5\u5fd7\u683c\u5f0f: YYYY/MM/DD HH:MM:SS - \u6a21\u5757\u540d - \u65e5\u5fd7\u7ea7\u522b - \u6d88\u606f\n        log_levels = set()\n        pattern = r'\\d{4}/\\d{2}/\\d{2} \\d{2}:\\d{2}:\\d{2} - [^-]+ - ([A-Z]+)\\s*- '\n        matches = re.findall(pattern, self.current_log_content)\n\n        for match in matches:\n            log_levels.add(match.strip())\n\n        # \u6309\u5b57\u6bcd\u987a\u5e8f\u6392\u5e8f\u5e76\u6dfb\u52a0\u5230\u4e0b\u62c9\u6846\n        for level in sorted(log_levels):\n            self.comboBox_logType.addItem(level)\n\n    # \u5c1d\u8bd5\u6062\u590d\u4e4b\u524d\u7684\u9009\u62e9\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u9009\u62e9\"\u5168\u90e8\"\n    index = self.comboBox_logType.findText(current_selection)\n    if index &gt;= 0:\n        self.comboBox_logType.setCurrentIndex(index)\n    else:\n        self.comboBox_logType.setCurrentIndex(0)  # \u9009\u62e9\"\u5168\u90e8\"\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/log_viewer/#src.components.LogViewer.log_viewer_demo.LogCheckForm.__init__","title":"<code>__init__()</code>","text":"<p>\u521d\u59cb\u5316\u65e5\u5fd7\u67e5\u770b\u5668\u754c\u9762</p> Source code in <code>src\\components\\LogViewer\\log_viewer_demo.py</code> <pre><code>def __init__(self):\n    \"\"\"\u521d\u59cb\u5316\u65e5\u5fd7\u67e5\u770b\u5668\u754c\u9762\"\"\"\n    super(LogCheckForm, self).__init__()\n    self.setupUi(self)\n    self._log_files_cache = None  # \u65e5\u5fd7\u6587\u4ef6\u7f13\u5b58\n    self._cache_timestamp = 0     # \u7f13\u5b58\u65f6\u95f4\u6233\n    self.InitUI()\n</code></pre>","tags":["API\u6587\u6863","\u65e5\u5fd7\u67e5\u770b\u5668","Python"]},{"location":"API/net_manager/","title":"\u7f51\u7edc\u8bbe\u5907\u7ba1\u7406 NetManager API","text":"","tags":["API\u6587\u6863","Python","\u7f51\u7edc\u901a\u4fe1"]},{"location":"API/net_manager/#src.components.NetManager.NetManager","title":"<code>src.components.NetManager.NetManager</code>","text":"<p>@Project \uff1a631_ZHCLTest  @File    \uff1aNetManager.py @Author  \uff1aSanXiaoXing @Date    \uff1a2025/8/16 @Description: \u7f51\u7edc\u8bbe\u5907\u7ba1\u7406\u5668 - \u8bfb\u53d6 NetDevice.json \u5e76\u76f4\u63a5\u626b\u63cf IP \u5730\u5740\u72b6\u6001/\u540d\u79f0/IP/MAC</p>","tags":["API\u6587\u6863","Python","\u7f51\u7edc\u901a\u4fe1"]},{"location":"API/net_manager/#src.components.NetManager.NetManager.NetManager","title":"<code>NetManager</code>","text":"<p>               Bases: <code>QWidget</code></p> Source code in <code>src\\components\\NetManager\\NetManager.py</code> <pre><code>class NetManager(QWidget):\n    def __init__(self, parent=None, json_path: str = None):\n        super().__init__(parent)\n        self.ui = Ui_NetManager()\n        self.ui.setupUi(self)\n\n        # \u6570\u636e\n        # self.json_path = json_path or os.path.join(CURRENT_DIR, 'NetDevice.json')             # \u5f53\u524d\u6587\u4ef6\u5939\u5185\u6587\u4ef6\n        self.json_path = json_path or os.path.join(CURRENT_DIR, 'NetDevice.json')         # \u6839\u76ee\u5f55\u6587\u4ef6\n        self.device_map = {}  # ip -&gt; name\n        self.alive_map = {}   # ip -&gt; mac (\u4ec5\u5728\u7ebf)\n        self.last_scan_time = None\n        self.scanning = False  # \u9632\u6b62\u91cd\u590d\u626b\u63cf\n\n        # \u521d\u59cb\u5316\u8868\u683c\n        header = self.ui.table_devices.horizontalHeader()\n        header.setSectionResizeMode(QHeaderView.ResizeToContents)\n        header.setStretchLastSection(True)\n\n        # \u8ba9\u7b2c0\u5217\uff08\u72b6\u6001\uff09\u5728\u9009\u4e2d\u65f6\u4e5f\u4fdd\u6301\u81ea\u8eab\u989c\u8272\n        self.ui.table_devices.setItemDelegateForColumn(0, StatusColorDelegate(self.ui.table_devices))\n\n        # \u8bbe\u7f6e\u53f3\u952e\u83dc\u5355\n        self.ui.table_devices.setContextMenuPolicy(Qt.CustomContextMenu)\n        self.ui.table_devices.customContextMenuRequested.connect(self.show_context_menu)\n\n        # \u4fe1\u53f7\n        self.ui.btn_refresh.clicked.connect(self.refresh)\n        self.ui.btn_add_device.clicked.connect(self.open_add_device_dialog)\n        self.ui.edit_filter.textChanged.connect(self.apply_filter)\n        self.ui.combo_status_filter.currentIndexChanged.connect(self.apply_filter)\n\n        # \u542f\u52a8\uff1a\u5148\u663e\u793a\u7a7a\u8868\uff0c\u518d\u540e\u53f0\u52a0\u8f7dJSON\u5e76\u626b\u63cf\n        QTimer.singleShot(0, self._initialize)\n\n    def _initialize(self):\n        \"\"\"\u521d\u59cb\u5316\uff1a\u52a0\u8f7d\u914d\u7f6e\u5e76\u5f00\u59cb\u626b\u63cf\"\"\"\n        # \u663e\u793a\u8fdb\u5ea6\u6761\uff1a\u9636\u6bb51 \u8bfb\u53d6\u914d\u7f6e\n        self.ui.label_progress.setText(\"\u6b63\u5728\u8bfb\u53d6\u914d\u7f6e...\")\n        self.ui.progress_bar.setVisible(True)\n        self.ui.progress_bar.setRange(0, 0)  # \u4e0d\u786e\u5b9a\u8fdb\u5ea6\n\n        # \u52a0\u8f7dJSON\u914d\u7f6e\n        self.load_json()\n\n        # \u5f00\u59cb\u626b\u63cf\n        self.ui.progress_bar.setRange(0, 1)\n        self.ui.progress_bar.setValue(0)\n        self.start_scan()\n\n    # ------------------ \u6570\u636e\u52a0\u8f7d ------------------\n    def load_json(self):\n        \"\"\"\u8bfb\u53d6 NetDevice.json -&gt; device_map\"\"\"\n        self.device_map = {}\n        try:\n            with open(self.json_path, 'r', encoding='utf-8') as f:\n                data = json.load(f)\n                for ip, name in data.items():\n                    self.device_map[str(ip).strip()] = str(name).strip()\n        except Exception as e:\n            print(f\"[NetManager] \u52a0\u8f7dJSON\u5931\u8d25: {e}\")\n            self.device_map = {}\n\n    def start_scan(self):\n        if self.scanning:\n            return\n        self.scanning = True\n        self.ui.btn_refresh.setEnabled(False)\n        # \u626b\u63cf\u671f\u95f4\u7981\u7528\u589e\u52a0\u8bbe\u5907\uff0c\u907f\u514d\u5e76\u53d1\u5199 JSON\n        self.ui.btn_add_device.setEnabled(False)\n\n        ip_list = list(self.device_map.keys())\n        # \u521d\u59cb\u5316\u8fdb\u5ea6\u6761\n        self.ui.label_progress.setText(\"\u6b63\u5728\u626b\u63cf\u8bbe\u5907...\")\n        self.ui.progress_bar.setVisible(True)\n        self.ui.progress_bar.setRange(0, max(1, len(ip_list)))\n        self.ui.progress_bar.setValue(0)\n\n        # \u542f\u52a8\u5de5\u4f5c\u7ebf\u7a0b\n        self.worker = ScanWorker(ip_list, self)\n        self.worker.progress.connect(self.on_scan_progress)\n        self.worker.finished_scan.connect(self.on_scan_finished)\n        self.worker.finished.connect(self._on_worker_finished)\n        self.worker.start()\n\n    def _on_worker_finished(self):\n        # \u6062\u590d\u6309\u94ae\n        self.scanning = False\n        self.ui.btn_refresh.setEnabled(True)\n        self.ui.btn_add_device.setEnabled(True)\n\n    def on_scan_progress(self, done: int, total: int):\n        # \u66f4\u65b0\u8fdb\u5ea6\u6761\n        self.ui.progress_bar.setRange(0, max(1, total))\n        self.ui.progress_bar.setValue(done)\n        self.ui.label_progress.setText(f\"\u6b63\u5728\u626b\u63cf\u8bbe\u5907... {done}/{total}\")\n\n    def on_scan_finished(self, alive_map: dict):\n        # \u9690\u85cf\u8fdb\u5ea6\u6761\u5e76\u5237\u65b0\u8868\u683c\n        self.alive_map = alive_map\n        self.last_scan_time = datetime.now()\n        self.refresh_table()\n        self.ui.progress_bar.setVisible(False)\n        self.ui.label_progress.setText(\"\")\n\n    def refresh_table(self):\n        \"\"\"\u5237\u65b0\u8868\u683c\u663e\u793a\"\"\"\n        rows = []\n        # \u6784\u5efa\u8bbe\u5907\u4fe1\u606f\u884c\u6570\u636e\uff0c\u5305\u542b\u5728\u7ebf\u72b6\u6001\u3001\u8bbe\u5907\u540d\u79f0\u548cIP\u5730\u5740\n        for ip, name in self.device_map.items():\n            online = ip in self.alive_map\n            rows.append((online, name, ip))\n\n        # \u7edf\u8ba1\u8bbe\u5907\u603b\u6570\u3001\u5728\u7ebf\u6570\u548c\u79bb\u7ebf\u6570\n        total = len(rows)\n        online_count = sum(1 for r in rows if r[0])\n        offline_count = total - online_count\n\n        # \u6e05\u7a7a\u8868\u683c\u5e76\u91cd\u7f6e\u6392\u5e8f\u72b6\u6001\uff0c\u9632\u6b62\u6392\u5e8f\u540e\u5237\u65b0\u5bfc\u81f4\u6570\u636e\u91cd\u590d\n        self.ui.table_devices.clearContents()\n        self.ui.table_devices.setSortingEnabled(False)\n\n        # \u8bbe\u7f6e\u8868\u683c\u884c\u6570\u5e76\u586b\u5145\u6570\u636e\n        self.ui.table_devices.setRowCount(len(rows))\n        for row_idx, (online, name, ip) in enumerate(rows):\n            # \u8bbe\u7f6e\u72b6\u6001\u5217\uff08\u5728\u7ebf/\u79bb\u7ebf\uff09\u53ca\u5176\u6837\u5f0f\n            status_text = '\u25cf \u5728\u7ebf' if online else '\u25cf \u79bb\u7ebf'\n            status_item = QTableWidgetItem(status_text)\n            status_item.setTextAlignment(Qt.AlignCenter)\n            status_item.setForeground(QColor(0, 170, 0) if online else QColor(200, 0, 0))\n\n            # \u8bbe\u7f6e\u8bbe\u5907\u540d\u79f0\u548cIP\u5730\u5740\u5217\n            name_item = QTableWidgetItem(name)\n            ip_item = QTableWidgetItem(ip)\n\n            # \u8bbe\u7f6e\u6700\u540e\u626b\u63cf\u65f6\u95f4\u5217\n            ts = self.last_scan_time.strftime('%Y-%m-%d %H:%M:%S') if self.last_scan_time else '\u2014'\n            time_item = QTableWidgetItem(ts)\n            time_item.setTextAlignment(Qt.AlignCenter)\n\n            # \u5c06\u5404\u9879\u6570\u636e\u6dfb\u52a0\u5230\u8868\u683c\u5bf9\u5e94\u4f4d\u7f6e\n            self.ui.table_devices.setItem(row_idx, 0, status_item)\n            self.ui.table_devices.setItem(row_idx, 1, name_item)\n            self.ui.table_devices.setItem(row_idx, 2, ip_item)\n            self.ui.table_devices.setItem(row_idx, 3, time_item)\n\n        # \u8c03\u6574\u8868\u683c\u5217\u5bbd\u4ee5\u9002\u5e94\u5185\u5bb9\n        self.ui.table_devices.resizeColumnsToContents()\n\n        # \u91cd\u65b0\u542f\u7528\u6392\u5e8f\u529f\u80fd\n        self.ui.table_devices.setSortingEnabled(True)\n\n        # \u66f4\u65b0\u72b6\u6001\u6807\u7b7e\u663e\u793a\u8bbe\u5907\u7edf\u8ba1\u4fe1\u606f\n        self.ui.label_status.setText(f\"\u8bbe\u5907\u603b\u6570: {total} | \u5728\u7ebf: {online_count} | \u79bb\u7ebf: {offline_count}\")\n\n        # \u66f4\u65b0\u6700\u540e\u626b\u63cf\u65f6\u95f4\u6807\u7b7e\n        last_scan_str = self.last_scan_time.strftime('%Y-%m-%d %H:%M:%S') if self.last_scan_time else '\u672a\u6267\u884c'\n        self.ui.label_last_scan.setText(f\"\u6700\u540e\u626b\u63cf: {last_scan_str}\")\n\n        # \u5e94\u7528\u5f53\u524d\u7684\u8fc7\u6ee4\u6761\u4ef6\n        self.apply_filter()\n\n\n    def apply_filter(self):\n        keyword = self.ui.edit_filter.text().strip().lower()\n        status_filter = self.ui.combo_status_filter.currentText()\n        row_count = self.ui.table_devices.rowCount()\n\n        for row in range(row_count):\n            name = self.ui.table_devices.item(row, 1).text().lower() if self.ui.table_devices.item(row, 1) else ''\n            ip = self.ui.table_devices.item(row, 2).text().lower() if self.ui.table_devices.item(row, 2) else ''\n            status_text = self.ui.table_devices.item(row, 0).text() if self.ui.table_devices.item(row, 0) else ''\n\n            visible = True\n            if keyword:\n                visible = (keyword in name) or (keyword in ip)\n            if visible and status_filter != '\u5168\u90e8':\n                if status_filter == '\u5728\u7ebf' and ('\u5728\u7ebf' not in status_text):\n                    visible = False\n                elif status_filter == '\u79bb\u7ebf' and ('\u79bb\u7ebf' not in status_text):\n                    visible = False\n\n            self.ui.table_devices.setRowHidden(row, not visible)\n\n\n    def refresh(self):\n        # \u91cd\u65b0\u626b\u63cf\uff08\u5f02\u6b65\uff09\uff0c\u754c\u9762\u7acb\u5373\u54cd\u5e94\n        self.start_scan()\n\n    def open_add_device_dialog(self):\n        \"\"\"\u6253\u5f00\u589e\u52a0\u8bbe\u5907\u5bf9\u8bdd\u6846\"\"\"\n        if self.scanning:\n            QMessageBox.information(self, \"\u63d0\u793a\", \"\u6b63\u5728\u626b\u63cf\u4e2d\uff0c\u8bf7\u7a0d\u540e\u518d\u6dfb\u52a0\u8bbe\u5907\u3002\")\n            return\n        dlg = AddDeviceDialog(self)\n        if dlg.exec_() == QDialog.Accepted:\n            ip, name = dlg.get_values()\n            if self.add_or_update_device(ip, name):\n                self._refresh_after_device_change()\n\n    def _refresh_after_device_change(self):\n        \"\"\"\u8bbe\u5907\u53d8\u66f4\u540e\u7684\u5237\u65b0\u64cd\u4f5c\"\"\"\n        self.load_json()\n        self.refresh_table()\n        self.start_scan()\n\n    def add_or_update_device(self, ip: str, name: str) -&gt; bool:\n        \"\"\"\u6dfb\u52a0\u6216\u66f4\u65b0\u8bbe\u5907\u5230JSON\u6587\u4ef6\"\"\"\n        data = {}\n        # \u8bfb\u53d6\u73b0\u6709 JSON\n        try:\n            if os.path.exists(self.json_path):\n                with open(self.json_path, 'r', encoding='utf-8') as f:\n                    data = json.load(f)\n            else:\n                # \u82e5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u786e\u4fdd\u4e0a\u7ea7\u76ee\u5f55\u5b58\u5728\n                os.makedirs(os.path.dirname(self.json_path), exist_ok=True)\n        except Exception as e:\n            QMessageBox.critical(self, \"\u9519\u8bef\", f\"\u8bfb\u53d6\u914d\u7f6e\u5931\u8d25:\\n{e}\")\n            return False\n        # \u51b2\u7a81\u5904\u7406\uff1a\u82e5 IP \u5df2\u5b58\u5728\uff0c\u786e\u8ba4\u662f\u5426\u8986\u76d6\u540d\u79f0\n        if ip in data and data[ip] != name:\n            ret = QMessageBox.question(\n                self,\n                \"\u786e\u8ba4\",\n                f\"IP {ip} \u5df2\u5b58\u5728\uff0c\u662f\u5426\u5c06\u540d\u79f0\u4ece \u2018{data[ip]}\u2019 \u8986\u76d6\u4e3a \u2018{name}\u2019\uff1f\",\n                QMessageBox.Yes | QMessageBox.No,\n                QMessageBox.No\n            )\n            if ret != QMessageBox.Yes:\n                return False\n        data[ip] = name\n        # \u5199\u56de JSON\n        try:\n            with open(self.json_path, 'w', encoding='utf-8') as f:\n                json.dump(data, f, ensure_ascii=False, indent=2)\n            return True\n        except Exception as e:\n            QMessageBox.critical(self, \"\u9519\u8bef\", f\"\u5199\u5165\u914d\u7f6e\u5931\u8d25:\\n{e}\")\n            return False\n\n\n    def show_context_menu(self, position):\n        # \u83b7\u53d6\u70b9\u51fb\u7684\u884c\n        item = self.ui.table_devices.itemAt(position)\n        if item is None:\n            return\n\n        row = item.row()\n        if row &lt; 0:\n            return\n\n        # \u83b7\u53d6\u9009\u4e2d\u884c\u7684\u8bbe\u5907\u4fe1\u606f\n        ip_item = self.ui.table_devices.item(row, 2)\n        name_item = self.ui.table_devices.item(row, 1)\n        if not ip_item or not name_item:\n            return\n\n        ip = ip_item.text()\n        name = name_item.text()\n\n        # \u521b\u5efa\u4e0a\u4e0b\u6587\u83dc\u5355\n        menu = QMenu(self)\n\n        # \u6dfb\u52a0\u7f16\u8f91\u52a8\u4f5c\n        edit_action = menu.addAction(\"\u7f16\u8f91\")\n        edit_action.triggered.connect(lambda: self.edit_device(ip, name))\n\n        # \u6dfb\u52a0\u5220\u9664\u52a8\u4f5c\n        delete_action = menu.addAction(\"\u5220\u9664\")\n        delete_action.triggered.connect(lambda: self.delete_device(ip, name))\n\n        # \u5728\u9f20\u6807\u4f4d\u7f6e\u663e\u793a\u83dc\u5355\n        menu.exec_(self.ui.table_devices.mapToGlobal(position))\n\n    def edit_device(self, ip: str, name: str):\n        \"\"\"\u7f16\u8f91\u8bbe\u5907\u4fe1\u606f\"\"\"\n        if self.scanning:\n            QMessageBox.information(self, \"\u63d0\u793a\", \"\u6b63\u5728\u626b\u63cf\u4e2d\uff0c\u8bf7\u7a0d\u540e\u518d\u7f16\u8f91\u8bbe\u5907\u3002\")\n            return\n\n        dlg = AddDeviceDialog(self)\n        dlg.setWindowTitle(\"\u7f16\u8f91\u8bbe\u5907\")\n        # \u9884\u586b\u5145\u5f53\u524d\u8bbe\u5907\u4fe1\u606f\n        dlg.edit_ip.setText(ip)\n        dlg.edit_name.setText(name)\n        # \u7f16\u8f91\u65f6\u5141\u8bb8\u4fee\u6539IP\u5730\u5740\n        dlg.edit_ip.setReadOnly(False)\n\n        if dlg.exec_() == QDialog.Accepted:\n            new_ip, new_name = dlg.get_values()\n            # \u68c0\u67e5\u662f\u5426\u6709\u53d8\u5316\n            if new_ip == ip and new_name == name:\n                return  # \u6ca1\u6709\u53d8\u5316\uff0c\u76f4\u63a5\u8fd4\u56de\n\n            # \u5982\u679cIP\u5730\u5740\u53d1\u751f\u53d8\u5316\uff0c\u9700\u8981\u5148\u5220\u9664\u65e7\u8bb0\u5f55\n            if new_ip != ip:\n                # \u68c0\u67e5\u65b0IP\u662f\u5426\u5df2\u5b58\u5728\n                if new_ip in self.device_map and new_ip != ip:\n                    ret = QMessageBox.question(\n                        self,\n                        \"IP\u51b2\u7a81\",\n                        f\"IP\u5730\u5740 {new_ip} \u5df2\u88ab\u8bbe\u5907 '{self.device_map[new_ip]}' \u4f7f\u7528\u3002\\n\u662f\u5426\u8981\u8986\u76d6\u8be5\u8bbe\u5907\uff1f\",\n                        QMessageBox.Yes | QMessageBox.No,\n                        QMessageBox.No\n                    )\n                    if ret != QMessageBox.Yes:\n                        return\n\n                # \u5220\u9664\u65e7IP\u8bb0\u5f55\n                if self.remove_device(ip):\n                    # \u6dfb\u52a0\u65b0IP\u8bb0\u5f55\n                    if self.add_or_update_device(new_ip, new_name):\n                        self._refresh_after_device_change()\n                        QMessageBox.information(self, \"\u6210\u529f\", f\"\u8bbe\u5907\u5df2\u4ece {ip} \u66f4\u65b0\u4e3a {new_ip}\")\n            else:\n                # \u53ea\u662f\u540d\u79f0\u53d8\u5316\n                if self.add_or_update_device(new_ip, new_name):\n                    self._refresh_after_device_change()\n\n    def delete_device(self, ip: str, name: str):\n        if self.scanning:\n            QMessageBox.information(self, \"\u63d0\u793a\", \"\u6b63\u5728\u626b\u63cf\u4e2d\uff0c\u8bf7\u7a0d\u540e\u518d\u5220\u9664\u8bbe\u5907\u3002\")\n            return\n\n        # \u786e\u8ba4\u5220\u9664\n        ret = QMessageBox.question(\n            self,\n            \"\u786e\u8ba4\u5220\u9664\",\n            f\"\u786e\u5b9a\u8981\u5220\u9664\u8bbe\u5907 '{name}' ({ip}) \u5417\uff1f\",\n            QMessageBox.Yes | QMessageBox.No,\n            QMessageBox.No\n        )\n\n        if ret == QMessageBox.Yes:\n            if self.remove_device(ip):\n                self._refresh_after_device_change()\n\n    def remove_device(self, ip: str) -&gt; bool:\n        \"\"\"\u4eceJSON\u6587\u4ef6\u4e2d\u5220\u9664\u8bbe\u5907\"\"\"\n        try:\n            data = {}\n            if os.path.exists(self.json_path):\n                with open(self.json_path, 'r', encoding='utf-8') as f:\n                    data = json.load(f)\n\n            if ip in data:\n                del data[ip]\n\n                # \u5199\u56deJSON\n                with open(self.json_path, 'w', encoding='utf-8') as f:\n                    json.dump(data, f, ensure_ascii=False, indent=2)\n                return True\n            else:\n                QMessageBox.warning(self, \"\u8b66\u544a\", f\"\u8bbe\u5907 {ip} \u4e0d\u5b58\u5728\u4e8e\u914d\u7f6e\u4e2d\u3002\")\n                return False\n\n        except Exception as e:\n            QMessageBox.critical(self, \"\u9519\u8bef\", f\"\u5220\u9664\u8bbe\u5907\u5931\u8d25:\\n{e}\")\n            return False\n</code></pre>","tags":["API\u6587\u6863","Python","\u7f51\u7edc\u901a\u4fe1"]},{"location":"API/net_manager/#src.components.NetManager.NetManager.NetManager.add_or_update_device","title":"<code>add_or_update_device(ip, name)</code>","text":"<p>\u6dfb\u52a0\u6216\u66f4\u65b0\u8bbe\u5907\u5230JSON\u6587\u4ef6</p> Source code in <code>src\\components\\NetManager\\NetManager.py</code> <pre><code>def add_or_update_device(self, ip: str, name: str) -&gt; bool:\n    \"\"\"\u6dfb\u52a0\u6216\u66f4\u65b0\u8bbe\u5907\u5230JSON\u6587\u4ef6\"\"\"\n    data = {}\n    # \u8bfb\u53d6\u73b0\u6709 JSON\n    try:\n        if os.path.exists(self.json_path):\n            with open(self.json_path, 'r', encoding='utf-8') as f:\n                data = json.load(f)\n        else:\n            # \u82e5\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u786e\u4fdd\u4e0a\u7ea7\u76ee\u5f55\u5b58\u5728\n            os.makedirs(os.path.dirname(self.json_path), exist_ok=True)\n    except Exception as e:\n        QMessageBox.critical(self, \"\u9519\u8bef\", f\"\u8bfb\u53d6\u914d\u7f6e\u5931\u8d25:\\n{e}\")\n        return False\n    # \u51b2\u7a81\u5904\u7406\uff1a\u82e5 IP \u5df2\u5b58\u5728\uff0c\u786e\u8ba4\u662f\u5426\u8986\u76d6\u540d\u79f0\n    if ip in data and data[ip] != name:\n        ret = QMessageBox.question(\n            self,\n            \"\u786e\u8ba4\",\n            f\"IP {ip} \u5df2\u5b58\u5728\uff0c\u662f\u5426\u5c06\u540d\u79f0\u4ece \u2018{data[ip]}\u2019 \u8986\u76d6\u4e3a \u2018{name}\u2019\uff1f\",\n            QMessageBox.Yes | QMessageBox.No,\n            QMessageBox.No\n        )\n        if ret != QMessageBox.Yes:\n            return False\n    data[ip] = name\n    # \u5199\u56de JSON\n    try:\n        with open(self.json_path, 'w', encoding='utf-8') as f:\n            json.dump(data, f, ensure_ascii=False, indent=2)\n        return True\n    except Exception as e:\n        QMessageBox.critical(self, \"\u9519\u8bef\", f\"\u5199\u5165\u914d\u7f6e\u5931\u8d25:\\n{e}\")\n        return False\n</code></pre>","tags":["API\u6587\u6863","Python","\u7f51\u7edc\u901a\u4fe1"]},{"location":"API/net_manager/#src.components.NetManager.NetManager.NetManager.edit_device","title":"<code>edit_device(ip, name)</code>","text":"<p>\u7f16\u8f91\u8bbe\u5907\u4fe1\u606f</p> Source code in <code>src\\components\\NetManager\\NetManager.py</code> <pre><code>def edit_device(self, ip: str, name: str):\n    \"\"\"\u7f16\u8f91\u8bbe\u5907\u4fe1\u606f\"\"\"\n    if self.scanning:\n        QMessageBox.information(self, \"\u63d0\u793a\", \"\u6b63\u5728\u626b\u63cf\u4e2d\uff0c\u8bf7\u7a0d\u540e\u518d\u7f16\u8f91\u8bbe\u5907\u3002\")\n        return\n\n    dlg = AddDeviceDialog(self)\n    dlg.setWindowTitle(\"\u7f16\u8f91\u8bbe\u5907\")\n    # \u9884\u586b\u5145\u5f53\u524d\u8bbe\u5907\u4fe1\u606f\n    dlg.edit_ip.setText(ip)\n    dlg.edit_name.setText(name)\n    # \u7f16\u8f91\u65f6\u5141\u8bb8\u4fee\u6539IP\u5730\u5740\n    dlg.edit_ip.setReadOnly(False)\n\n    if dlg.exec_() == QDialog.Accepted:\n        new_ip, new_name = dlg.get_values()\n        # \u68c0\u67e5\u662f\u5426\u6709\u53d8\u5316\n        if new_ip == ip and new_name == name:\n            return  # \u6ca1\u6709\u53d8\u5316\uff0c\u76f4\u63a5\u8fd4\u56de\n\n        # \u5982\u679cIP\u5730\u5740\u53d1\u751f\u53d8\u5316\uff0c\u9700\u8981\u5148\u5220\u9664\u65e7\u8bb0\u5f55\n        if new_ip != ip:\n            # \u68c0\u67e5\u65b0IP\u662f\u5426\u5df2\u5b58\u5728\n            if new_ip in self.device_map and new_ip != ip:\n                ret = QMessageBox.question(\n                    self,\n                    \"IP\u51b2\u7a81\",\n                    f\"IP\u5730\u5740 {new_ip} \u5df2\u88ab\u8bbe\u5907 '{self.device_map[new_ip]}' \u4f7f\u7528\u3002\\n\u662f\u5426\u8981\u8986\u76d6\u8be5\u8bbe\u5907\uff1f\",\n                    QMessageBox.Yes | QMessageBox.No,\n                    QMessageBox.No\n                )\n                if ret != QMessageBox.Yes:\n                    return\n\n            # \u5220\u9664\u65e7IP\u8bb0\u5f55\n            if self.remove_device(ip):\n                # \u6dfb\u52a0\u65b0IP\u8bb0\u5f55\n                if self.add_or_update_device(new_ip, new_name):\n                    self._refresh_after_device_change()\n                    QMessageBox.information(self, \"\u6210\u529f\", f\"\u8bbe\u5907\u5df2\u4ece {ip} \u66f4\u65b0\u4e3a {new_ip}\")\n        else:\n            # \u53ea\u662f\u540d\u79f0\u53d8\u5316\n            if self.add_or_update_device(new_ip, new_name):\n                self._refresh_after_device_change()\n</code></pre>","tags":["API\u6587\u6863","Python","\u7f51\u7edc\u901a\u4fe1"]},{"location":"API/net_manager/#src.components.NetManager.NetManager.NetManager.load_json","title":"<code>load_json()</code>","text":"<p>\u8bfb\u53d6 NetDevice.json -&gt; device_map</p> Source code in <code>src\\components\\NetManager\\NetManager.py</code> <pre><code>def load_json(self):\n    \"\"\"\u8bfb\u53d6 NetDevice.json -&gt; device_map\"\"\"\n    self.device_map = {}\n    try:\n        with open(self.json_path, 'r', encoding='utf-8') as f:\n            data = json.load(f)\n            for ip, name in data.items():\n                self.device_map[str(ip).strip()] = str(name).strip()\n    except Exception as e:\n        print(f\"[NetManager] \u52a0\u8f7dJSON\u5931\u8d25: {e}\")\n        self.device_map = {}\n</code></pre>","tags":["API\u6587\u6863","Python","\u7f51\u7edc\u901a\u4fe1"]},{"location":"API/net_manager/#src.components.NetManager.NetManager.NetManager.open_add_device_dialog","title":"<code>open_add_device_dialog()</code>","text":"<p>\u6253\u5f00\u589e\u52a0\u8bbe\u5907\u5bf9\u8bdd\u6846</p> Source code in <code>src\\components\\NetManager\\NetManager.py</code> <pre><code>def open_add_device_dialog(self):\n    \"\"\"\u6253\u5f00\u589e\u52a0\u8bbe\u5907\u5bf9\u8bdd\u6846\"\"\"\n    if self.scanning:\n        QMessageBox.information(self, \"\u63d0\u793a\", \"\u6b63\u5728\u626b\u63cf\u4e2d\uff0c\u8bf7\u7a0d\u540e\u518d\u6dfb\u52a0\u8bbe\u5907\u3002\")\n        return\n    dlg = AddDeviceDialog(self)\n    if dlg.exec_() == QDialog.Accepted:\n        ip, name = dlg.get_values()\n        if self.add_or_update_device(ip, name):\n            self._refresh_after_device_change()\n</code></pre>","tags":["API\u6587\u6863","Python","\u7f51\u7edc\u901a\u4fe1"]},{"location":"API/net_manager/#src.components.NetManager.NetManager.NetManager.refresh_table","title":"<code>refresh_table()</code>","text":"<p>\u5237\u65b0\u8868\u683c\u663e\u793a</p> Source code in <code>src\\components\\NetManager\\NetManager.py</code> <pre><code>def refresh_table(self):\n    \"\"\"\u5237\u65b0\u8868\u683c\u663e\u793a\"\"\"\n    rows = []\n    # \u6784\u5efa\u8bbe\u5907\u4fe1\u606f\u884c\u6570\u636e\uff0c\u5305\u542b\u5728\u7ebf\u72b6\u6001\u3001\u8bbe\u5907\u540d\u79f0\u548cIP\u5730\u5740\n    for ip, name in self.device_map.items():\n        online = ip in self.alive_map\n        rows.append((online, name, ip))\n\n    # \u7edf\u8ba1\u8bbe\u5907\u603b\u6570\u3001\u5728\u7ebf\u6570\u548c\u79bb\u7ebf\u6570\n    total = len(rows)\n    online_count = sum(1 for r in rows if r[0])\n    offline_count = total - online_count\n\n    # \u6e05\u7a7a\u8868\u683c\u5e76\u91cd\u7f6e\u6392\u5e8f\u72b6\u6001\uff0c\u9632\u6b62\u6392\u5e8f\u540e\u5237\u65b0\u5bfc\u81f4\u6570\u636e\u91cd\u590d\n    self.ui.table_devices.clearContents()\n    self.ui.table_devices.setSortingEnabled(False)\n\n    # \u8bbe\u7f6e\u8868\u683c\u884c\u6570\u5e76\u586b\u5145\u6570\u636e\n    self.ui.table_devices.setRowCount(len(rows))\n    for row_idx, (online, name, ip) in enumerate(rows):\n        # \u8bbe\u7f6e\u72b6\u6001\u5217\uff08\u5728\u7ebf/\u79bb\u7ebf\uff09\u53ca\u5176\u6837\u5f0f\n        status_text = '\u25cf \u5728\u7ebf' if online else '\u25cf \u79bb\u7ebf'\n        status_item = QTableWidgetItem(status_text)\n        status_item.setTextAlignment(Qt.AlignCenter)\n        status_item.setForeground(QColor(0, 170, 0) if online else QColor(200, 0, 0))\n\n        # \u8bbe\u7f6e\u8bbe\u5907\u540d\u79f0\u548cIP\u5730\u5740\u5217\n        name_item = QTableWidgetItem(name)\n        ip_item = QTableWidgetItem(ip)\n\n        # \u8bbe\u7f6e\u6700\u540e\u626b\u63cf\u65f6\u95f4\u5217\n        ts = self.last_scan_time.strftime('%Y-%m-%d %H:%M:%S') if self.last_scan_time else '\u2014'\n        time_item = QTableWidgetItem(ts)\n        time_item.setTextAlignment(Qt.AlignCenter)\n\n        # \u5c06\u5404\u9879\u6570\u636e\u6dfb\u52a0\u5230\u8868\u683c\u5bf9\u5e94\u4f4d\u7f6e\n        self.ui.table_devices.setItem(row_idx, 0, status_item)\n        self.ui.table_devices.setItem(row_idx, 1, name_item)\n        self.ui.table_devices.setItem(row_idx, 2, ip_item)\n        self.ui.table_devices.setItem(row_idx, 3, time_item)\n\n    # \u8c03\u6574\u8868\u683c\u5217\u5bbd\u4ee5\u9002\u5e94\u5185\u5bb9\n    self.ui.table_devices.resizeColumnsToContents()\n\n    # \u91cd\u65b0\u542f\u7528\u6392\u5e8f\u529f\u80fd\n    self.ui.table_devices.setSortingEnabled(True)\n\n    # \u66f4\u65b0\u72b6\u6001\u6807\u7b7e\u663e\u793a\u8bbe\u5907\u7edf\u8ba1\u4fe1\u606f\n    self.ui.label_status.setText(f\"\u8bbe\u5907\u603b\u6570: {total} | \u5728\u7ebf: {online_count} | \u79bb\u7ebf: {offline_count}\")\n\n    # \u66f4\u65b0\u6700\u540e\u626b\u63cf\u65f6\u95f4\u6807\u7b7e\n    last_scan_str = self.last_scan_time.strftime('%Y-%m-%d %H:%M:%S') if self.last_scan_time else '\u672a\u6267\u884c'\n    self.ui.label_last_scan.setText(f\"\u6700\u540e\u626b\u63cf: {last_scan_str}\")\n\n    # \u5e94\u7528\u5f53\u524d\u7684\u8fc7\u6ee4\u6761\u4ef6\n    self.apply_filter()\n</code></pre>","tags":["API\u6587\u6863","Python","\u7f51\u7edc\u901a\u4fe1"]},{"location":"API/net_manager/#src.components.NetManager.NetManager.NetManager.remove_device","title":"<code>remove_device(ip)</code>","text":"<p>\u4eceJSON\u6587\u4ef6\u4e2d\u5220\u9664\u8bbe\u5907</p> Source code in <code>src\\components\\NetManager\\NetManager.py</code> <pre><code>def remove_device(self, ip: str) -&gt; bool:\n    \"\"\"\u4eceJSON\u6587\u4ef6\u4e2d\u5220\u9664\u8bbe\u5907\"\"\"\n    try:\n        data = {}\n        if os.path.exists(self.json_path):\n            with open(self.json_path, 'r', encoding='utf-8') as f:\n                data = json.load(f)\n\n        if ip in data:\n            del data[ip]\n\n            # \u5199\u56deJSON\n            with open(self.json_path, 'w', encoding='utf-8') as f:\n                json.dump(data, f, ensure_ascii=False, indent=2)\n            return True\n        else:\n            QMessageBox.warning(self, \"\u8b66\u544a\", f\"\u8bbe\u5907 {ip} \u4e0d\u5b58\u5728\u4e8e\u914d\u7f6e\u4e2d\u3002\")\n            return False\n\n    except Exception as e:\n        QMessageBox.critical(self, \"\u9519\u8bef\", f\"\u5220\u9664\u8bbe\u5907\u5931\u8d25:\\n{e}\")\n        return False\n</code></pre>","tags":["API\u6587\u6863","Python","\u7f51\u7edc\u901a\u4fe1"]},{"location":"API/resource_query/","title":"\u8d44\u6e90\u7d22\u5f15\u67e5\u8be2 ResourceQuery API","text":""},{"location":"API/resource_query/#src.components.ResourceQuery.ResourceQueryTool","title":"<code>src.components.ResourceQuery.ResourceQueryTool</code>","text":""},{"location":"API/resource_query/#src.components.ResourceQuery.ResourceQueryTool.CustomHeaderView","title":"<code>CustomHeaderView</code>","text":"<p>               Bases: <code>QHeaderView</code></p> <p>\u81ea\u5b9a\u4e49\u8868\u5934\uff0c\u652f\u6301\u7b5b\u9009\u529f\u80fd</p> Source code in <code>src\\components\\ResourceQuery\\ResourceQueryTool.py</code> <pre><code>class CustomHeaderView(QHeaderView):\n    \"\"\"\u81ea\u5b9a\u4e49\u8868\u5934\uff0c\u652f\u6301\u7b5b\u9009\u529f\u80fd\"\"\"\n    filterClicked = pyqtSignal(int, str)  # column_index, column_name\n\n    def __init__(self, orientation, parent=None):\n        super().__init__(orientation, parent)\n        self.setSectionsClickable(True)\n        self.filters = {}  # \u5b58\u50a8\u6bcf\u5217\u7684\u7b5b\u9009\u6761\u4ef6\n\n    def set_filter(self, column_name, selected_values):\n        \"\"\"\u8bbe\u7f6e\u5217\u7b5b\u9009\u6761\u4ef6\"\"\"\n        if not selected_values or len(selected_values) == 0:\n            # \u7a7a\u5217\u8868\u8868\u793a\u65e0\u7b5b\u9009\u6216\u5168\u9009\n            if column_name in self.filters:\n                del self.filters[column_name]\n        else:\n            self.filters[column_name] = selected_values\n\n    def mousePressEvent(self, event):\n        \"\"\"\u9f20\u6807\u70b9\u51fb\u4e8b\u4ef6\"\"\"\n        if event.button() in (Qt.RightButton, Qt.LeftButton):\n            # \u70b9\u51fb\u663e\u793a\u7b5b\u9009\u83dc\u5355\n            index = self.logicalIndexAt(event.pos())\n            if index &gt;= 0:\n                if isinstance(self.parent(), QWidget):\n                    try:\n                        column_name = self.parent().horizontalHeaderItem(index).text()\n                    except Exception:\n                        column_name = f\"Column {index}\"\n                else:\n                    column_name = f\"Column {index}\"\n                # \u79fb\u9664\u7b5b\u9009\u6307\u793a\u7b26\n                if column_name.endswith(\" \u23f7\"):\n                    column_name = column_name[:-2].strip()\n                self.filterClicked.emit(index, column_name)\n                return\n        super().mousePressEvent(event)\n</code></pre>"},{"location":"API/resource_query/#src.components.ResourceQuery.ResourceQueryTool.CustomHeaderView.mousePressEvent","title":"<code>mousePressEvent(event)</code>","text":"<p>\u9f20\u6807\u70b9\u51fb\u4e8b\u4ef6</p> Source code in <code>src\\components\\ResourceQuery\\ResourceQueryTool.py</code> <pre><code>def mousePressEvent(self, event):\n    \"\"\"\u9f20\u6807\u70b9\u51fb\u4e8b\u4ef6\"\"\"\n    if event.button() in (Qt.RightButton, Qt.LeftButton):\n        # \u70b9\u51fb\u663e\u793a\u7b5b\u9009\u83dc\u5355\n        index = self.logicalIndexAt(event.pos())\n        if index &gt;= 0:\n            if isinstance(self.parent(), QWidget):\n                try:\n                    column_name = self.parent().horizontalHeaderItem(index).text()\n                except Exception:\n                    column_name = f\"Column {index}\"\n            else:\n                column_name = f\"Column {index}\"\n            # \u79fb\u9664\u7b5b\u9009\u6307\u793a\u7b26\n            if column_name.endswith(\" \u23f7\"):\n                column_name = column_name[:-2].strip()\n            self.filterClicked.emit(index, column_name)\n            return\n    super().mousePressEvent(event)\n</code></pre>"},{"location":"API/resource_query/#src.components.ResourceQuery.ResourceQueryTool.CustomHeaderView.set_filter","title":"<code>set_filter(column_name, selected_values)</code>","text":"<p>\u8bbe\u7f6e\u5217\u7b5b\u9009\u6761\u4ef6</p> Source code in <code>src\\components\\ResourceQuery\\ResourceQueryTool.py</code> <pre><code>def set_filter(self, column_name, selected_values):\n    \"\"\"\u8bbe\u7f6e\u5217\u7b5b\u9009\u6761\u4ef6\"\"\"\n    if not selected_values or len(selected_values) == 0:\n        # \u7a7a\u5217\u8868\u8868\u793a\u65e0\u7b5b\u9009\u6216\u5168\u9009\n        if column_name in self.filters:\n            del self.filters[column_name]\n    else:\n        self.filters[column_name] = selected_values\n</code></pre>"},{"location":"API/resource_query/#src.components.ResourceQuery.ResourceQueryTool.FilterDialog","title":"<code>FilterDialog</code>","text":"<p>               Bases: <code>QDialog</code></p> <p>\u8868\u5934\u7b5b\u9009\u5bf9\u8bdd\u6846</p> Source code in <code>src\\components\\ResourceQuery\\ResourceQueryTool.py</code> <pre><code>class FilterDialog(QDialog):\n    \"\"\"\u8868\u5934\u7b5b\u9009\u5bf9\u8bdd\u6846\"\"\"\n    filterChanged = pyqtSignal(str, list)  # column_name, selected_values\n\n    def __init__(self, column_name, unique_values, selected_values=None, parent=None):\n        super().__init__(parent)\n        self.column_name = column_name\n        self.unique_values = unique_values\n        self.selected_values = selected_values or []\n        self.checkboxes = []\n\n        self.setWindowTitle(f\"\u7b5b\u9009 - {column_name}\")\n        self.setFixedSize(300, 400)\n        self.setupUI()\n\n    def setupUI(self):\n        layout = QVBoxLayout(self)\n\n        # \u5168\u9009/\u53d6\u6d88\u5168\u9009\u6309\u94ae\n        button_layout = QHBoxLayout()\n        self.select_all_btn = QPushButton(\"\u5168\u9009\")\n        self.deselect_all_btn = QPushButton(\"\u53d6\u6d88\u5168\u9009\")\n        self.select_all_btn.clicked.connect(self.select_all)\n        self.deselect_all_btn.clicked.connect(self.deselect_all)\n        button_layout.addWidget(self.select_all_btn)\n        button_layout.addWidget(self.deselect_all_btn)\n        layout.addLayout(button_layout)\n\n        # \u6eda\u52a8\u533a\u57df\u5305\u542b\u7b5b\u9009\u9879\n        scroll = QScrollArea()\n        scroll_widget = QWidget()\n        scroll_layout = QVBoxLayout(scroll_widget)\n\n        # \u6dfb\u52a0\"\u5168\u90e8\"\u9009\u9879\n        all_checkbox = QCheckBox(\"(\u5168\u90e8)\")\n        all_checkbox.setChecked(len(self.selected_values) == 0 or len(self.selected_values) == len(self.unique_values))\n        all_checkbox.stateChanged.connect(self.all_checkbox_changed)\n        scroll_layout.addWidget(all_checkbox)\n        self.all_checkbox = all_checkbox\n\n        # \u6dfb\u52a0\u5206\u9694\u7ebf\n        line = QFrame()\n        line.setFrameShape(QFrame.HLine)\n        line.setFrameShadow(QFrame.Sunken)\n        scroll_layout.addWidget(line)\n\n        # \u6dfb\u52a0\u5404\u4e2a\u503c\u7684\u9009\u9879\n        for value in sorted(self.unique_values, key=lambda x: str(x)):\n            if pd.isna(value):\n                continue\n            checkbox = QCheckBox(str(value))\n            checkbox.setChecked(len(self.selected_values) == 0 or str(value) in self.selected_values)\n            scroll_layout.addWidget(checkbox)\n            self.checkboxes.append(checkbox)\n\n        scroll.setWidget(scroll_widget)\n        layout.addWidget(scroll)\n\n        # \u786e\u5b9a/\u53d6\u6d88\u6309\u94ae\n        button_layout2 = QHBoxLayout()\n        self.ok_btn = QPushButton(\"\u786e\u5b9a\")\n        self.cancel_btn = QPushButton(\"\u53d6\u6d88\")\n        self.ok_btn.clicked.connect(self.accept)\n        self.cancel_btn.clicked.connect(self.reject)\n        button_layout2.addWidget(self.ok_btn)\n        button_layout2.addWidget(self.cancel_btn)\n        layout.addLayout(button_layout2)\n\n    def all_checkbox_changed(self, state):\n        \"\"\"\u5168\u90e8\u9009\u9879\u53d8\u5316\u65f6\u7684\u5904\u7406\"\"\"\n        checked = state == Qt.Checked\n        for checkbox in self.checkboxes:\n            checkbox.setChecked(checked)\n\n    def select_all(self):\n        \"\"\"\u5168\u9009\"\"\"\n        self.all_checkbox.setChecked(True)\n        for checkbox in self.checkboxes:\n            checkbox.setChecked(True)\n\n    def deselect_all(self):\n        \"\"\"\u53d6\u6d88\u5168\u9009\"\"\"\n        self.all_checkbox.setChecked(False)\n        for checkbox in self.checkboxes:\n            checkbox.setChecked(False)\n\n    def get_selected_values(self):\n        \"\"\"\u83b7\u53d6\u9009\u4e2d\u7684\u503c\"\"\"\n        if self.all_checkbox.isChecked():\n            return []  # \u7a7a\u5217\u8868\u8868\u793a\u5168\u9009\n        selected = []\n        for checkbox in self.checkboxes:\n            if checkbox.isChecked():\n                selected.append(checkbox.text())\n        return selected\n\n    def accept(self):\n        \"\"\"\u786e\u5b9a\u6309\u94ae\u70b9\u51fb\"\"\"\n        selected = self.get_selected_values()\n        self.filterChanged.emit(self.column_name, selected)\n        super().accept()\n</code></pre>"},{"location":"API/resource_query/#src.components.ResourceQuery.ResourceQueryTool.FilterDialog.accept","title":"<code>accept()</code>","text":"<p>\u786e\u5b9a\u6309\u94ae\u70b9\u51fb</p> Source code in <code>src\\components\\ResourceQuery\\ResourceQueryTool.py</code> <pre><code>def accept(self):\n    \"\"\"\u786e\u5b9a\u6309\u94ae\u70b9\u51fb\"\"\"\n    selected = self.get_selected_values()\n    self.filterChanged.emit(self.column_name, selected)\n    super().accept()\n</code></pre>"},{"location":"API/resource_query/#src.components.ResourceQuery.ResourceQueryTool.FilterDialog.all_checkbox_changed","title":"<code>all_checkbox_changed(state)</code>","text":"<p>\u5168\u90e8\u9009\u9879\u53d8\u5316\u65f6\u7684\u5904\u7406</p> Source code in <code>src\\components\\ResourceQuery\\ResourceQueryTool.py</code> <pre><code>def all_checkbox_changed(self, state):\n    \"\"\"\u5168\u90e8\u9009\u9879\u53d8\u5316\u65f6\u7684\u5904\u7406\"\"\"\n    checked = state == Qt.Checked\n    for checkbox in self.checkboxes:\n        checkbox.setChecked(checked)\n</code></pre>"},{"location":"API/resource_query/#src.components.ResourceQuery.ResourceQueryTool.FilterDialog.deselect_all","title":"<code>deselect_all()</code>","text":"<p>\u53d6\u6d88\u5168\u9009</p> Source code in <code>src\\components\\ResourceQuery\\ResourceQueryTool.py</code> <pre><code>def deselect_all(self):\n    \"\"\"\u53d6\u6d88\u5168\u9009\"\"\"\n    self.all_checkbox.setChecked(False)\n    for checkbox in self.checkboxes:\n        checkbox.setChecked(False)\n</code></pre>"},{"location":"API/resource_query/#src.components.ResourceQuery.ResourceQueryTool.FilterDialog.get_selected_values","title":"<code>get_selected_values()</code>","text":"<p>\u83b7\u53d6\u9009\u4e2d\u7684\u503c</p> Source code in <code>src\\components\\ResourceQuery\\ResourceQueryTool.py</code> <pre><code>def get_selected_values(self):\n    \"\"\"\u83b7\u53d6\u9009\u4e2d\u7684\u503c\"\"\"\n    if self.all_checkbox.isChecked():\n        return []  # \u7a7a\u5217\u8868\u8868\u793a\u5168\u9009\n    selected = []\n    for checkbox in self.checkboxes:\n        if checkbox.isChecked():\n            selected.append(checkbox.text())\n    return selected\n</code></pre>"},{"location":"API/resource_query/#src.components.ResourceQuery.ResourceQueryTool.FilterDialog.select_all","title":"<code>select_all()</code>","text":"<p>\u5168\u9009</p> Source code in <code>src\\components\\ResourceQuery\\ResourceQueryTool.py</code> <pre><code>def select_all(self):\n    \"\"\"\u5168\u9009\"\"\"\n    self.all_checkbox.setChecked(True)\n    for checkbox in self.checkboxes:\n        checkbox.setChecked(True)\n</code></pre>"},{"location":"API/resource_query/#src.components.ResourceQuery.ResourceQueryTool.ResourceQueryTool","title":"<code>ResourceQueryTool</code>","text":"<p>               Bases: <code>QWidget</code></p> Source code in <code>src\\components\\ResourceQuery\\ResourceQueryTool.py</code> <pre><code>class ResourceQueryTool(QWidget):\n    def __init__(self, parent=None):\n        super().__init__(parent)\n        self.ui = Ui_ResourceQueryTool()\n        self.ui.setupUi(self)\n\n        self.df = pd.DataFrame()\n        self.filtered_df = pd.DataFrame()\n        self.current_excel_path = None  # \u542f\u52a8\u65f6\u4e0d\u8bbe\u7f6e\u9ed8\u8ba4\u6587\u4ef6\n        self.column_filters = {}  # \u5b58\u50a8\u6bcf\u5217\u7684\u7b5b\u9009\u6761\u4ef6\n\n        # \u8bbe\u7f6e\u81ea\u5b9a\u4e49\u8868\u5934\n        self.header = CustomHeaderView(Qt.Horizontal, self.ui.table)\n        self.ui.table.setHorizontalHeader(self.header)\n        self.header.setSectionResizeMode(QHeaderView.ResizeToContents)\n        self.header.filterClicked.connect(self.show_column_filter)\n\n        # \u4fe1\u53f7\u7ed1\u5b9a\n        self.ui.edit_search.textChanged.connect(self._apply_filter)\n        self.ui.btn_choose.clicked.connect(self._choose_excel)\n        self.ui.btn_reset.clicked.connect(self._reset_filters)\n        self.ui.btn_reload.clicked.connect(self._reload_data)\n\n        # \u521d\u59cb\u5316\uff0c\u7528\u6237\u9009\u62e9\u6587\u4ef6\n        self._update_window_title()\n        self._apply_filter()\n\n        try:\n            icon_path = os.path.join(os.path.dirname(os.path.dirname(os.path.abspath(__file__))),\n                                        \"assets\", \"icon\", \"\u4e2d\u592e\u5904\u7406\u5668.svg\")\n            if os.path.exists(icon_path):\n                self.setWindowIcon(QIcon(icon_path))\n        except Exception as e:\n            print(f\"\u8bbe\u7f6e\u56fe\u6807\u5931\u8d25: {e}\")\n\n    def _update_window_title(self):\n        if self.current_excel_path:\n            base = os.path.basename(self.current_excel_path)\n            self.setWindowTitle(f\"\u8d44\u6e90\u7d22\u5f15\u67e5\u8be2 - {base}\")\n        else:\n            self.setWindowTitle(\"\u8d44\u6e90\u7d22\u5f15\u67e5\u8be2\")\n\n    def _load_data(self):\n        try:\n            if not self.current_excel_path:\n                self.df = pd.DataFrame()\n                self.ui.label_status.setText('\u672a\u9009\u62e9\u8d44\u6e90\u8868\u6587\u4ef6')\n                self._render_table()  # \u6e05\u7a7a\u8868\u683c\u5934\n                return\n            self.df = pd.read_excel(self.current_excel_path)\n            self.ui.label_status.setText('\u52a0\u8f7d\u5b8c\u6210')\n        except Exception as e:\n            self.df = pd.DataFrame()\n            self.ui.label_status.setText(f'\u52a0\u8f7d\u5931\u8d25\uff1a{e}')\n        finally:\n            self._update_window_title()\n\n    def _reload_data(self):\n        self._load_data()\n        self._reset_filters()\n        self._apply_filter()\n\n    def show_column_filter(self, column_index, column_name):\n        \"\"\"\u663e\u793a\u5217\u7b5b\u9009\u5bf9\u8bdd\u6846\"\"\"\n        if self.df.empty or column_name not in self.df.columns:\n            return\n\n        # \u57fa\u4e8e\u5f53\u524d\u8fc7\u6ee4\u7ed3\u679c\uff08\u6392\u9664\u672c\u5217\u7684\u7b5b\u9009\uff09\u8ba1\u7b97\u552f\u4e00\u503c\uff0c\u4fdd\u8bc1\u7528\u6237\u53ef\u4ee5\u591a\u6b21\u7cbe\u70bc\u7b5b\u9009\n        df_temp = self.df.copy()\n        # \u5e94\u7528\u9664\u5f53\u524d\u5217\u5916\u7684\u5217\u5934\u7b5b\u9009\n        for col, vals in self.column_filters.items():\n            if col == column_name:\n                continue\n            if col in df_temp.columns and vals:\n                df_temp = df_temp[df_temp[col].astype(str).isin(vals)]\n        # \u5e94\u7528\u5173\u952e\u5b57\u8fc7\u6ee4\n        kw = self.ui.edit_search.text().strip()\n        if kw and not df_temp.empty:\n            mask = pd.Series([False] * len(df_temp))\n            kw_py_full = self._to_pinyin(kw)\n            kw_py_init = self._to_pinyin_initials(kw)\n            for c in df_temp.columns:\n                series = df_temp[c].astype(str)\n                col_mask = series.str.contains(kw, case=False, na=False)\n                if PINYIN_AVAILABLE:\n                    def cell_match(cell):\n                        if pd.isna(cell):\n                            return False\n                        s = str(cell)\n                        if any('\\u4e00' &lt;= ch &lt;= '\\u9fff' for ch in s):\n                            py_full = ''.join(lazy_pinyin(s)).lower()\n                            if kw.lower() in py_full or kw_py_full in py_full:\n                                return True\n                            py_init = ''.join(lazy_pinyin(s, style=Style.FIRST_LETTER)).lower()\n                            if kw.lower() in py_init or kw_py_init in py_init:\n                                return True\n                        return False\n\n                    col_mask |= series.apply(cell_match)\n                mask |= col_mask\n            df_temp = df_temp[mask]\n\n        unique_values = pd.unique(df_temp[column_name]).tolist() if column_name in df_temp.columns else []\n        selected_values = self.column_filters.get(column_name, [])\n\n        dialog = FilterDialog(column_name, unique_values, selected_values, self)\n        dialog.filterChanged.connect(self.apply_column_filter)\n        dialog.exec_()\n\n    def apply_column_filter(self, column_name, selected_values):\n        \"\"\"\u5e94\u7528\u5217\u7b5b\u9009\"\"\"\n        if not selected_values or len(selected_values) == 0:\n            # \u79fb\u9664\u7b5b\u9009\n            if column_name in self.column_filters:\n                del self.column_filters[column_name]\n        else:\n            self.column_filters[column_name] = selected_values\n\n        # \u66f4\u65b0\u8868\u5934\u6837\u5f0f\uff08\u53ef\u9009\uff1a\u663e\u793a\u7b5b\u9009\u72b6\u6001\uff09\n        self.header.set_filter(column_name, selected_values)\n\n        # \u91cd\u65b0\u5e94\u7528\u7b5b\u9009\n        self._apply_filter()\n\n    def _reset_filters(self):\n        self.ui.edit_search.clear()\n        self.column_filters.clear()\n        self.header.filters.clear()\n        self._apply_filter()\n\n    def _to_pinyin(self, text: str) -&gt; str:\n        \"\"\"\n        \u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u8fde\u7eed\u62fc\u97f3\u5b57\u7b26\u4e32\uff08\u4e0d\u542b\u7a7a\u683c\uff09\uff0c\u4ec5\u5f53 pypinyin \u53ef\u7528\u65f6\uff1b\u5426\u5219\u8fd4\u56de\u539f\u6587\u672c\u3002\n        \u540c\u65f6\u63d0\u4f9b\u9996\u5b57\u6bcd\u5f62\u5f0f\uff0c\u4fbf\u4e8e\u6a21\u7cca\u5339\u914d\u3002\n        \"\"\"\n        if not isinstance(text, str):\n            text = str(text)\n        if not PINYIN_AVAILABLE:\n            return text.lower()\n        pys = lazy_pinyin(text)\n        return ''.join(pys).lower()\n\n    def _to_pinyin_initials(self, text: str) -&gt; str:\n        \"\"\"\u5c06\u6587\u672c\u8f6c\u6362\u4e3a\u62fc\u97f3\u9996\u5b57\u6bcd\u7ec4\u5408\uff0c\u4f8b\u5982\"\u4e2d\u6587\"-&gt;\"zw\"\u3002\"\"\"\n        if not isinstance(text, str):\n            text = str(text)\n        if not PINYIN_AVAILABLE:\n            return text.lower()\n        initials = lazy_pinyin(text, style=Style.FIRST_LETTER)\n        return ''.join(initials).lower()\n\n    def _match_with_pinyin(self, cell_text: str, keyword: str) -&gt; bool:\n        \"\"\"\n        \u8fdb\u884c\u5305\u542b\u5339\u914d\uff0c\u652f\u6301\uff1a\n        - \u539f\u6587\u5305\u542b\uff08\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff09\n        - \u62fc\u97f3\u5168\u62fc\u5305\u542b\n        - \u62fc\u97f3\u9996\u5b57\u6bcd\u5305\u542b\n        \"\"\"\n        if not isinstance(cell_text, str):\n            cell_text = str(cell_text)\n        if not isinstance(keyword, str):\n            keyword = str(keyword)\n        s = cell_text.lower()\n        kw = keyword.lower()\n        if kw in s:\n            return True\n        # \u5f53\u5305\u542b\u4e2d\u6587\u65f6\uff0c\u5c1d\u8bd5\u62fc\u97f3\u5339\u914d\n        if any('\\u4e00' &lt;= ch &lt;= '\\u9fff' for ch in cell_text):\n            py_full = self._to_pinyin(cell_text)\n            if kw in py_full:\n                return True\n            py_init = self._to_pinyin_initials(cell_text)\n            if kw in py_init:\n                return True\n        return False\n\n    def _apply_filter(self):\n        \"\"\"\n        \u5e94\u7528\u7b5b\u9009\u6761\u4ef6\u5230\u6570\u636e\u6846\u5e76\u66f4\u65b0\u663e\u793a\u8868\u683c\n\n        \u8be5\u51fd\u6570\u6839\u636e\u754c\u9762\u4e2d\u7684\u7b5b\u9009\u6761\u4ef6\u5bf9\u539f\u59cb\u6570\u636e\u8fdb\u884c\u8fc7\u6ee4\uff0c\u5305\u62ec\u5217\u5934\u7b5b\u9009\u548c\u5173\u952e\u5b57\u6a21\u7cca\u5339\u914d\uff0c\n        \u7136\u540e\u5c06\u7b5b\u9009\u7ed3\u679c\u4fdd\u5b58\u5230filtered_df\u5c5e\u6027\u4e2d\u5e76\u91cd\u65b0\u6e32\u67d3\u8868\u683c\u663e\u793a\u3002\n        \"\"\"\n        if self.df.empty:\n            self.filtered_df = pd.DataFrame()\n            self._render_table()\n            return\n\n        df = self.df.copy()\n\n        # \u5e94\u7528\u5217\u5934\u7b5b\u9009\n        for column_name, selected_values in self.column_filters.items():\n            if column_name in df.columns and selected_values:\n                df = df[df[column_name].astype(str).isin(selected_values)]\n\n        # \u5173\u952e\u5b57\u6a21\u7cca\u5339\u914d\uff08\u4efb\u610f\u5217\u5305\u542b\uff09\uff0c\u6269\u5c55\u652f\u6301\u62fc\u97f3\n        kw = self.ui.edit_search.text().strip()\n        if kw:\n            mask = pd.Series([False] * len(df))\n            # \u9884\u5904\u7406\uff1a\u5f53\u5173\u952e\u8bcd\u662f\u4e2d\u6587\u65f6\uff0c\u6784\u5efa\u5176\u62fc\u97f3\u4e0e\u9996\u5b57\u6bcd\uff0c\u4fbf\u4e8e\u53cd\u5411\u5339\u914d\n            kw_py_full = self._to_pinyin(kw)\n            kw_py_init = self._to_pinyin_initials(kw)\n            for c in df.columns:\n                series = df[c].astype(str)\n                # \u5148\u505a\u539f\u6587\u5305\u542b\uff08\u5ffd\u7565\u5927\u5c0f\u5199\uff09\n                col_mask = series.str.contains(kw, case=False, na=False)\n                # \u518d\u505a\u62fc\u97f3\u5339\u914d\uff1a\u4ec5\u5bf9\u5305\u542b\u4e2d\u6587\u7684\u5355\u5143\u683c\u505a\u8f6c\u6362\u4ee5\u964d\u4f4e\u5f00\u9500\n                if PINYIN_AVAILABLE:\n                    # \u751f\u6210\u8be5\u5217\u7684\u62fc\u97f3\u7f13\u5b58\u4ee5\u51cf\u5c11\u91cd\u590d\u8f6c\u6362\n                    def cell_match(cell):\n                        if pd.isna(cell):\n                            return False\n                        s = str(cell)\n                        # \u539f\u6587\u5339\u914d\u5df2\u505a\u8fc7\uff0c\u8fd9\u91cc\u53ea\u5904\u7406\u62fc\u97f3\u60c5\u51b5\n                        if any('\\u4e00' &lt;= ch &lt;= '\\u9fff' for ch in s):\n                            py_full = ''.join(lazy_pinyin(s)).lower()\n                            if kw.lower() in py_full or kw_py_full in py_full:\n                                return True\n                            py_init = ''.join(lazy_pinyin(s, style=Style.FIRST_LETTER)).lower()\n                            if kw.lower() in py_init or kw_py_init in py_init:\n                                return True\n                        return False\n                    col_mask |= series.apply(cell_match)\n                mask |= col_mask\n            df = df[mask]\n\n        self.filtered_df = df\n        self._render_table()\n\n    def _render_table(self):\n        \"\"\"\n        \u6e32\u67d3\u8868\u683c\u6570\u636e\u5230UI\u754c\u9762\n        \"\"\"\n        df = self.filtered_df\n        table = self.ui.table\n        table.clearContents()\n\n        # \u5904\u7406\u7a7a\u6570\u636e\u60c5\u51b5\n        if df.empty:\n            table.setRowCount(0)\n            if not self.df.empty:\n                table.setColumnCount(len(self.df.columns))\n                # \u8bbe\u7f6e\u8868\u5934\u5e76\u6807\u8bc6\u8fc7\u6ee4\u72b6\u6001\n                headers = []\n                for col in self.df.columns.astype(str).tolist():\n                    if col in self.column_filters:\n                        headers.append(f\"{col} \u23f7\")\n                    else:\n                        headers.append(col)\n                table.setHorizontalHeaderLabels(headers)\n                self.ui.label_status.setText('\u5171 0 \u6761')\n            else:\n                table.setColumnCount(0)\n                if not self.current_excel_path:\n                    self.ui.label_status.setText('\u8bf7\u9009\u62e9\u8d44\u6e90\u8868\u6587\u4ef6')\n                else:\n                    self.ui.label_status.setText('\u65e0\u6570\u636e')\n            return\n\n        # \u8bbe\u7f6e\u8868\u683c\u884c\u5217\u6570\u548c\u8868\u5934\n        table.setColumnCount(len(df.columns))\n        table.setRowCount(len(df))\n        # \u8bbe\u7f6e\u8868\u5934\u5e76\u6807\u8bc6\u8fc7\u6ee4\u72b6\u6001\n        headers = []\n        for col in df.columns.astype(str).tolist():\n            if col in self.column_filters:\n                headers.append(f\"{col} \u23f7\")\n            else:\n                headers.append(col)\n        table.setHorizontalHeaderLabels(headers)\n\n        # \u586b\u5145\u8868\u683c\u6570\u636e\n        for i, (_, row) in enumerate(df.iterrows()):\n            for j, col in enumerate(df.columns):\n                val = row[col]\n                text = '' if pd.isna(val) else str(val)\n                item = QTableWidgetItem(text)\n                item.setTextAlignment(Qt.AlignCenter)\n                item.setFont(QFont('Arial', 10))\n                table.setItem(i, j, item)\n\n        # \u8c03\u6574\u5217\u5bbd\u5e76\u66f4\u65b0\u72b6\u6001\u6807\u7b7e\n        table.resizeColumnsToContents()\n        self.ui.label_status.setText(f'\u5171 {len(df)} \u6761')\n\n    def _choose_excel(self):\n        if self.current_excel_path:\n            start_dir = os.path.dirname(self.current_excel_path)\n        else:\n            start_dir = os.path.join(os.path.dirname(os.path.dirname(os.path.dirname(__file__))), 'configFiles')\n            if not os.path.exists(start_dir):\n                start_dir = os.getcwd()\n        path, _ = QFileDialog.getOpenFileName(self, '\u9009\u62e9\u8d44\u6e90\u8868 Excel \u6587\u4ef6', start_dir, 'Excel \u6587\u4ef6 (*.xlsx *.xls)')\n        if not path:\n            return\n        self.current_excel_path = path\n        self._reload_data()\n        self._update_window_title()\n</code></pre>"},{"location":"API/resource_query/#src.components.ResourceQuery.ResourceQueryTool.ResourceQueryTool.apply_column_filter","title":"<code>apply_column_filter(column_name, selected_values)</code>","text":"<p>\u5e94\u7528\u5217\u7b5b\u9009</p> Source code in <code>src\\components\\ResourceQuery\\ResourceQueryTool.py</code> <pre><code>def apply_column_filter(self, column_name, selected_values):\n    \"\"\"\u5e94\u7528\u5217\u7b5b\u9009\"\"\"\n    if not selected_values or len(selected_values) == 0:\n        # \u79fb\u9664\u7b5b\u9009\n        if column_name in self.column_filters:\n            del self.column_filters[column_name]\n    else:\n        self.column_filters[column_name] = selected_values\n\n    # \u66f4\u65b0\u8868\u5934\u6837\u5f0f\uff08\u53ef\u9009\uff1a\u663e\u793a\u7b5b\u9009\u72b6\u6001\uff09\n    self.header.set_filter(column_name, selected_values)\n\n    # \u91cd\u65b0\u5e94\u7528\u7b5b\u9009\n    self._apply_filter()\n</code></pre>"},{"location":"API/resource_query/#src.components.ResourceQuery.ResourceQueryTool.ResourceQueryTool.show_column_filter","title":"<code>show_column_filter(column_index, column_name)</code>","text":"<p>\u663e\u793a\u5217\u7b5b\u9009\u5bf9\u8bdd\u6846</p> Source code in <code>src\\components\\ResourceQuery\\ResourceQueryTool.py</code> <pre><code>def show_column_filter(self, column_index, column_name):\n    \"\"\"\u663e\u793a\u5217\u7b5b\u9009\u5bf9\u8bdd\u6846\"\"\"\n    if self.df.empty or column_name not in self.df.columns:\n        return\n\n    # \u57fa\u4e8e\u5f53\u524d\u8fc7\u6ee4\u7ed3\u679c\uff08\u6392\u9664\u672c\u5217\u7684\u7b5b\u9009\uff09\u8ba1\u7b97\u552f\u4e00\u503c\uff0c\u4fdd\u8bc1\u7528\u6237\u53ef\u4ee5\u591a\u6b21\u7cbe\u70bc\u7b5b\u9009\n    df_temp = self.df.copy()\n    # \u5e94\u7528\u9664\u5f53\u524d\u5217\u5916\u7684\u5217\u5934\u7b5b\u9009\n    for col, vals in self.column_filters.items():\n        if col == column_name:\n            continue\n        if col in df_temp.columns and vals:\n            df_temp = df_temp[df_temp[col].astype(str).isin(vals)]\n    # \u5e94\u7528\u5173\u952e\u5b57\u8fc7\u6ee4\n    kw = self.ui.edit_search.text().strip()\n    if kw and not df_temp.empty:\n        mask = pd.Series([False] * len(df_temp))\n        kw_py_full = self._to_pinyin(kw)\n        kw_py_init = self._to_pinyin_initials(kw)\n        for c in df_temp.columns:\n            series = df_temp[c].astype(str)\n            col_mask = series.str.contains(kw, case=False, na=False)\n            if PINYIN_AVAILABLE:\n                def cell_match(cell):\n                    if pd.isna(cell):\n                        return False\n                    s = str(cell)\n                    if any('\\u4e00' &lt;= ch &lt;= '\\u9fff' for ch in s):\n                        py_full = ''.join(lazy_pinyin(s)).lower()\n                        if kw.lower() in py_full or kw_py_full in py_full:\n                            return True\n                        py_init = ''.join(lazy_pinyin(s, style=Style.FIRST_LETTER)).lower()\n                        if kw.lower() in py_init or kw_py_init in py_init:\n                            return True\n                    return False\n\n                col_mask |= series.apply(cell_match)\n            mask |= col_mask\n        df_temp = df_temp[mask]\n\n    unique_values = pd.unique(df_temp[column_name]).tolist() if column_name in df_temp.columns else []\n    selected_values = self.column_filters.get(column_name, [])\n\n    dialog = FilterDialog(column_name, unique_values, selected_values, self)\n    dialog.filterChanged.connect(self.apply_column_filter)\n    dialog.exec_()\n</code></pre>"},{"location":"API/rt_data_plot/","title":"\u5b9e\u65f6\u6570\u636e\u7ed8\u56fe RTDataPlot API","text":""},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo","title":"<code>src.components.RTDataPlot.RTdata_plot_demo</code>","text":""},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo--_1","title":"\u66f2\u7ebf\u5b9e\u65f6\u7ed8\u5236\u6a21\u5757","text":"<p>\u529f\u80fd\uff1a - \u53ef\u8bbe\u7f6eX\u8f74(\u56fa\u5b9a/\u6eda\u52a8)\u548cY\u8f74(\u56fa\u5b9a/\u81ea\u52a8)\u6a21\u5f0f - \u53ef\u9009\u62e9\u662f\u5426\u4fdd\u5b58\u66f2\u7ebf\u6570\u636e - \u53ef\u5bf9\u5f85\u7ed8\u5236\u6570\u636e\u8fdb\u884c\u9009\u62e9\u5e76\u8fdb\u884c\u989c\u8272\u914d\u7f6e - \u53ef\u8fdb\u884c\u6570\u636e\u5b58\u50a8</p> <p>\u4f7f\u7528\u65b9\u6cd5\uff1a - \u8be5\u5de5\u5177\u5177\u6709\u72ec\u7acb\u53ef\u8fd0\u884c\u7684\u754c\u9762\uff0c \u4e5f\u53ef\u4ee5\u5c06\u5176\u4f5c\u4e3a\u6a21\u5757\u5d4c\u5165\u5230\u5176\u4ed6\u754c\u9762\u4e2d - \u6570\u636e\u6e90\u4e3a\u5b9e\u65f6\u6570\u636e\uff0c\u6570\u636e\u683c\u5f0f\u4e3a\u5b57\u5178\uff0c\u5305\u542b\u591a\u4e2a\u952e\u503c\u5bf9\uff0c\u6bcf\u4e2a\u952e\u503c\u5bf9\u8868\u793a\u4e00\u6761\u66f2\u7ebf\u7684\u6570\u636e - DataThread\u7c7b\u4e3a\u6570\u636e\u83b7\u53d6\u7ebf\u7a0b,\u8d1f\u8d23\u4ece\u6570\u636e\u6e90\u83b7\u53d6\u6570\u636e\u5e76\u4f20\u9012\u7ed9\u4e3b\u7ebf\u7a0b\u8fdb\u884c\u7ed8\u5236,\u53ef\u5728DataThread\u4e2d\u66ff\u6362\u771f\u5b9e\u6570\u636e\u6e90</p> <p>Author: JIN &amp;&amp; jjyrealdeal@163.com Date: 2025-07-14 11:55:30 Copyright (c) 2025 by JIN, All Rights Reserved.</p>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.CurveDialog","title":"<code>CurveDialog</code>","text":"<p>               Bases: <code>QDialog</code>, <code>Ui_Dialog_Select</code></p> <p>\u66f2\u7ebf\u9009\u62e9\u4e0e\u989c\u8272\u8bbe\u7f6e\u5bf9\u8bdd\u6846</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>class CurveDialog(QDialog, Ui_Dialog_Select):\n    \"\"\"\u66f2\u7ebf\u9009\u62e9\u4e0e\u989c\u8272\u8bbe\u7f6e\u5bf9\u8bdd\u6846\"\"\"\n    config_updated = pyqtSignal(dict)\n\n    def __init__(self,parent=None):\n        super(CurveDialog,self).__init__(parent)\n        self.setupUi(self)\n        self.data_keys = list(_CONFIG.keys())\n        self.checked_count = 0\n        self.max_checked = 8   # \u8bbe\u7f6e\u6700\u591a\u663e\u793a8\u6761\u66f2\u7ebf\n        self.init_ui()\n        self.init_data()\n        self.update_checkbox_enabled_state()\n\n\n    def init_ui(self):\n        \"\"\"\u521d\u59cb\u5316\u754c\u9762\"\"\"\n        self.setWindowTitle('\u9009\u62e9\u6570\u636e')\n        self.tableWidget_data.setColumnCount(3)\n        self.tableWidget_data.setHorizontalHeaderLabels(['\u542f\u7528', '\u540d\u79f0', '\u989c\u8272'])\n        self.tableWidget_data.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)\n        self.tableWidget_data.setSelectionMode(QAbstractItemView.NoSelection)\n        self.tableWidget_data.setColumnWidth(0, 60)\n        self.tableWidget_data.setColumnWidth(1, 200)\n        self.tableWidget_data.setColumnWidth(2, 60)\n\n        header = self.tableWidget_data.horizontalHeader()\n        header.setSectionResizeMode(0, QHeaderView.ResizeMode.Fixed)\n        header.setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)\n        header.setSectionResizeMode(2, QHeaderView.ResizeMode.Fixed)\n\n        self.buttonBox.accepted.connect(self.on_ok_clicked)\n\n\n\n    def init_data(self):\n        \"\"\"\u521d\u59cb\u5316\u6570\u636e\"\"\"\n        # \u586b\u5145\u6570\u636e\n        self.tableWidget_data.setRowCount(len(_CONFIG))\n        for row, key in enumerate(self.data_keys):\n            config = _CONFIG[key]\n\n            # \u7b2c\u4e00\u5217\uff1acheckbox\n            checkbox = QCheckBox()\n            is_checked = config.get(\"visible\", False)\n            checkbox.setChecked(is_checked)\n            if is_checked:\n                self.checked_count += 1\n\n            checkbox.stateChanged.connect(self.generate_checkbox_handler(row, key))\n\n            #  \u5305\u88c5\u6210\u5c45\u4e2d\u7684 QWidget\n            center_widget = QWidget()\n            layout = QHBoxLayout(center_widget)\n            layout.addWidget(checkbox)\n            layout.setAlignment(Qt.AlignCenter)\n            layout.setContentsMargins(0, 0, 0, 0)\n\n            self.tableWidget_data.setCellWidget(row, 0, center_widget)\n\n            # \u7b2c\u4e8c\u5217\uff1aname\n            item = QTableWidgetItem(config.get(\"name\", \"\"))\n            item.setFlags(item.flags() ^ Qt.ItemIsEditable)\n            self.tableWidget_data.setItem(row, 1, item)\n\n            # \u7b2c\u4e09\u5217\uff1a\u989c\u8272\u6309\u94ae\n            color = QColor(config.get(\"color\", \"#000000\"))\n            color_btn = QPushButton()\n            color_btn.setIcon(self.colored_icon(color))\n            color_btn.setIconSize(QSize(24, 24))\n            color_btn.clicked.connect(self.generate_color_button_handler(row, key))\n            self.tableWidget_data.setCellWidget(row, 2, color_btn)\n\n\n\n    def generate_checkbox_handler(self, row, key):\n        \"\"\"\n        \u751f\u6210checkbox\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\n\n        :param row: \u884c\u53f7\uff0c\u7528\u4e8e\u5b9a\u4f4d\u8868\u683c\u4e2d\u7684checkbox\u63a7\u4ef6\n        :param key: \u914d\u7f6e\u9879\u7684\u952e\u503c\uff0c\u7528\u4e8e\u66f4\u65b0\u5bf9\u5e94\u7684\u914d\u7f6e\u72b6\u6001\n        :return: \u8fd4\u56de\u4e00\u4e2a\u5904\u7406checkbox\u72b6\u6001\u53d8\u5316\u7684\u95ed\u5305\u51fd\u6570\n        \"\"\"\n        def handler(state):\n            # \u83b7\u53d6\u6307\u5b9a\u884c\u548c\u5217\u7684\u5355\u5143\u683c\u63a7\u4ef6\uff0c\u5e76\u67e5\u627e\u5176\u4e2d\u7684checkbox\n            cell_widget = self.tableWidget_data.cellWidget(row, 0)\n            checkbox = cell_widget.findChild(QCheckBox) if cell_widget else None\n\n            # \u5904\u7406checkbox\u9009\u4e2d\u72b6\u6001\u7684\u53d8\u5316\n            if state == Qt.Checked:\n                # \u68c0\u67e5\u662f\u5426\u8d85\u8fc7\u6700\u5927\u9009\u4e2d\u6570\u91cf\u9650\u5236\n                if self.checked_count &gt;= self.max_checked:\n                    # \u8d85\u8fc7\u9650\u5236\u65f6\uff0c\u963b\u6b62\u4fe1\u53f7\u5e76\u53d6\u6d88\u9009\u4e2d\u72b6\u6001\n                    checkbox.blockSignals(True)\n                    checkbox.setChecked(False)\n                    checkbox.blockSignals(False)\n                    return\n                self.checked_count += 1\n            else:\n                # \u53d6\u6d88\u9009\u4e2d\u65f6\u51cf\u5c11\u8ba1\u6570\n                self.checked_count -= 1\n\n            # \u66f4\u65b0\u914d\u7f6e\u6587\u4ef6\u4e2d\u5bf9\u5e94\u9879\u7684\u53ef\u89c1\u6027\u8bbe\u7f6e\n            _CONFIG[key][\"visible\"] = (state == Qt.Checked)\n            save_config()\n\n            # \u66f4\u65b0\u6240\u6709checkbox\u7684\u53ef\u7528\u72b6\u6001\n            self.update_checkbox_enabled_state()\n\n        return handler\n\n\n    def update_checkbox_enabled_state(self):\n        \"\"\"\u66f4\u65b0\u6240\u6709 checkbox \u7684\u53ef\u7528\u72b6\u6001\"\"\"\n        for row, key in enumerate(self.data_keys):\n            cell_widget = self.tableWidget_data.cellWidget(row, 0)\n            checkbox = cell_widget.findChild(QCheckBox) if cell_widget else None\n            if checkbox:\n                if not checkbox.isChecked():\n                    checkbox.setEnabled(self.checked_count &lt; self.max_checked)\n\n\n\n    def generate_color_button_handler(self, row, key):\n        \"\"\"\n        \u751f\u6210\u989c\u8272\u6309\u94ae\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\n\n        \u8be5\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u95ed\u5305\uff0c\u7528\u4e8e\u5904\u7406\u989c\u8272\u9009\u62e9\u6309\u94ae\u7684\u70b9\u51fb\u4e8b\u4ef6\u3002\u5f53\u6309\u94ae\u88ab\u70b9\u51fb\u65f6\uff0c\n        \u4f1a\u6253\u5f00\u989c\u8272\u9009\u62e9\u5bf9\u8bdd\u6846\uff0c\u5141\u8bb8\u7528\u6237\u9009\u62e9\u65b0\u7684\u989c\u8272\u3002\u5982\u679c\u7528\u6237\u9009\u62e9\u4e86\u6709\u6548\u989c\u8272\uff0c\n        \u5219\u66f4\u65b0\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u989c\u8272\u503c\uff0c\u66f4\u65b0\u6309\u94ae\u56fe\u6807\uff0c\u5e76\u4fdd\u5b58\u914d\u7f6e\u3002\n\n        \u53c2\u6570:\n            row (int): \u8868\u683c\u4e2d\u7684\u884c\u53f7\uff0c\u7528\u4e8e\u5b9a\u4f4d\u9700\u8981\u66f4\u65b0\u7684\u6309\u94ae\u63a7\u4ef6\n            key (str): \u914d\u7f6e\u5b57\u5178\u4e2d\u7684\u952e\u540d\uff0c\u7528\u4e8e\u8bbf\u95ee\u548c\u66f4\u65b0\u5bf9\u5e94\u7684\u914d\u7f6e\u9879\n\n        \u8fd4\u56de:\n            function: \u8fd4\u56de\u4e00\u4e2a\u65e0\u53c2\u7684\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u6355\u83b7row\u548ckey\u53c2\u6570\u5f62\u6210\u95ed\u5305\n        \"\"\"\n        def handler():\n            # \u83b7\u53d6\u5f53\u524d\u914d\u7f6e\u7684\u989c\u8272\u503c\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u4f7f\u7528\u9ed8\u8ba4\u9ed1\u8272\n            current_color = QColor(_CONFIG[key].get(\"color\", \"#000000\"))\n            # \u6253\u5f00\u989c\u8272\u9009\u62e9\u5bf9\u8bdd\u6846\uff0c\u8ba9\u7528\u6237\u9009\u62e9\u65b0\u989c\u8272\n            new_color = QColorDialog.getColor(initial=current_color)\n            # \u5982\u679c\u7528\u6237\u9009\u62e9\u4e86\u6709\u6548\u989c\u8272\uff0c\u5219\u66f4\u65b0\u914d\u7f6e\u548c\u754c\u9762\n            if new_color.isValid():\n                _CONFIG[key][\"color\"] = new_color.name()\n                btn = self.tableWidget_data.cellWidget(row, 2)\n                btn.setIcon(self.colored_icon(new_color))\n                save_config()\n        return handler\n\n\n\n    def colored_icon(self, color: QColor):\n        \"\"\"\u751f\u6210\u4e00\u4e2a\u5e26\u6709\u989c\u8272\u7684\u56fe\u6807\"\"\"\n        pixmap = QPixmap(24, 24)\n        pixmap.fill(Qt.transparent)\n        painter = QPainter(pixmap)\n        painter.setRenderHint(QPainter.Antialiasing)\n        painter.setBrush(color)\n        painter.setPen(Qt.black)\n        painter.drawEllipse(2, 2, 20, 20)\n        painter.end()\n        return QIcon(pixmap)\n\n\n    def on_ok_clicked(self):\n        \"\"\"\u4fdd\u5b58\u914d\u7f6e\u5e76\u5173\u95ed\u5bf9\u8bdd\u6846\"\"\"\n        self.config_updated.emit(_CONFIG)  # \u53d1\u9001\u914d\u7f6e\u66f4\u65b0\u4fe1\u53f7\n        self.accept()  # \u5173\u95ed\u5bf9\u8bdd\u6846\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.CurveDialog.colored_icon","title":"<code>colored_icon(color)</code>","text":"<p>\u751f\u6210\u4e00\u4e2a\u5e26\u6709\u989c\u8272\u7684\u56fe\u6807</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def colored_icon(self, color: QColor):\n    \"\"\"\u751f\u6210\u4e00\u4e2a\u5e26\u6709\u989c\u8272\u7684\u56fe\u6807\"\"\"\n    pixmap = QPixmap(24, 24)\n    pixmap.fill(Qt.transparent)\n    painter = QPainter(pixmap)\n    painter.setRenderHint(QPainter.Antialiasing)\n    painter.setBrush(color)\n    painter.setPen(Qt.black)\n    painter.drawEllipse(2, 2, 20, 20)\n    painter.end()\n    return QIcon(pixmap)\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.CurveDialog.generate_checkbox_handler","title":"<code>generate_checkbox_handler(row, key)</code>","text":"<p>\u751f\u6210checkbox\u4e8b\u4ef6\u5904\u7406\u51fd\u6570</p> <p>:param row: \u884c\u53f7\uff0c\u7528\u4e8e\u5b9a\u4f4d\u8868\u683c\u4e2d\u7684checkbox\u63a7\u4ef6 :param key: \u914d\u7f6e\u9879\u7684\u952e\u503c\uff0c\u7528\u4e8e\u66f4\u65b0\u5bf9\u5e94\u7684\u914d\u7f6e\u72b6\u6001 :return: \u8fd4\u56de\u4e00\u4e2a\u5904\u7406checkbox\u72b6\u6001\u53d8\u5316\u7684\u95ed\u5305\u51fd\u6570</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def generate_checkbox_handler(self, row, key):\n    \"\"\"\n    \u751f\u6210checkbox\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\n\n    :param row: \u884c\u53f7\uff0c\u7528\u4e8e\u5b9a\u4f4d\u8868\u683c\u4e2d\u7684checkbox\u63a7\u4ef6\n    :param key: \u914d\u7f6e\u9879\u7684\u952e\u503c\uff0c\u7528\u4e8e\u66f4\u65b0\u5bf9\u5e94\u7684\u914d\u7f6e\u72b6\u6001\n    :return: \u8fd4\u56de\u4e00\u4e2a\u5904\u7406checkbox\u72b6\u6001\u53d8\u5316\u7684\u95ed\u5305\u51fd\u6570\n    \"\"\"\n    def handler(state):\n        # \u83b7\u53d6\u6307\u5b9a\u884c\u548c\u5217\u7684\u5355\u5143\u683c\u63a7\u4ef6\uff0c\u5e76\u67e5\u627e\u5176\u4e2d\u7684checkbox\n        cell_widget = self.tableWidget_data.cellWidget(row, 0)\n        checkbox = cell_widget.findChild(QCheckBox) if cell_widget else None\n\n        # \u5904\u7406checkbox\u9009\u4e2d\u72b6\u6001\u7684\u53d8\u5316\n        if state == Qt.Checked:\n            # \u68c0\u67e5\u662f\u5426\u8d85\u8fc7\u6700\u5927\u9009\u4e2d\u6570\u91cf\u9650\u5236\n            if self.checked_count &gt;= self.max_checked:\n                # \u8d85\u8fc7\u9650\u5236\u65f6\uff0c\u963b\u6b62\u4fe1\u53f7\u5e76\u53d6\u6d88\u9009\u4e2d\u72b6\u6001\n                checkbox.blockSignals(True)\n                checkbox.setChecked(False)\n                checkbox.blockSignals(False)\n                return\n            self.checked_count += 1\n        else:\n            # \u53d6\u6d88\u9009\u4e2d\u65f6\u51cf\u5c11\u8ba1\u6570\n            self.checked_count -= 1\n\n        # \u66f4\u65b0\u914d\u7f6e\u6587\u4ef6\u4e2d\u5bf9\u5e94\u9879\u7684\u53ef\u89c1\u6027\u8bbe\u7f6e\n        _CONFIG[key][\"visible\"] = (state == Qt.Checked)\n        save_config()\n\n        # \u66f4\u65b0\u6240\u6709checkbox\u7684\u53ef\u7528\u72b6\u6001\n        self.update_checkbox_enabled_state()\n\n    return handler\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.CurveDialog.generate_color_button_handler","title":"<code>generate_color_button_handler(row, key)</code>","text":"<p>\u751f\u6210\u989c\u8272\u6309\u94ae\u4e8b\u4ef6\u5904\u7406\u51fd\u6570</p> <p>\u8be5\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u95ed\u5305\uff0c\u7528\u4e8e\u5904\u7406\u989c\u8272\u9009\u62e9\u6309\u94ae\u7684\u70b9\u51fb\u4e8b\u4ef6\u3002\u5f53\u6309\u94ae\u88ab\u70b9\u51fb\u65f6\uff0c \u4f1a\u6253\u5f00\u989c\u8272\u9009\u62e9\u5bf9\u8bdd\u6846\uff0c\u5141\u8bb8\u7528\u6237\u9009\u62e9\u65b0\u7684\u989c\u8272\u3002\u5982\u679c\u7528\u6237\u9009\u62e9\u4e86\u6709\u6548\u989c\u8272\uff0c \u5219\u66f4\u65b0\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u989c\u8272\u503c\uff0c\u66f4\u65b0\u6309\u94ae\u56fe\u6807\uff0c\u5e76\u4fdd\u5b58\u914d\u7f6e\u3002</p> \u53c2\u6570 <p>row (int): \u8868\u683c\u4e2d\u7684\u884c\u53f7\uff0c\u7528\u4e8e\u5b9a\u4f4d\u9700\u8981\u66f4\u65b0\u7684\u6309\u94ae\u63a7\u4ef6 key (str): \u914d\u7f6e\u5b57\u5178\u4e2d\u7684\u952e\u540d\uff0c\u7528\u4e8e\u8bbf\u95ee\u548c\u66f4\u65b0\u5bf9\u5e94\u7684\u914d\u7f6e\u9879</p> \u8fd4\u56de <p>function: \u8fd4\u56de\u4e00\u4e2a\u65e0\u53c2\u7684\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u6355\u83b7row\u548ckey\u53c2\u6570\u5f62\u6210\u95ed\u5305</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def generate_color_button_handler(self, row, key):\n    \"\"\"\n    \u751f\u6210\u989c\u8272\u6309\u94ae\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\n\n    \u8be5\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u95ed\u5305\uff0c\u7528\u4e8e\u5904\u7406\u989c\u8272\u9009\u62e9\u6309\u94ae\u7684\u70b9\u51fb\u4e8b\u4ef6\u3002\u5f53\u6309\u94ae\u88ab\u70b9\u51fb\u65f6\uff0c\n    \u4f1a\u6253\u5f00\u989c\u8272\u9009\u62e9\u5bf9\u8bdd\u6846\uff0c\u5141\u8bb8\u7528\u6237\u9009\u62e9\u65b0\u7684\u989c\u8272\u3002\u5982\u679c\u7528\u6237\u9009\u62e9\u4e86\u6709\u6548\u989c\u8272\uff0c\n    \u5219\u66f4\u65b0\u914d\u7f6e\u6587\u4ef6\u4e2d\u7684\u989c\u8272\u503c\uff0c\u66f4\u65b0\u6309\u94ae\u56fe\u6807\uff0c\u5e76\u4fdd\u5b58\u914d\u7f6e\u3002\n\n    \u53c2\u6570:\n        row (int): \u8868\u683c\u4e2d\u7684\u884c\u53f7\uff0c\u7528\u4e8e\u5b9a\u4f4d\u9700\u8981\u66f4\u65b0\u7684\u6309\u94ae\u63a7\u4ef6\n        key (str): \u914d\u7f6e\u5b57\u5178\u4e2d\u7684\u952e\u540d\uff0c\u7528\u4e8e\u8bbf\u95ee\u548c\u66f4\u65b0\u5bf9\u5e94\u7684\u914d\u7f6e\u9879\n\n    \u8fd4\u56de:\n        function: \u8fd4\u56de\u4e00\u4e2a\u65e0\u53c2\u7684\u4e8b\u4ef6\u5904\u7406\u51fd\u6570\uff0c\u8be5\u51fd\u6570\u6355\u83b7row\u548ckey\u53c2\u6570\u5f62\u6210\u95ed\u5305\n    \"\"\"\n    def handler():\n        # \u83b7\u53d6\u5f53\u524d\u914d\u7f6e\u7684\u989c\u8272\u503c\uff0c\u5982\u679c\u4e0d\u5b58\u5728\u5219\u4f7f\u7528\u9ed8\u8ba4\u9ed1\u8272\n        current_color = QColor(_CONFIG[key].get(\"color\", \"#000000\"))\n        # \u6253\u5f00\u989c\u8272\u9009\u62e9\u5bf9\u8bdd\u6846\uff0c\u8ba9\u7528\u6237\u9009\u62e9\u65b0\u989c\u8272\n        new_color = QColorDialog.getColor(initial=current_color)\n        # \u5982\u679c\u7528\u6237\u9009\u62e9\u4e86\u6709\u6548\u989c\u8272\uff0c\u5219\u66f4\u65b0\u914d\u7f6e\u548c\u754c\u9762\n        if new_color.isValid():\n            _CONFIG[key][\"color\"] = new_color.name()\n            btn = self.tableWidget_data.cellWidget(row, 2)\n            btn.setIcon(self.colored_icon(new_color))\n            save_config()\n    return handler\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.CurveDialog.init_data","title":"<code>init_data()</code>","text":"<p>\u521d\u59cb\u5316\u6570\u636e</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def init_data(self):\n    \"\"\"\u521d\u59cb\u5316\u6570\u636e\"\"\"\n    # \u586b\u5145\u6570\u636e\n    self.tableWidget_data.setRowCount(len(_CONFIG))\n    for row, key in enumerate(self.data_keys):\n        config = _CONFIG[key]\n\n        # \u7b2c\u4e00\u5217\uff1acheckbox\n        checkbox = QCheckBox()\n        is_checked = config.get(\"visible\", False)\n        checkbox.setChecked(is_checked)\n        if is_checked:\n            self.checked_count += 1\n\n        checkbox.stateChanged.connect(self.generate_checkbox_handler(row, key))\n\n        #  \u5305\u88c5\u6210\u5c45\u4e2d\u7684 QWidget\n        center_widget = QWidget()\n        layout = QHBoxLayout(center_widget)\n        layout.addWidget(checkbox)\n        layout.setAlignment(Qt.AlignCenter)\n        layout.setContentsMargins(0, 0, 0, 0)\n\n        self.tableWidget_data.setCellWidget(row, 0, center_widget)\n\n        # \u7b2c\u4e8c\u5217\uff1aname\n        item = QTableWidgetItem(config.get(\"name\", \"\"))\n        item.setFlags(item.flags() ^ Qt.ItemIsEditable)\n        self.tableWidget_data.setItem(row, 1, item)\n\n        # \u7b2c\u4e09\u5217\uff1a\u989c\u8272\u6309\u94ae\n        color = QColor(config.get(\"color\", \"#000000\"))\n        color_btn = QPushButton()\n        color_btn.setIcon(self.colored_icon(color))\n        color_btn.setIconSize(QSize(24, 24))\n        color_btn.clicked.connect(self.generate_color_button_handler(row, key))\n        self.tableWidget_data.setCellWidget(row, 2, color_btn)\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.CurveDialog.init_ui","title":"<code>init_ui()</code>","text":"<p>\u521d\u59cb\u5316\u754c\u9762</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def init_ui(self):\n    \"\"\"\u521d\u59cb\u5316\u754c\u9762\"\"\"\n    self.setWindowTitle('\u9009\u62e9\u6570\u636e')\n    self.tableWidget_data.setColumnCount(3)\n    self.tableWidget_data.setHorizontalHeaderLabels(['\u542f\u7528', '\u540d\u79f0', '\u989c\u8272'])\n    self.tableWidget_data.horizontalHeader().setSectionResizeMode(QHeaderView.ResizeMode.Stretch)\n    self.tableWidget_data.setSelectionMode(QAbstractItemView.NoSelection)\n    self.tableWidget_data.setColumnWidth(0, 60)\n    self.tableWidget_data.setColumnWidth(1, 200)\n    self.tableWidget_data.setColumnWidth(2, 60)\n\n    header = self.tableWidget_data.horizontalHeader()\n    header.setSectionResizeMode(0, QHeaderView.ResizeMode.Fixed)\n    header.setSectionResizeMode(1, QHeaderView.ResizeMode.Stretch)\n    header.setSectionResizeMode(2, QHeaderView.ResizeMode.Fixed)\n\n    self.buttonBox.accepted.connect(self.on_ok_clicked)\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.CurveDialog.on_ok_clicked","title":"<code>on_ok_clicked()</code>","text":"<p>\u4fdd\u5b58\u914d\u7f6e\u5e76\u5173\u95ed\u5bf9\u8bdd\u6846</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def on_ok_clicked(self):\n    \"\"\"\u4fdd\u5b58\u914d\u7f6e\u5e76\u5173\u95ed\u5bf9\u8bdd\u6846\"\"\"\n    self.config_updated.emit(_CONFIG)  # \u53d1\u9001\u914d\u7f6e\u66f4\u65b0\u4fe1\u53f7\n    self.accept()  # \u5173\u95ed\u5bf9\u8bdd\u6846\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.CurveDialog.update_checkbox_enabled_state","title":"<code>update_checkbox_enabled_state()</code>","text":"<p>\u66f4\u65b0\u6240\u6709 checkbox \u7684\u53ef\u7528\u72b6\u6001</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def update_checkbox_enabled_state(self):\n    \"\"\"\u66f4\u65b0\u6240\u6709 checkbox \u7684\u53ef\u7528\u72b6\u6001\"\"\"\n    for row, key in enumerate(self.data_keys):\n        cell_widget = self.tableWidget_data.cellWidget(row, 0)\n        checkbox = cell_widget.findChild(QCheckBox) if cell_widget else None\n        if checkbox:\n            if not checkbox.isChecked():\n                checkbox.setEnabled(self.checked_count &lt; self.max_checked)\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.DataPlotForm","title":"<code>DataPlotForm</code>","text":"<p>               Bases: <code>QWidget</code>, <code>Ui_RTDataPlotForm</code></p> <p>\u8fd0\u884c\u65f6\u6570\u636e\u66f2\u7ebf\u663e\u793a\u7a97\u4f53</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>class DataPlotForm(QWidget, Ui_RTDataPlotForm):\n    \"\"\"\u8fd0\u884c\u65f6\u6570\u636e\u66f2\u7ebf\u663e\u793a\u7a97\u4f53\"\"\"\n    def __init__(self):\n        super(DataPlotForm,self).__init__()\n        self.setupUi(self)\n        self.setWindowTitle('\u6570\u636e\u91c7\u96c6')\n        self.data_buffer = {}  \n        self.auto_y_scale = False  # \u9ed8\u8ba4\u56fa\u5b9a\n        self.scroll_x_mode = False  # \u9ed8\u8ba4\u56fa\u5b9a\n        self.should_save_data = False\n        self.is_stopped = True\n        self.saved_rows = []\n        self.init_plot_system()\n        self.init_connections()\n\n\n    def init_plot_system(self):\n        \"\"\"\u521d\u59cb\u5316\u7ed8\u56fe\u7cfb\u7edf\"\"\"\n        self.plot_widget = pg.PlotWidget()\n        self.plot_widget.setBackground('white')\n        self.plot_widget.addLegend()\n        self.plot_widget.showGrid(x=True, y=True, alpha=0.5)  # \u663e\u793a\u7f51\u683c\n        self.plot_widget.setLabel('left', '\u6570\u503c')\n        self.plot_widget.setLabel('bottom', '\u65f6\u95f4')\n        self.gridLayout_plot.addWidget(self.plot_widget)\n\n\n        # \u521d\u59cb\u5316\u7ec4\u4ef6\n        self.curves = {}\n        self.data_thread = DataThread()\n        self.init_curves()\n        self.init_dataview()\n\n\n\n    def init_connections(self):\n        \"\"\"\u521d\u59cb\u5316\u8fde\u63a5\"\"\"\n        self.pushButton_select.clicked.connect(self.show_curve_selector)\n        self.pushButton_control.setIcon(QIcon(ICON_PLAY))\n        self.pushButton_control.clicked.connect(self.plot_control)\n        self.pushButton_stop.setIcon(QIcon(ICON_STOP))\n        self.pushButton_stop.clicked.connect(self.stop_plotting)\n        self.data_thread.data_updated.connect(self.update_plot)\n        self.horizontalSlider_X.valueChanged.connect(self.toggle_x_mode)\n        self.horizontalSlider_Y.valueChanged.connect(self.toggle_y_autoscale)\n        self.checkBox_savedata.stateChanged.connect(self.toggle_save_data)\n\n\n\n    def clear_curves(self):\n        \"\"\"\u6e05\u7a7a\u6240\u6709\u66f2\u7ebf\"\"\"\n        # \u4ece plot_widget \u4e2d\u79fb\u9664\u6240\u6709\u5df2\u6709\u66f2\u7ebf\n        for curve in self.curves.values():\n            self.plot_widget.removeItem(curve)\n        self.curves.clear()\n        # \u6e05\u7a7a data_buffer \u4e2d\u6240\u6709\u4e0d\u53ef\u89c1\u7684 key\n        for key in list(self.data_buffer.keys()):\n            if not _CONFIG.get(key, {}).get(\"visible\", False):\n                del self.data_buffer[key]\n\n\n    def toggle_y_autoscale(self,value):\n        \"\"\"\u5207\u6362Y\u8f74\u7f29\u653e\u6a21\u5f0f\"\"\"\n        if value == 0:  # \u56fa\u5b9a\u6a21\u5f0f\n            self.auto_y_scale=False\n        elif value == 1:  # \u81ea\u52a8\u6a21\u5f0f\n           self.auto_y_scale=True\n\n\n\n\n    def toggle_x_mode(self,value):\n        \"\"\"\u5207\u6362X\u8f74\u6a21\u5f0f\"\"\"\n        if value == 0:  # \u56fa\u5b9a\u6a21\u5f0f\n            self.scroll_x_mode=False\n        elif value == 1:  # \u6eda\u52a8\u6a21\u5f0f\n           self.scroll_x_mode=True\n\n\n\n    def toggle_save_data(self,state):\n        \"\"\"\u542f\u7528\u4fdd\u5b58\u6570\u636e\"\"\"\n        if state == Qt.Checked:  # \u542f\u7528\u4fdd\u5b58\u6570\u636e\n            self.data_thread.save_data = True\n        else:  # \u7981\u7528\u4fdd\u5b58\u6570\u636e\n            self.data_thread.save_data = False\n\n\n\n    def init_curves(self):\n        \"\"\"\u521d\u59cb\u5316\u66f2\u7ebf\"\"\"\n        self.clear_curves()\n        # \u521d\u59cb\u5316\u65b0\u7684\u53ef\u89c1\u66f2\u7ebf\n        for key, params in _CONFIG.items():\n            if not params.get(\"visible\", False):\n                continue\n\n            color_str = params.get('color', '#FF0000')\n            color = QColor(color_str)\n\n            # \u521d\u59cb\u5316\u66f2\u7ebf\uff0c\u5e76\u5c06\u5b9e\u65f6\u6570\u636e\u6dfb\u52a0\u5230name\u4e2d\n            curve = self.plot_widget.plot(\n                pen=pg.mkPen(color, width=2),\n                name = params.get('name', key),\n                color = params.get('color', '#FF0000')\n            )\n            self.curves[key] = curve\n\n\n\n    def init_dataview(self):\n        \"\"\"\u521d\u59cb\u5316\u6570\u636e\u89c6\u56fe\"\"\"\n        # \u6e05\u7a7a\u539f\u5e03\u5c40\n        while self.gridLayout_dataview.count():\n            item = self.gridLayout_dataview.takeAt(0)\n            widget = item.widget()\n            if widget:\n                widget.setParent(None)\n\n        # \u91cd\u65b0\u6dfb\u52a0\u53ef\u89c1\u53c2\u6570\u7684 label + spinbox\n        row = 0\n        for key, params in _CONFIG.items():\n            if not params.get(\"visible\", False):\n                continue\n\n            label = QLabel(params['name'])\n            label.setObjectName(f'label_{key}')\n\n            spinbox = QDoubleSpinBox()\n            spinbox.setDecimals(3)\n            spinbox.setRange(-1e6, 1e6)\n            spinbox.setReadOnly(True)\n            spinbox.setButtonSymbols(QAbstractSpinBox.NoButtons)\n            spinbox.setObjectName(f'doublespinbox_{key}')\n\n            self.gridLayout_dataview.addWidget(label, row, 0)\n            self.gridLayout_dataview.addWidget(spinbox, row, 1)\n            row += 1\n\n        # \u6dfb\u52a0\u4e00\u4e2a vertical spacer \u5360\u636e\u5269\u4f59\u7a7a\u95f4\uff0c\u4f7f\u63a7\u4ef6\u9760\u4e0a\u6392\u5217\n        spacer = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding)\n        self.gridLayout_dataview.addItem(spacer, row, 0, 1, 2)\n\n\n\n    def update_plot(self, data, xtime):\n        \"\"\"\n        \u66f4\u65b0 PyQtGraph \u56fe\u8868\u663e\u793a\u5185\u5bb9\uff0c\u5305\u62ec\u66f2\u7ebf\u6570\u636e\u548c\u76f8\u5173\u63a7\u4ef6\u72b6\u6001\u3002\n\n        \u53c2\u6570:\n            data (dict): \u5305\u542b\u5404\u66f2\u7ebf\u952e\u503c\u5bf9\u7684\u5b57\u5178\uff0c\u7528\u4e8e\u66f4\u65b0\u56fe\u8868\u6570\u636e\u3002\n            xtime (int): \u5f53\u524d\u65f6\u95f4\u6233\uff0c\u4f5c\u4e3a X \u8f74\u6700\u65b0\u6570\u636e\u70b9\u7684\u65f6\u95f4\u57fa\u51c6\u3002\n\n        \u8fd4\u56de\u503c:\n            \u65e0\n        \"\"\"\n        # \u5982\u679c\u9700\u8981\u4fdd\u5b58\u6570\u636e\uff0c\u5219\u5c06\u6570\u636e\u6dfb\u52a0\u5230 saved_rows \u4e2d\n        if self.should_save_data:\n            row = []\n            for key in _CONFIG:\n                row.append(data.get(key, \"\"))\n            self.saved_rows.append(row)\n\n        # \u904d\u5386 curves \u5b57\u5178\uff0c\u66f4\u65b0\u6bcf\u4e2a\u66f2\u7ebf\u7684\u6570\u636e\n        for key, curve in self.curves.items():\n            # \u5982\u679c\u6570\u636e\u4e2d\u5305\u542b\u8be5\u952e\uff0c\u5e76\u4e14\u8be5\u952e\u5728 _CONFIG \u4e2d\u53ef\u89c1\uff0c\u5219\u66f4\u65b0\u66f2\u7ebf\u6570\u636e\n            if key in data and _CONFIG.get(key, {}).get(\"visible\", False):\n                # \u5982\u679c\u8be5\u952e\u4e0d\u5728 data_buffer \u4e2d\uff0c\u5219\u521b\u5efa\u4e00\u4e2a deque\uff0c\u6700\u5927\u957f\u5ea6\u4e3a10000\n                if key not in self.data_buffer:\n                    self.data_buffer[key] = deque(maxlen=10000) \n\n                # \u5c06\u6570\u636e\u6dfb\u52a0\u5230 data_buffer \u4e2d\n                self.data_buffer[key].append(data[key])\n                ydata_full = list(self.data_buffer[key])\n\n                # \u6784\u5efa\u5b8c\u6574 x \u8f74\uff08\u4ee5\u5f53\u524d xtime \u4e3a\u5c3e\u90e8\uff09\n                start_xtime = xtime - len(ydata_full) + 1\n                xdata_full = list(range(start_xtime, xtime + 1))\n\n                # \u51b3\u5b9a\u663e\u793a\u533a\u57df\n                if self.scroll_x_mode:\n                    # \u6eda\u52a8\u6a21\u5f0f\uff1a\u4ec5\u663e\u793a\u6700\u8fd1100\u4e2a\u70b9\n                    ydata = ydata_full[-100:]\n                    xdata = xdata_full[-100:]\n                    self.plot_widget.setXRange(xdata[0], xdata[-1], padding=0)\n                else:\n                    # \u56fa\u5b9a\u6a21\u5f0f\uff1a\u663e\u793a\u5168\u90e8\u5386\u53f2\n                    ydata = ydata_full\n                    xdata = xdata_full\n                    self.plot_widget.enableAutoRange(axis='x', enable=True)  # \u53ef\u9009\uff1a\u81ea\u52a8\u6269\u5c55X\u8f74\n\n                # \u5982\u679c xdata \u548c ydata \u957f\u5ea6\u76f8\u540c\uff0c\u5219\u66f4\u65b0\u66f2\u7ebf\u6570\u636e\n                if len(xdata) == len(ydata):\n                    curve.setData(x=xdata, y=ydata)\n                    #  \u66f4\u65b0 SpinBox \u7684\u503c\n                    spinbox = self.findChild(QDoubleSpinBox, f'doublespinbox_{key}')\n                    if spinbox:\n                        spinbox.setValue(ydata[-1])\n\n\n        # \u81ea\u52a8 Y \u8f74\u7f29\u653e\n        if self.auto_y_scale:\n            # \u83b7\u53d6\u6240\u6709\u53ef\u89c1\u6570\u636e\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\n            visible_data = [data[k] for k in data if _CONFIG.get(k, {}).get(\"visible\", False)]\n            if visible_data:\n                min_val = min(visible_data)\n                max_val = max(visible_data)\n                # \u8bbe\u7f6e Y \u8f74\u8303\u56f4\uff0c\u6700\u5c0f\u503c\u4e3a\u6700\u5c0f\u503c\u76840.9\u500d\uff0c\u6700\u5927\u503c\u4e3a\u6700\u5927\u503c\u76841.1\u500d\n                self.plot_widget.setYRange(min_val * 0.9, max_val * 1.1)\n\n\n    def plot_control(self):\n        \"\"\"\u63a7\u5236\u56fe\u8868\u663e\u793a\u6a21\u5f0f\"\"\"\n        if self.pushButton_control.text() == \"\u5f00\u59cb\":\n            self.start_plotting()\n        elif self.pushButton_control.text() == \"\u6682\u505c\":\n            self.pause_plotting()\n\n\n\n    def start_plotting(self):\n        \"\"\"\n        \u5f00\u59cb\u7ed8\u56fe\u529f\u80fd\n\n        \u8be5\u51fd\u6570\u8d1f\u8d23\u542f\u52a8\u6570\u636e\u91c7\u96c6\u548c\u7ed8\u56fe\u663e\u793a\u529f\u80fd\u3002\u5982\u679c\u5f53\u524d\u5904\u4e8e\u505c\u6b62\u72b6\u6001\uff0c\n        \u5219\u4f1a\u6e05\u7406\u5386\u53f2\u6570\u636e\u5e76\u91cd\u65b0\u521d\u59cb\u5316\u7ed8\u56fe\u7ec4\u4ef6\uff0c\u7136\u540e\u542f\u52a8\u6570\u636e\u91c7\u96c6\u7ebf\u7a0b\uff1b\n        \u5982\u679c\u5f53\u524d\u5904\u4e8e\u6682\u505c\u72b6\u6001\uff0c\u5219\u6062\u590d\u6570\u636e\u91c7\u96c6\u7ebf\u7a0b\u7684\u8fd0\u884c\u3002\n        \"\"\"\n        self.should_save_data = self.checkBox_savedata.isChecked()\n\n        # \u5982\u679c\u5f53\u524d\u5904\u4e8e\u505c\u6b62\u72b6\u6001\uff0c\u9700\u8981\u91cd\u65b0\u521d\u59cb\u5316\u7ed8\u56fe\u73af\u5883\n        if self.is_stopped:\n            self.saved_rows.clear()\n            self.data_buffer.clear()\n\n            for curve in self.curves.values():\n                curve.clear()\n\n            self.plot_widget.clear()\n            self.init_curves()  # \u91cd\u65b0\u52a0\u4e0a legend\n\n            self.plot_widget.enableAutoRange(axis='x', enable=False)\n            self.plot_widget.setXRange(0, 100, padding=0)\n\n            # \u542f\u52a8\u65b0\u7ebf\u7a0b\u8fdb\u884c\u6570\u636e\u91c7\u96c6\n            self.data_thread = DataThread()\n            self.data_thread.data_updated.connect(self.update_plot)\n            self.data_thread.start()\n\n            self.is_stopped = False  # \u6807\u8bb0\u4e3a\u975e\u505c\u6b62\n        else:\n            # \u5f53\u524d\u5904\u4e8e\u6682\u505c\u72b6\u6001\uff0c\u6062\u590d\u6570\u636e\u91c7\u96c6\u7ebf\u7a0b\n            self.data_thread.resume()\n\n        self.pushButton_control.setText(\"\u6682\u505c\")\n        self.pushButton_control.setIcon(QIcon(ICON_PAUSE))\n\n\n\n\n    def pause_plotting(self):\n        \"\"\"\u6682\u505c\u7ed8\u56fe\"\"\"\n        self.data_thread.pause()\n        self.pushButton_control.setText(\"\u5f00\u59cb\")\n        self.pushButton_control.setIcon(QIcon(ICON_PLAY))\n\n\n\n    def stop_plotting(self):\n        \"\"\"\n        \u505c\u6b62\u6570\u636e\u91c7\u96c6\u548c\u7ed8\u56fe\uff0c\u5e76\u4fdd\u5b58\u5df2\u6536\u96c6\u7684\u6570\u636e\u5230CSV\u6587\u4ef6\n\n        \u8be5\u51fd\u6570\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n        1. \u505c\u6b62\u6570\u636e\u91c7\u96c6\u7ebf\u7a0b\n        2. \u66f4\u65b0\u63a7\u5236\u6309\u94ae\u72b6\u6001\u4e3a\"\u5f00\u59cb\"\n        3. \u8bbe\u7f6e\u505c\u6b62\u6807\u5fd7\n        4. \u5982\u679c\u9700\u8981\u4fdd\u5b58\u6570\u636e\u4e14\u5b58\u5728\u5df2\u6536\u96c6\u6570\u636e\uff0c\u5219\u5c06\u6570\u636e\u4fdd\u5b58\u5230CSV\u6587\u4ef6\n        \"\"\"\n        self.data_thread.stop()\n        self.pushButton_control.setText(\"\u5f00\u59cb\")\n        self.pushButton_control.setIcon(QIcon(ICON_PLAY))\n        self.is_stopped = True\n\n        # \u5982\u679c\u9700\u8981\u4fdd\u5b58\u6570\u636e\u4e14\u5b58\u5728\u5df2\u6536\u96c6\u7684\u6570\u636e\uff0c\u5219\u4fdd\u5b58\u5230CSV\u6587\u4ef6\n        if self.should_save_data and self.saved_rows:\n            # \u751f\u6210\u5e26\u65f6\u95f4\u6233\u7684\u6587\u4ef6\u540d\n            timestamp = datetime.datetime.now().strftime(\"%Y%m%d%H%M%S\")\n            filename = f\"\u8bd5\u9a8c\u6570\u636e_{timestamp}.csv\"\n            save_path = _BASE_PATH / f'saveddata/{filename}'\n\n            # \u5199\u5165 CSV \u6587\u4ef6\n            with open(save_path, mode='w', newline='', encoding='utf-8-sig') as f:\n                writer = csv.writer(f)\n\n                # \u5199\u8868\u5934\n                header = [\"\u65f6\u95f4\u6233\"]+[v[\"name\"] for k, v in _CONFIG.items()]\n                writer.writerow(header)\n\n                # \u5355\u4f4d\u884c\uff08\u7b2c2\u884c\uff09\uff1a\u5355\u4f4d\n                unit_row = [\"ms\"] + [v.get(\"unit\", \"\") for k, v in _CONFIG.items()]\n                writer.writerow(unit_row)\n\n                # \u5199\u6570\u636e\uff08\u4e3a\u6bcf\u884c\u52a0\u65f6\u95f4\u6233\uff09\n                start_time = datetime.datetime.now()\n                for i, row in enumerate(self.saved_rows):\n                    row_time = start_time + datetime.timedelta(milliseconds=100 * i)  # \u5047\u8bbe\u6bcf100ms\u4e00\u6761\n                    timestr = row_time.strftime(\"%Y-%m-%d %H:%M:%S.%f\")[:-3]  # \u7cbe\u786e\u5230\u6beb\u79d2\n                    writer.writerow([timestr] + row)\n\n            print(f\"\u6570\u636e\u5df2\u4fdd\u5b58\u81f3\uff1a{save_path}\")\n            self.saved_rows = []  # \u6e05\u7a7a\u65e7\u6570\u636e\n\n\n\n    def show_curve_selector(self):\n        \"\"\"\u663e\u793a\u66f2\u7ebf\u9009\u62e9\u5bf9\u8bdd\u6846\"\"\"\n        dialog = CurveDialog(self)  # \u4f20\u5165 parent\uff0c\u4fbf\u4e8e\u5b9a\u4f4d\u7a97\u53e3\n        dialog.setModal(True)\n        dialog.config_updated.connect(self.on_config_updated)  # Connect the signal\n        dialog.exec_()\n\n\n    def on_config_updated(self, updated_config):\n        \"\"\"\n        \u5f53\u914d\u7f6e\u66f4\u65b0\u65f6\u7684\u56de\u8c03\u51fd\u6570\uff0c\u7528\u4e8e\u540c\u6b65\u6570\u636e\u7f13\u51b2\u533a\u5e76\u91cd\u65b0\u521d\u59cb\u5316\u66f2\u7ebf\u663e\u793a\n\n        :param updated_config: \u66f4\u65b0\u540e\u7684\u914d\u7f6e\u5b57\u5178\uff0c\u5305\u542b\u5404\u4e2a\u66f2\u7ebf\u7684\u914d\u7f6e\u4fe1\u606f\n        \"\"\"\n        # \u540c\u6b65\u6570\u636e\u7f13\u51b2\u533a\u4e0e\u66f4\u65b0\u540e\u7684\u914d\u7f6e\n        for key in list(self.data_buffer.keys()):\n            if not updated_config.get(key, {}).get(\"visible\", False):\n                del self.data_buffer[key]  # \u79fb\u9664\u9690\u85cf\u66f2\u7ebf\u7684\u6570\u636e\u7f13\u51b2\u533a\n            else:\n                self.data_buffer.setdefault(key, [])  # \u786e\u4fdd\u53ef\u89c1\u66f2\u7ebf\u62e5\u6709\u6570\u636e\u7f13\u51b2\u533a\n\n        self.init_curves()  # \u6839\u636e\u65b0\u914d\u7f6e\u91cd\u65b0\u521d\u59cb\u5316\u66f2\u7ebf\n        self.init_dataview()  # \u91cd\u65b0\u521d\u59cb\u5316\u6570\u636e\u89c6\u56fe\n\n\n    def closeEvent(self, event):\n        # \u505c\u6b62\u7ebf\u7a0b\u5b89\u5168\u9000\u51fa\n        self.data_thread.stop()\n        self.data_thread.wait()\n        super().closeEvent(event)\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.DataPlotForm.clear_curves","title":"<code>clear_curves()</code>","text":"<p>\u6e05\u7a7a\u6240\u6709\u66f2\u7ebf</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def clear_curves(self):\n    \"\"\"\u6e05\u7a7a\u6240\u6709\u66f2\u7ebf\"\"\"\n    # \u4ece plot_widget \u4e2d\u79fb\u9664\u6240\u6709\u5df2\u6709\u66f2\u7ebf\n    for curve in self.curves.values():\n        self.plot_widget.removeItem(curve)\n    self.curves.clear()\n    # \u6e05\u7a7a data_buffer \u4e2d\u6240\u6709\u4e0d\u53ef\u89c1\u7684 key\n    for key in list(self.data_buffer.keys()):\n        if not _CONFIG.get(key, {}).get(\"visible\", False):\n            del self.data_buffer[key]\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.DataPlotForm.init_connections","title":"<code>init_connections()</code>","text":"<p>\u521d\u59cb\u5316\u8fde\u63a5</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def init_connections(self):\n    \"\"\"\u521d\u59cb\u5316\u8fde\u63a5\"\"\"\n    self.pushButton_select.clicked.connect(self.show_curve_selector)\n    self.pushButton_control.setIcon(QIcon(ICON_PLAY))\n    self.pushButton_control.clicked.connect(self.plot_control)\n    self.pushButton_stop.setIcon(QIcon(ICON_STOP))\n    self.pushButton_stop.clicked.connect(self.stop_plotting)\n    self.data_thread.data_updated.connect(self.update_plot)\n    self.horizontalSlider_X.valueChanged.connect(self.toggle_x_mode)\n    self.horizontalSlider_Y.valueChanged.connect(self.toggle_y_autoscale)\n    self.checkBox_savedata.stateChanged.connect(self.toggle_save_data)\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.DataPlotForm.init_curves","title":"<code>init_curves()</code>","text":"<p>\u521d\u59cb\u5316\u66f2\u7ebf</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def init_curves(self):\n    \"\"\"\u521d\u59cb\u5316\u66f2\u7ebf\"\"\"\n    self.clear_curves()\n    # \u521d\u59cb\u5316\u65b0\u7684\u53ef\u89c1\u66f2\u7ebf\n    for key, params in _CONFIG.items():\n        if not params.get(\"visible\", False):\n            continue\n\n        color_str = params.get('color', '#FF0000')\n        color = QColor(color_str)\n\n        # \u521d\u59cb\u5316\u66f2\u7ebf\uff0c\u5e76\u5c06\u5b9e\u65f6\u6570\u636e\u6dfb\u52a0\u5230name\u4e2d\n        curve = self.plot_widget.plot(\n            pen=pg.mkPen(color, width=2),\n            name = params.get('name', key),\n            color = params.get('color', '#FF0000')\n        )\n        self.curves[key] = curve\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.DataPlotForm.init_dataview","title":"<code>init_dataview()</code>","text":"<p>\u521d\u59cb\u5316\u6570\u636e\u89c6\u56fe</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def init_dataview(self):\n    \"\"\"\u521d\u59cb\u5316\u6570\u636e\u89c6\u56fe\"\"\"\n    # \u6e05\u7a7a\u539f\u5e03\u5c40\n    while self.gridLayout_dataview.count():\n        item = self.gridLayout_dataview.takeAt(0)\n        widget = item.widget()\n        if widget:\n            widget.setParent(None)\n\n    # \u91cd\u65b0\u6dfb\u52a0\u53ef\u89c1\u53c2\u6570\u7684 label + spinbox\n    row = 0\n    for key, params in _CONFIG.items():\n        if not params.get(\"visible\", False):\n            continue\n\n        label = QLabel(params['name'])\n        label.setObjectName(f'label_{key}')\n\n        spinbox = QDoubleSpinBox()\n        spinbox.setDecimals(3)\n        spinbox.setRange(-1e6, 1e6)\n        spinbox.setReadOnly(True)\n        spinbox.setButtonSymbols(QAbstractSpinBox.NoButtons)\n        spinbox.setObjectName(f'doublespinbox_{key}')\n\n        self.gridLayout_dataview.addWidget(label, row, 0)\n        self.gridLayout_dataview.addWidget(spinbox, row, 1)\n        row += 1\n\n    # \u6dfb\u52a0\u4e00\u4e2a vertical spacer \u5360\u636e\u5269\u4f59\u7a7a\u95f4\uff0c\u4f7f\u63a7\u4ef6\u9760\u4e0a\u6392\u5217\n    spacer = QSpacerItem(20, 40, QSizePolicy.Minimum, QSizePolicy.Expanding)\n    self.gridLayout_dataview.addItem(spacer, row, 0, 1, 2)\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.DataPlotForm.init_plot_system","title":"<code>init_plot_system()</code>","text":"<p>\u521d\u59cb\u5316\u7ed8\u56fe\u7cfb\u7edf</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def init_plot_system(self):\n    \"\"\"\u521d\u59cb\u5316\u7ed8\u56fe\u7cfb\u7edf\"\"\"\n    self.plot_widget = pg.PlotWidget()\n    self.plot_widget.setBackground('white')\n    self.plot_widget.addLegend()\n    self.plot_widget.showGrid(x=True, y=True, alpha=0.5)  # \u663e\u793a\u7f51\u683c\n    self.plot_widget.setLabel('left', '\u6570\u503c')\n    self.plot_widget.setLabel('bottom', '\u65f6\u95f4')\n    self.gridLayout_plot.addWidget(self.plot_widget)\n\n\n    # \u521d\u59cb\u5316\u7ec4\u4ef6\n    self.curves = {}\n    self.data_thread = DataThread()\n    self.init_curves()\n    self.init_dataview()\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.DataPlotForm.on_config_updated","title":"<code>on_config_updated(updated_config)</code>","text":"<p>\u5f53\u914d\u7f6e\u66f4\u65b0\u65f6\u7684\u56de\u8c03\u51fd\u6570\uff0c\u7528\u4e8e\u540c\u6b65\u6570\u636e\u7f13\u51b2\u533a\u5e76\u91cd\u65b0\u521d\u59cb\u5316\u66f2\u7ebf\u663e\u793a</p> <p>:param updated_config: \u66f4\u65b0\u540e\u7684\u914d\u7f6e\u5b57\u5178\uff0c\u5305\u542b\u5404\u4e2a\u66f2\u7ebf\u7684\u914d\u7f6e\u4fe1\u606f</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def on_config_updated(self, updated_config):\n    \"\"\"\n    \u5f53\u914d\u7f6e\u66f4\u65b0\u65f6\u7684\u56de\u8c03\u51fd\u6570\uff0c\u7528\u4e8e\u540c\u6b65\u6570\u636e\u7f13\u51b2\u533a\u5e76\u91cd\u65b0\u521d\u59cb\u5316\u66f2\u7ebf\u663e\u793a\n\n    :param updated_config: \u66f4\u65b0\u540e\u7684\u914d\u7f6e\u5b57\u5178\uff0c\u5305\u542b\u5404\u4e2a\u66f2\u7ebf\u7684\u914d\u7f6e\u4fe1\u606f\n    \"\"\"\n    # \u540c\u6b65\u6570\u636e\u7f13\u51b2\u533a\u4e0e\u66f4\u65b0\u540e\u7684\u914d\u7f6e\n    for key in list(self.data_buffer.keys()):\n        if not updated_config.get(key, {}).get(\"visible\", False):\n            del self.data_buffer[key]  # \u79fb\u9664\u9690\u85cf\u66f2\u7ebf\u7684\u6570\u636e\u7f13\u51b2\u533a\n        else:\n            self.data_buffer.setdefault(key, [])  # \u786e\u4fdd\u53ef\u89c1\u66f2\u7ebf\u62e5\u6709\u6570\u636e\u7f13\u51b2\u533a\n\n    self.init_curves()  # \u6839\u636e\u65b0\u914d\u7f6e\u91cd\u65b0\u521d\u59cb\u5316\u66f2\u7ebf\n    self.init_dataview()  # \u91cd\u65b0\u521d\u59cb\u5316\u6570\u636e\u89c6\u56fe\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.DataPlotForm.pause_plotting","title":"<code>pause_plotting()</code>","text":"<p>\u6682\u505c\u7ed8\u56fe</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def pause_plotting(self):\n    \"\"\"\u6682\u505c\u7ed8\u56fe\"\"\"\n    self.data_thread.pause()\n    self.pushButton_control.setText(\"\u5f00\u59cb\")\n    self.pushButton_control.setIcon(QIcon(ICON_PLAY))\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.DataPlotForm.plot_control","title":"<code>plot_control()</code>","text":"<p>\u63a7\u5236\u56fe\u8868\u663e\u793a\u6a21\u5f0f</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def plot_control(self):\n    \"\"\"\u63a7\u5236\u56fe\u8868\u663e\u793a\u6a21\u5f0f\"\"\"\n    if self.pushButton_control.text() == \"\u5f00\u59cb\":\n        self.start_plotting()\n    elif self.pushButton_control.text() == \"\u6682\u505c\":\n        self.pause_plotting()\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.DataPlotForm.show_curve_selector","title":"<code>show_curve_selector()</code>","text":"<p>\u663e\u793a\u66f2\u7ebf\u9009\u62e9\u5bf9\u8bdd\u6846</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def show_curve_selector(self):\n    \"\"\"\u663e\u793a\u66f2\u7ebf\u9009\u62e9\u5bf9\u8bdd\u6846\"\"\"\n    dialog = CurveDialog(self)  # \u4f20\u5165 parent\uff0c\u4fbf\u4e8e\u5b9a\u4f4d\u7a97\u53e3\n    dialog.setModal(True)\n    dialog.config_updated.connect(self.on_config_updated)  # Connect the signal\n    dialog.exec_()\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.DataPlotForm.start_plotting","title":"<code>start_plotting()</code>","text":"<p>\u5f00\u59cb\u7ed8\u56fe\u529f\u80fd</p> <p>\u8be5\u51fd\u6570\u8d1f\u8d23\u542f\u52a8\u6570\u636e\u91c7\u96c6\u548c\u7ed8\u56fe\u663e\u793a\u529f\u80fd\u3002\u5982\u679c\u5f53\u524d\u5904\u4e8e\u505c\u6b62\u72b6\u6001\uff0c \u5219\u4f1a\u6e05\u7406\u5386\u53f2\u6570\u636e\u5e76\u91cd\u65b0\u521d\u59cb\u5316\u7ed8\u56fe\u7ec4\u4ef6\uff0c\u7136\u540e\u542f\u52a8\u6570\u636e\u91c7\u96c6\u7ebf\u7a0b\uff1b \u5982\u679c\u5f53\u524d\u5904\u4e8e\u6682\u505c\u72b6\u6001\uff0c\u5219\u6062\u590d\u6570\u636e\u91c7\u96c6\u7ebf\u7a0b\u7684\u8fd0\u884c\u3002</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def start_plotting(self):\n    \"\"\"\n    \u5f00\u59cb\u7ed8\u56fe\u529f\u80fd\n\n    \u8be5\u51fd\u6570\u8d1f\u8d23\u542f\u52a8\u6570\u636e\u91c7\u96c6\u548c\u7ed8\u56fe\u663e\u793a\u529f\u80fd\u3002\u5982\u679c\u5f53\u524d\u5904\u4e8e\u505c\u6b62\u72b6\u6001\uff0c\n    \u5219\u4f1a\u6e05\u7406\u5386\u53f2\u6570\u636e\u5e76\u91cd\u65b0\u521d\u59cb\u5316\u7ed8\u56fe\u7ec4\u4ef6\uff0c\u7136\u540e\u542f\u52a8\u6570\u636e\u91c7\u96c6\u7ebf\u7a0b\uff1b\n    \u5982\u679c\u5f53\u524d\u5904\u4e8e\u6682\u505c\u72b6\u6001\uff0c\u5219\u6062\u590d\u6570\u636e\u91c7\u96c6\u7ebf\u7a0b\u7684\u8fd0\u884c\u3002\n    \"\"\"\n    self.should_save_data = self.checkBox_savedata.isChecked()\n\n    # \u5982\u679c\u5f53\u524d\u5904\u4e8e\u505c\u6b62\u72b6\u6001\uff0c\u9700\u8981\u91cd\u65b0\u521d\u59cb\u5316\u7ed8\u56fe\u73af\u5883\n    if self.is_stopped:\n        self.saved_rows.clear()\n        self.data_buffer.clear()\n\n        for curve in self.curves.values():\n            curve.clear()\n\n        self.plot_widget.clear()\n        self.init_curves()  # \u91cd\u65b0\u52a0\u4e0a legend\n\n        self.plot_widget.enableAutoRange(axis='x', enable=False)\n        self.plot_widget.setXRange(0, 100, padding=0)\n\n        # \u542f\u52a8\u65b0\u7ebf\u7a0b\u8fdb\u884c\u6570\u636e\u91c7\u96c6\n        self.data_thread = DataThread()\n        self.data_thread.data_updated.connect(self.update_plot)\n        self.data_thread.start()\n\n        self.is_stopped = False  # \u6807\u8bb0\u4e3a\u975e\u505c\u6b62\n    else:\n        # \u5f53\u524d\u5904\u4e8e\u6682\u505c\u72b6\u6001\uff0c\u6062\u590d\u6570\u636e\u91c7\u96c6\u7ebf\u7a0b\n        self.data_thread.resume()\n\n    self.pushButton_control.setText(\"\u6682\u505c\")\n    self.pushButton_control.setIcon(QIcon(ICON_PAUSE))\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.DataPlotForm.stop_plotting","title":"<code>stop_plotting()</code>","text":"<p>\u505c\u6b62\u6570\u636e\u91c7\u96c6\u548c\u7ed8\u56fe\uff0c\u5e76\u4fdd\u5b58\u5df2\u6536\u96c6\u7684\u6570\u636e\u5230CSV\u6587\u4ef6</p> <p>\u8be5\u51fd\u6570\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a 1. \u505c\u6b62\u6570\u636e\u91c7\u96c6\u7ebf\u7a0b 2. \u66f4\u65b0\u63a7\u5236\u6309\u94ae\u72b6\u6001\u4e3a\"\u5f00\u59cb\" 3. \u8bbe\u7f6e\u505c\u6b62\u6807\u5fd7 4. \u5982\u679c\u9700\u8981\u4fdd\u5b58\u6570\u636e\u4e14\u5b58\u5728\u5df2\u6536\u96c6\u6570\u636e\uff0c\u5219\u5c06\u6570\u636e\u4fdd\u5b58\u5230CSV\u6587\u4ef6</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def stop_plotting(self):\n    \"\"\"\n    \u505c\u6b62\u6570\u636e\u91c7\u96c6\u548c\u7ed8\u56fe\uff0c\u5e76\u4fdd\u5b58\u5df2\u6536\u96c6\u7684\u6570\u636e\u5230CSV\u6587\u4ef6\n\n    \u8be5\u51fd\u6570\u6267\u884c\u4ee5\u4e0b\u64cd\u4f5c\uff1a\n    1. \u505c\u6b62\u6570\u636e\u91c7\u96c6\u7ebf\u7a0b\n    2. \u66f4\u65b0\u63a7\u5236\u6309\u94ae\u72b6\u6001\u4e3a\"\u5f00\u59cb\"\n    3. \u8bbe\u7f6e\u505c\u6b62\u6807\u5fd7\n    4. \u5982\u679c\u9700\u8981\u4fdd\u5b58\u6570\u636e\u4e14\u5b58\u5728\u5df2\u6536\u96c6\u6570\u636e\uff0c\u5219\u5c06\u6570\u636e\u4fdd\u5b58\u5230CSV\u6587\u4ef6\n    \"\"\"\n    self.data_thread.stop()\n    self.pushButton_control.setText(\"\u5f00\u59cb\")\n    self.pushButton_control.setIcon(QIcon(ICON_PLAY))\n    self.is_stopped = True\n\n    # \u5982\u679c\u9700\u8981\u4fdd\u5b58\u6570\u636e\u4e14\u5b58\u5728\u5df2\u6536\u96c6\u7684\u6570\u636e\uff0c\u5219\u4fdd\u5b58\u5230CSV\u6587\u4ef6\n    if self.should_save_data and self.saved_rows:\n        # \u751f\u6210\u5e26\u65f6\u95f4\u6233\u7684\u6587\u4ef6\u540d\n        timestamp = datetime.datetime.now().strftime(\"%Y%m%d%H%M%S\")\n        filename = f\"\u8bd5\u9a8c\u6570\u636e_{timestamp}.csv\"\n        save_path = _BASE_PATH / f'saveddata/{filename}'\n\n        # \u5199\u5165 CSV \u6587\u4ef6\n        with open(save_path, mode='w', newline='', encoding='utf-8-sig') as f:\n            writer = csv.writer(f)\n\n            # \u5199\u8868\u5934\n            header = [\"\u65f6\u95f4\u6233\"]+[v[\"name\"] for k, v in _CONFIG.items()]\n            writer.writerow(header)\n\n            # \u5355\u4f4d\u884c\uff08\u7b2c2\u884c\uff09\uff1a\u5355\u4f4d\n            unit_row = [\"ms\"] + [v.get(\"unit\", \"\") for k, v in _CONFIG.items()]\n            writer.writerow(unit_row)\n\n            # \u5199\u6570\u636e\uff08\u4e3a\u6bcf\u884c\u52a0\u65f6\u95f4\u6233\uff09\n            start_time = datetime.datetime.now()\n            for i, row in enumerate(self.saved_rows):\n                row_time = start_time + datetime.timedelta(milliseconds=100 * i)  # \u5047\u8bbe\u6bcf100ms\u4e00\u6761\n                timestr = row_time.strftime(\"%Y-%m-%d %H:%M:%S.%f\")[:-3]  # \u7cbe\u786e\u5230\u6beb\u79d2\n                writer.writerow([timestr] + row)\n\n        print(f\"\u6570\u636e\u5df2\u4fdd\u5b58\u81f3\uff1a{save_path}\")\n        self.saved_rows = []  # \u6e05\u7a7a\u65e7\u6570\u636e\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.DataPlotForm.toggle_save_data","title":"<code>toggle_save_data(state)</code>","text":"<p>\u542f\u7528\u4fdd\u5b58\u6570\u636e</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def toggle_save_data(self,state):\n    \"\"\"\u542f\u7528\u4fdd\u5b58\u6570\u636e\"\"\"\n    if state == Qt.Checked:  # \u542f\u7528\u4fdd\u5b58\u6570\u636e\n        self.data_thread.save_data = True\n    else:  # \u7981\u7528\u4fdd\u5b58\u6570\u636e\n        self.data_thread.save_data = False\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.DataPlotForm.toggle_x_mode","title":"<code>toggle_x_mode(value)</code>","text":"<p>\u5207\u6362X\u8f74\u6a21\u5f0f</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def toggle_x_mode(self,value):\n    \"\"\"\u5207\u6362X\u8f74\u6a21\u5f0f\"\"\"\n    if value == 0:  # \u56fa\u5b9a\u6a21\u5f0f\n        self.scroll_x_mode=False\n    elif value == 1:  # \u6eda\u52a8\u6a21\u5f0f\n       self.scroll_x_mode=True\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.DataPlotForm.toggle_y_autoscale","title":"<code>toggle_y_autoscale(value)</code>","text":"<p>\u5207\u6362Y\u8f74\u7f29\u653e\u6a21\u5f0f</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def toggle_y_autoscale(self,value):\n    \"\"\"\u5207\u6362Y\u8f74\u7f29\u653e\u6a21\u5f0f\"\"\"\n    if value == 0:  # \u56fa\u5b9a\u6a21\u5f0f\n        self.auto_y_scale=False\n    elif value == 1:  # \u81ea\u52a8\u6a21\u5f0f\n       self.auto_y_scale=True\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.DataPlotForm.update_plot","title":"<code>update_plot(data, xtime)</code>","text":"<p>\u66f4\u65b0 PyQtGraph \u56fe\u8868\u663e\u793a\u5185\u5bb9\uff0c\u5305\u62ec\u66f2\u7ebf\u6570\u636e\u548c\u76f8\u5173\u63a7\u4ef6\u72b6\u6001\u3002</p> \u53c2\u6570 <p>data (dict): \u5305\u542b\u5404\u66f2\u7ebf\u952e\u503c\u5bf9\u7684\u5b57\u5178\uff0c\u7528\u4e8e\u66f4\u65b0\u56fe\u8868\u6570\u636e\u3002 xtime (int): \u5f53\u524d\u65f6\u95f4\u6233\uff0c\u4f5c\u4e3a X \u8f74\u6700\u65b0\u6570\u636e\u70b9\u7684\u65f6\u95f4\u57fa\u51c6\u3002</p> \u8fd4\u56de\u503c <p>\u65e0</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def update_plot(self, data, xtime):\n    \"\"\"\n    \u66f4\u65b0 PyQtGraph \u56fe\u8868\u663e\u793a\u5185\u5bb9\uff0c\u5305\u62ec\u66f2\u7ebf\u6570\u636e\u548c\u76f8\u5173\u63a7\u4ef6\u72b6\u6001\u3002\n\n    \u53c2\u6570:\n        data (dict): \u5305\u542b\u5404\u66f2\u7ebf\u952e\u503c\u5bf9\u7684\u5b57\u5178\uff0c\u7528\u4e8e\u66f4\u65b0\u56fe\u8868\u6570\u636e\u3002\n        xtime (int): \u5f53\u524d\u65f6\u95f4\u6233\uff0c\u4f5c\u4e3a X \u8f74\u6700\u65b0\u6570\u636e\u70b9\u7684\u65f6\u95f4\u57fa\u51c6\u3002\n\n    \u8fd4\u56de\u503c:\n        \u65e0\n    \"\"\"\n    # \u5982\u679c\u9700\u8981\u4fdd\u5b58\u6570\u636e\uff0c\u5219\u5c06\u6570\u636e\u6dfb\u52a0\u5230 saved_rows \u4e2d\n    if self.should_save_data:\n        row = []\n        for key in _CONFIG:\n            row.append(data.get(key, \"\"))\n        self.saved_rows.append(row)\n\n    # \u904d\u5386 curves \u5b57\u5178\uff0c\u66f4\u65b0\u6bcf\u4e2a\u66f2\u7ebf\u7684\u6570\u636e\n    for key, curve in self.curves.items():\n        # \u5982\u679c\u6570\u636e\u4e2d\u5305\u542b\u8be5\u952e\uff0c\u5e76\u4e14\u8be5\u952e\u5728 _CONFIG \u4e2d\u53ef\u89c1\uff0c\u5219\u66f4\u65b0\u66f2\u7ebf\u6570\u636e\n        if key in data and _CONFIG.get(key, {}).get(\"visible\", False):\n            # \u5982\u679c\u8be5\u952e\u4e0d\u5728 data_buffer \u4e2d\uff0c\u5219\u521b\u5efa\u4e00\u4e2a deque\uff0c\u6700\u5927\u957f\u5ea6\u4e3a10000\n            if key not in self.data_buffer:\n                self.data_buffer[key] = deque(maxlen=10000) \n\n            # \u5c06\u6570\u636e\u6dfb\u52a0\u5230 data_buffer \u4e2d\n            self.data_buffer[key].append(data[key])\n            ydata_full = list(self.data_buffer[key])\n\n            # \u6784\u5efa\u5b8c\u6574 x \u8f74\uff08\u4ee5\u5f53\u524d xtime \u4e3a\u5c3e\u90e8\uff09\n            start_xtime = xtime - len(ydata_full) + 1\n            xdata_full = list(range(start_xtime, xtime + 1))\n\n            # \u51b3\u5b9a\u663e\u793a\u533a\u57df\n            if self.scroll_x_mode:\n                # \u6eda\u52a8\u6a21\u5f0f\uff1a\u4ec5\u663e\u793a\u6700\u8fd1100\u4e2a\u70b9\n                ydata = ydata_full[-100:]\n                xdata = xdata_full[-100:]\n                self.plot_widget.setXRange(xdata[0], xdata[-1], padding=0)\n            else:\n                # \u56fa\u5b9a\u6a21\u5f0f\uff1a\u663e\u793a\u5168\u90e8\u5386\u53f2\n                ydata = ydata_full\n                xdata = xdata_full\n                self.plot_widget.enableAutoRange(axis='x', enable=True)  # \u53ef\u9009\uff1a\u81ea\u52a8\u6269\u5c55X\u8f74\n\n            # \u5982\u679c xdata \u548c ydata \u957f\u5ea6\u76f8\u540c\uff0c\u5219\u66f4\u65b0\u66f2\u7ebf\u6570\u636e\n            if len(xdata) == len(ydata):\n                curve.setData(x=xdata, y=ydata)\n                #  \u66f4\u65b0 SpinBox \u7684\u503c\n                spinbox = self.findChild(QDoubleSpinBox, f'doublespinbox_{key}')\n                if spinbox:\n                    spinbox.setValue(ydata[-1])\n\n\n    # \u81ea\u52a8 Y \u8f74\u7f29\u653e\n    if self.auto_y_scale:\n        # \u83b7\u53d6\u6240\u6709\u53ef\u89c1\u6570\u636e\u7684\u6700\u5c0f\u503c\u548c\u6700\u5927\u503c\n        visible_data = [data[k] for k in data if _CONFIG.get(k, {}).get(\"visible\", False)]\n        if visible_data:\n            min_val = min(visible_data)\n            max_val = max(visible_data)\n            # \u8bbe\u7f6e Y \u8f74\u8303\u56f4\uff0c\u6700\u5c0f\u503c\u4e3a\u6700\u5c0f\u503c\u76840.9\u500d\uff0c\u6700\u5927\u503c\u4e3a\u6700\u5927\u503c\u76841.1\u500d\n            self.plot_widget.setYRange(min_val * 0.9, max_val * 1.1)\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.DataThread","title":"<code>DataThread</code>","text":"<p>               Bases: <code>QThread</code></p> <p>\u6570\u636e\u83b7\u53d6\u7ebf\u7a0b</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>class DataThread(QThread):\n    \"\"\"\u6570\u636e\u83b7\u53d6\u7ebf\u7a0b\"\"\"\n    data_updated = pyqtSignal(dict, int) # \u6570\u636e\u66f4\u65b0\u4fe1\u53f7\uff0c\u4f20\u9012\u6570\u636e\u5b57\u5178\u548cx\u8f74\u65f6\u95f4\n\n    def __init__(self):\n        super().__init__()\n        self._mutex = QMutex() # \u4e92\u65a5\u9501\n        self._condition = QWaitCondition() # \u6761\u4ef6\u53d8\u91cf\n        self._is_paused = False # \u6682\u505c\u6807\u5fd7\n        self._is_running = True  # \u8fd0\u884c\u6807\u5fd7\n        self._is_stopped = False  # \u65b0\u589e\u505c\u6b62\u6807\u5fd7\n        self.xtime = 0  # \u5c06 xtime \u79fb\u5230\u7c7b\u7ea7\u522b\u4ee5\u4fbf\u91cd\u7f6e\n\n    def run(self):\n        xtime = 0\n        keys = [k for k in _CONFIG.keys()]\n        while self._is_running:\n            self._mutex.lock()\n            if self._is_paused and not self._is_stopped:\n                self._condition.wait(self._mutex)\n            elif self._is_stopped:\n                self.xtime = 0\n                self._is_stopped = False  # \u91cd\u7f6e\u505c\u6b62\u6807\u5fd7\n            self._mutex.unlock()\n\n            # \u5224\u65ad\u9000\u51fa\u6807\u5fd7\uff0c\u907f\u514d\u5524\u9192\u540e\u7ee7\u7eed\u6267\u884c\n            if not self._is_running:\n                break\n\n            \"\"\" \u751f\u6210\u6a21\u62df\u6570\u636e\uff08\u6b64\u5904\u53ef\u66ff\u6362\u4e3a\u771f\u5b9e\u6570\u636e\u6e90\uff09\"\"\"\n            combined_data = {}\n            for i, key in enumerate(keys):\n                angle = xtime * 0.1 \n                combined_data[key] = math.sin(angle)+i\n\n            self.data_updated.emit(combined_data, xtime) # \u53d1\u9001\u6570\u636e\u66f4\u65b0\u4fe1\u53f7\n            xtime += 1\n            self.msleep(100)\n\n\n    def pause(self):\n        self._mutex.lock()\n        self._is_paused = True\n        self._mutex.unlock()\n\n\n    def resume(self):\n        self._mutex.lock()\n        self._is_paused = False\n        self._condition.wakeAll()\n        self._mutex.unlock()\n\n\n    def stop(self):\n        self._mutex.lock() # \u83b7\u53d6\u9501\n        self._is_running = False # \u505c\u6b62\u8fd0\u884c\n        self._is_stopped = True # \u8bbe\u7f6e\u505c\u6b62\u6807\u5fd7\n        self._condition.wakeAll() # \u5524\u9192\u6240\u6709\u7b49\u5f85\u7684\u7ebf\u7a0b\n        self._mutex.unlock() # \u91ca\u653e\u9501\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.load_config","title":"<code>load_config(confpath)</code>","text":"<p>\u52a0\u8f7d\u66f2\u7ebf\u914d\u7f6e\u6587\u4ef6</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def load_config(confpath):\n    \"\"\"\u52a0\u8f7d\u66f2\u7ebf\u914d\u7f6e\u6587\u4ef6\"\"\"\n    try:\n        with open(confpath, 'r', encoding='utf-8') as f:\n            config = json.load(f)\n    except Exception as e:\n        print(f\"\u52a0\u8f7d\u914d\u7f6e\u5931\u8d25: {str(e)}\")\n        config = {}\n\n    return config\n</code></pre>"},{"location":"API/rt_data_plot/#src.components.RTDataPlot.RTdata_plot_demo.save_config","title":"<code>save_config()</code>","text":"<p>\u4fdd\u5b58\u66f2\u7ebf\u914d\u7f6e\u6587\u4ef6</p> Source code in <code>src\\components\\RTDataPlot\\RTdata_plot_demo.py</code> <pre><code>def save_config():\n    \"\"\"\u4fdd\u5b58\u66f2\u7ebf\u914d\u7f6e\u6587\u4ef6\"\"\"\n    try:\n        with open(_CONF_PATH, 'w', encoding='utf-8') as f:\n            json.dump(_CONFIG, f, ensure_ascii=False, indent=2)\n    except Exception as e:\n        print( f\"\u4fdd\u5b58\u914d\u7f6e\u5931\u8d25: {str(e)}\")\n</code></pre>"},{"location":"API/xml_editor/","title":"XML\u7f16\u8f91\u5668 XmlEditor API","text":""},{"location":"API/xml_editor/#src.components.XmlEditor.XmlEditor.XmlEditor","title":"<code>src.components.XmlEditor.XmlEditor.XmlEditor</code>","text":"<p>               Bases: <code>QWidget</code></p> <p>XML\u7f16\u8f91\u5668\u4e3b\u7c7b - \u652f\u6301\u591a\u5c42\u7ea7\u7ed3\u6784</p> Source code in <code>src\\components\\XmlEditor\\XmlEditor.py</code> <pre><code>class XmlEditor(QWidget):\n    \"\"\"XML\u7f16\u8f91\u5668\u4e3b\u7c7b - \u652f\u6301\u591a\u5c42\u7ea7\u7ed3\u6784\"\"\"\n\n    def __init__(self, parent=None):\n        \"\"\"\u521d\u59cb\u5316XML\u7f16\u8f91\u5668\n\n        Args:\n            parent: \u7236\u7ea7\u7a97\u53e3\n        \"\"\"\n        super().__init__(parent)\n        self.ui = Ui_XmlEditor()\n        self.ui.setupUi(self)\n        self.config = XmlEditorConfig()\n\n        # \u5f02\u6b65\u52a0\u8f7d\u76f8\u5173\u5c5e\u6027\n        self.loading_timer = QTimer()\n        self.loading_queue = []\n        self.current_loading_item = None\n        self.total_elements = 0\n        self.processed_elements = 0\n\n        self.setup_tree_editor()\n        self.setup_connections()\n        self.setup_async_loading()\n\n    def setup_tree_editor(self):\n        \"\"\"\u8bbe\u7f6e\u6811\u5f62\u7f16\u8f91\u5668\"\"\"\n        # \u79fb\u9664\u539f\u6709\u7684\u6eda\u52a8\u533a\u57df\uff0c\u66ff\u6362\u4e3a\u5206\u5272\u5668\n        self.ui.verticalLayout.removeWidget(self.ui.scrollArea)\n        self.ui.scrollArea.setParent(None)\n\n        # \u521b\u5efa\u5206\u5272\u5668\n        splitter = QSplitter(Qt.Horizontal)\n\n        # \u5de6\u4fa7\uff1a\u6811\u5f62\u7f16\u8f91\u5668\n        left_widget = self._create_tree_widget()\n\n        # \u53f3\u4fa7\uff1a\u5b9e\u65f6\u9884\u89c8\n        right_widget = self._create_preview_widget()\n\n        # \u6dfb\u52a0\u5230\u5206\u5272\u5668\n        splitter.addWidget(left_widget)\n        splitter.addWidget(right_widget)\n        splitter.setSizes(self.config.SPLITTER_SIZES)\n\n        # \u6dfb\u52a0\u5230\u4e3b\u5e03\u5c40\n        self.ui.verticalLayout.insertWidget(1, splitter)\n\n        # \u521d\u59cb\u66f4\u65b0\u9884\u89c8\n        self.update_preview()\n\n    def _create_tree_widget(self) -&gt; QWidget:\n        \"\"\"\u521b\u5efa\u6811\u5f62\u7f16\u8f91\u5668\u90e8\u4ef6\n\n        Returns:\n            QWidget: \u6811\u5f62\u7f16\u8f91\u5668\u90e8\u4ef6\n        \"\"\"\n        widget = QWidget()\n        layout = QVBoxLayout(widget)\n\n        # \u6811\u5f62\u7f16\u8f91\u5668\u6807\u9898\n        title = QLabel(\"XML\u7ed3\u6784\u7f16\u8f91\u5668\")\n        title.setFont(self.config.TITLE_FONT)\n        layout.addWidget(title)\n\n        # \u521b\u5efa\u6811\u5f62\u63a7\u4ef6\n        self.xml_tree = XmlTreeWidget()\n        self.xml_tree.itemChanged.connect(self.on_tree_changed)\n        layout.addWidget(self.xml_tree)\n\n        return widget\n\n    def _create_preview_widget(self) -&gt; QWidget:\n        \"\"\"\u521b\u5efa\u9884\u89c8\u90e8\u4ef6\n\n        Returns:\n            QWidget: \u9884\u89c8\u90e8\u4ef6\n        \"\"\"\n        widget = QWidget()\n        layout = QVBoxLayout(widget)\n\n        # \u9884\u89c8\u6807\u9898\n        title = QLabel(\"\u5b9e\u65f6\u9884\u89c8\")\n        title.setFont(self.config.TITLE_FONT)\n        layout.addWidget(title)\n\n        # \u6dfb\u52a0\u8fdb\u5ea6\u6761\u548c\u72b6\u6001\u6807\u7b7e\n        self.progress_bar = QProgressBar()\n        self.progress_bar.setVisible(False)\n        self.progress_bar.setTextVisible(True)\n        layout.addWidget(self.progress_bar)\n\n        self.status_label = QLabel(\"\")\n        self.status_label.setVisible(False)\n        layout.addWidget(self.status_label)\n\n        # \u9884\u89c8\u6587\u672c\u6846\n        self.preview_text = QTextEdit()\n        self.preview_text.setReadOnly(True)\n        self.preview_text.setFont(self.config.PREVIEW_FONT)\n        layout.addWidget(self.preview_text)\n\n        return widget\n\n    def setup_connections(self):\n        \"\"\"\u8bbe\u7f6e\u4fe1\u53f7\u8fde\u63a5\"\"\"\n        self.ui.btn_add_element.clicked.connect(self.add_root_element)\n        self.ui.btn_clear_all.clicked.connect(self.clear_all_elements)\n        self.ui.btn_preview.clicked.connect(self.preview_xml)\n        self.ui.btn_download.clicked.connect(self.download_xml)\n\n        # \u65b0\u589e\uff1a\u52a0\u8f7dXML\u6309\u94ae\n        self.btn_load = QPushButton(\"\u52a0\u8f7dXML\")\n        # \u63d2\u5165\u5230\u9876\u90e8\u5de5\u5177\u680f\uff0c\u5728\"\u6dfb\u52a0\u5143\u7d20\"\u6309\u94ae\u4e4b\u524d\n        try:\n            self.ui.horizontalLayout_top.insertWidget(2, self.btn_load)\n        except Exception:\n            # \u5982\u679c\u63d2\u5165\u5931\u8d25\u5219\u8ffd\u52a0\n            self.ui.horizontalLayout_top.addWidget(self.btn_load)\n        self.btn_load.clicked.connect(self.open_xml_file)\n\n        # \u4fee\u6539\u6309\u94ae\u6587\u672c\n        self.ui.btn_add_element.setText(\"\u6dfb\u52a0\u6839\u7ea7\u5143\u7d20\")\n\n    def setup_async_loading(self):\n        \"\"\"\u8bbe\u7f6e\u5f02\u6b65\u52a0\u8f7d\u673a\u5236\"\"\"\n        self.loading_timer.timeout.connect(self.process_loading_batch)\n        self.loading_timer.setSingleShot(False)\n\n    def open_xml_file(self):\n        \"\"\"\u6253\u5f00\u5e76\u52a0\u8f7dXML\u6587\u4ef6\"\"\"\n        try:\n            # \u9009\u62e9\u6587\u4ef6\n            file_path, _ = QFileDialog.getOpenFileName(\n                self, \"\u9009\u62e9XML\u6587\u4ef6\", \"\", \"XML\u6587\u4ef6 (*.xml);;\u6240\u6709\u6587\u4ef6 (*)\"\n            )\n\n            if not file_path:\n                return\n\n            # \u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\n            try:\n                # \u4f18\u5148\u5c1d\u8bd5UTF-8\u7f16\u7801\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    content = f.read()\n            except UnicodeDecodeError:\n                # \u5982\u679cUTF-8\u5931\u8d25\uff0c\u5c1d\u8bd5\u5176\u4ed6\u7f16\u7801\n                try:\n                    with open(file_path, 'r', encoding='gbk') as f:\n                        content = f.read()\n                except UnicodeDecodeError:\n                    with open(file_path, 'r', encoding='latin-1') as f:\n                        content = f.read()\n\n            # \u89e3\u6790XML\u5185\u5bb9\n            root = ET.fromstring(content)\n\n            # \u4f7f\u7528\u5f02\u6b65\u52a0\u8f7d\u673a\u5236\n            self.start_async_loading(root)\n\n        except ET.ParseError as e:\n            QMessageBox.critical(self, \"XML\u89e3\u6790\u9519\u8bef\", f\"XML\u6587\u4ef6\u683c\u5f0f\u9519\u8bef: {str(e)}\")\n        except FileNotFoundError:\n            QMessageBox.critical(self, \"\u6587\u4ef6\u9519\u8bef\", \"\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u6587\u4ef6\")\n        except Exception as e:\n            QMessageBox.critical(self, \"\u9519\u8bef\", f\"\u52a0\u8f7dXML\u6587\u4ef6\u65f6\u53d1\u751f\u9519\u8bef: {str(e)}\")\n\n    def start_async_loading(self, root_element):\n        \"\"\"\u5f00\u59cb\u5f02\u6b65\u52a0\u8f7dXML\u6570\u636e\n\n        Args:\n            root_element: \u8981\u52a0\u8f7d\u7684\u6839XML\u5143\u7d20\n        \"\"\"\n        try:\n            # \u505c\u6b62\u4e4b\u524d\u7684\u52a0\u8f7d\n            if self.loading_timer.isActive():\n                self.loading_timer.stop()\n\n            # \u6e05\u7a7a\u73b0\u6709\u6570\u636e\n            self.xml_tree.clear()\n            self.xml_tree.add_root_item()\n\n            # \u8ba1\u7b97\u603b\u5143\u7d20\u6570\u91cf\n            self.total_elements = self._count_elements(root_element)\n            self.processed_elements = 0\n\n            # \u51c6\u5907\u52a0\u8f7d\u961f\u5217\n            self.loading_queue = []\n            root_item = self.xml_tree.topLevelItem(0)\n            if isinstance(root_item, XmlTreeItem):\n                self._prepare_loading_queue(root_element, root_item)\n\n            # \u663e\u793a\u8fdb\u5ea6\u6761\u548c\u72b6\u6001\n            self.progress_bar.setVisible(True)\n            self.progress_bar.setMaximum(self.total_elements)\n            self.progress_bar.setValue(0)\n            self.status_label.setVisible(True)\n            self.status_label.setText(f\"\u6b63\u5728\u52a0\u8f7dXML\u6587\u4ef6... (0/{self.total_elements})\")\n\n            # \u7981\u7528\u52a0\u8f7d\u6309\u94ae\n            self.btn_load.setEnabled(False)\n\n            # \u5f00\u59cb\u5b9a\u65f6\u5668\n            self.loading_timer.start(10)  # \u6bcf10ms\u5904\u7406\u4e00\u6279\n\n        except Exception as e:\n            QMessageBox.critical(self, \"\u9519\u8bef\", f\"\u51c6\u5907\u52a0\u8f7d\u65f6\u53d1\u751f\u9519\u8bef\uff1a{str(e)}\")\n            self._finish_loading()\n\n    def _count_elements(self, element):\n        \"\"\"\u9012\u5f52\u8ba1\u7b97XML\u5143\u7d20\u603b\u6570\n\n        Args:\n            element: \u8981\u8ba1\u7b97\u7684XML\u5143\u7d20\n\n        Returns:\n            int: \u5143\u7d20\u603b\u6570\n        \"\"\"\n        count = 1\n        for child in element:\n            count += self._count_elements(child)\n        return count\n\n    def _prepare_loading_queue(self, xml_element, tree_item):\n        \"\"\"\u51c6\u5907\u52a0\u8f7d\u961f\u5217\n\n        Args:\n            xml_element: \u8981\u52a0\u8f7d\u7684XML\u5143\u7d20\n            tree_item: \u5bf9\u5e94\u7684\u6811\u5f62\u9879\n        \"\"\"\n        # \u6dfb\u52a0\u5f53\u524d\u5143\u7d20\u5230\u961f\u5217\n        self.loading_queue.append((xml_element, tree_item, 'self'))\n\n        # \u6dfb\u52a0\u5b50\u5143\u7d20\u5230\u961f\u5217\n        for child_element in xml_element:\n            child_item = XmlTreeItem(tree_item)\n            tree_item.addChild(child_item)\n            self.loading_queue.append((child_element, child_item, 'child'))\n            # \u9012\u5f52\u6dfb\u52a0\u5b50\u5143\u7d20\u7684\u5b50\u5143\u7d20\n            self._prepare_loading_queue(child_element, child_item)\n\n    def process_loading_batch(self):\n        \"\"\"\u5904\u7406\u4e00\u6279\u52a0\u8f7d\u4efb\u52a1\"\"\"\n        batch_size = 5  # \u6bcf\u6279\u5904\u74065\u4e2a\u5143\u7d20\n        processed_in_batch = 0\n\n        while self.loading_queue and processed_in_batch &lt; batch_size:\n            xml_element, tree_item, load_type = self.loading_queue.pop(0)\n\n            try:\n                if load_type == 'self':\n                    # \u52a0\u8f7d\u5143\u7d20\u81ea\u8eab\u7684\u5c5e\u6027\u548c\u6587\u672c\n                    tree_item.tag_name = xml_element.tag\n                    tree_item.tag_edit.setText(tree_item.tag_name)\n\n                    # \u52a0\u8f7d\u5c5e\u6027\n                    tree_item.attributes = dict(xml_element.attrib)\n                    tree_item.update_attributes_display()\n\n                    # \u52a0\u8f7d\u6587\u672c\u5185\u5bb9\n                    if xml_element.text and xml_element.text.strip():\n                        tree_item.text_content = xml_element.text.strip()\n                        tree_item.text_edit.setText(tree_item.text_content)\n\n                self.processed_elements += 1\n                processed_in_batch += 1\n\n                # \u66f4\u65b0\u8fdb\u5ea6\n                self.progress_bar.setValue(self.processed_elements)\n                self.status_label.setText(\n                    f\"\u6b63\u5728\u52a0\u8f7dXML\u6587\u4ef6... ({self.processed_elements}/{self.total_elements}) - {xml_element.tag}\"\n                )\n\n            except Exception as e:\n                print(f\"\u52a0\u8f7d\u5143\u7d20\u65f6\u51fa\u9519: {e}\")\n                self.processed_elements += 1\n\n        # \u68c0\u67e5\u662f\u5426\u5b8c\u6210\n        if not self.loading_queue:\n            self._finish_loading()\n\n    def _finish_loading(self):\n        \"\"\"\u5b8c\u6210\u52a0\u8f7d\"\"\"\n        self.loading_timer.stop()\n        self.progress_bar.setVisible(False)\n        self.status_label.setVisible(False)\n        self.btn_load.setEnabled(True)\n\n        # \u5c55\u5f00\u6839\u8282\u70b9\n        if self.xml_tree.topLevelItemCount() &gt; 0:\n            root_item = self.xml_tree.topLevelItem(0)\n            self.xml_tree.expandItem(root_item)\n\n        # \u66f4\u65b0\u9884\u89c8\n        self.update_preview()\n\n        QMessageBox.information(self, \"\u6210\u529f\", f\"XML\u6587\u4ef6\u52a0\u8f7d\u5b8c\u6210\uff01\u5171\u5904\u7406 {self.processed_elements} \u4e2a\u5143\u7d20\u3002\")\n\n    def on_tree_changed(self):\n        \"\"\"\u6811\u5f62\u7ed3\u6784\u6539\u53d8\u65f6\u66f4\u65b0\u9884\u89c8\"\"\"\n        self.update_preview()\n\n    def update_preview(self):\n        \"\"\"\u66f4\u65b0\u5b9e\u65f6\u9884\u89c8\"\"\"\n        xml_element = self.xml_tree.get_xml_data()\n        formatted_xml = XmlUtils.format_xml(xml_element)\n        self.preview_text.setPlainText(formatted_xml)\n\n    def add_root_element(self):\n        \"\"\"\u6dfb\u52a0\u6839\u7ea7\u5143\u7d20\"\"\"\n        if self.xml_tree.topLevelItemCount() &gt; 0:\n            root_item = self.xml_tree.topLevelItem(0)\n            if isinstance(root_item, XmlTreeItem):\n                root_item.add_child_item()\n\n    def clear_all_elements(self):\n        \"\"\"\u6e05\u7a7a\u6240\u6709\u5143\u7d20\"\"\"\n        reply = QMessageBox.question(\n            self, \"\u786e\u8ba4\", \"\u786e\u5b9a\u8981\u6e05\u7a7a\u6240\u6709\u5143\u7d20\u5417\uff1f\",\n            QMessageBox.Yes | QMessageBox.No,\n            QMessageBox.No\n        )\n\n        if reply == QMessageBox.Yes:\n            self.xml_tree.clear()\n            self.xml_tree.add_root_item()\n            self.update_preview()\n\n    def get_xml_data(self):\n        \"\"\"\u83b7\u53d6\u5f53\u524d\u7684XML\u6570\u636e\n\n        Returns:\n            ET.Element or None: \u5f53\u524dXML\u6570\u636e\u6216None\n        \"\"\"\n        return self.xml_tree.get_xml_data()\n\n    def load_xml_data(self, xml_element):\n        \"\"\"\u52a0\u8f7dXML\u6570\u636e - \u5df2\u5f03\u7528\uff0c\u4f7f\u7528start_async_loading\u66ff\u4ee3\n\n        Args:\n            xml_element: \u8981\u52a0\u8f7d\u7684XML\u5143\u7d20\n        \"\"\"\n        # \u91cd\u5b9a\u5411\u5230\u5f02\u6b65\u52a0\u8f7d\u65b9\u6cd5\n        self.start_async_loading(xml_element)\n\n    def preview_xml(self):\n        \"\"\"\u9884\u89c8XML\"\"\"\n        try:\n            xml_element = self.get_xml_data()\n            if xml_element is None:\n                QMessageBox.information(self, \"\u63d0\u793a\", \"\u6ca1\u6709\u6709\u6548\u7684XML\u6570\u636e\u53ef\u9884\u89c8\uff01\")\n                return\n\n            preview_dialog = XmlPreviewDialog(xml_element, self)\n            preview_dialog.exec_()\n\n        except Exception as e:\n            QMessageBox.critical(self, \"\u9519\u8bef\", f\"\u9884\u89c8XML\u65f6\u53d1\u751f\u9519\u8bef: {str(e)}\")\n\n    def download_xml(self):\n        \"\"\"\u4e0b\u8f7dXML\u6587\u4ef6\"\"\"\n        try:\n            xml_element = self.get_xml_data()\n            if xml_element is None:\n                QMessageBox.information(self, \"\u63d0\u793a\", \"\u6ca1\u6709\u6709\u6548\u7684XML\u6570\u636e\u53ef\u4e0b\u8f7d\uff01\")\n                return\n\n            # \u9009\u62e9\u4fdd\u5b58\u8def\u5f84\n            file_path, _ = QFileDialog.getSaveFileName(\n                self, \"\u4fdd\u5b58XML\u6587\u4ef6\", \"data.xml\", \"XML\u6587\u4ef6 (*.xml)\"\n            )\n\n            if file_path:\n                XmlUtils.save_xml_to_file(xml_element, file_path)\n                QMessageBox.information(self, \"\u6210\u529f\", f\"XML\u6587\u4ef6\u5df2\u4fdd\u5b58\u5230: {file_path}\")\n\n        except Exception as e:\n            QMessageBox.critical(self, \"\u9519\u8bef\", f\"\u4fdd\u5b58XML\u6587\u4ef6\u65f6\u53d1\u751f\u9519\u8bef: {str(e)}\")\n</code></pre>"},{"location":"API/xml_editor/#src.components.XmlEditor.XmlEditor.XmlEditor.__init__","title":"<code>__init__(parent=None)</code>","text":"<p>\u521d\u59cb\u5316XML\u7f16\u8f91\u5668</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <p>\u7236\u7ea7\u7a97\u53e3</p> <code>None</code> Source code in <code>src\\components\\XmlEditor\\XmlEditor.py</code> <pre><code>def __init__(self, parent=None):\n    \"\"\"\u521d\u59cb\u5316XML\u7f16\u8f91\u5668\n\n    Args:\n        parent: \u7236\u7ea7\u7a97\u53e3\n    \"\"\"\n    super().__init__(parent)\n    self.ui = Ui_XmlEditor()\n    self.ui.setupUi(self)\n    self.config = XmlEditorConfig()\n\n    # \u5f02\u6b65\u52a0\u8f7d\u76f8\u5173\u5c5e\u6027\n    self.loading_timer = QTimer()\n    self.loading_queue = []\n    self.current_loading_item = None\n    self.total_elements = 0\n    self.processed_elements = 0\n\n    self.setup_tree_editor()\n    self.setup_connections()\n    self.setup_async_loading()\n</code></pre>"},{"location":"API/xml_editor/#src.components.XmlEditor.XmlEditor.XmlEditor.add_root_element","title":"<code>add_root_element()</code>","text":"<p>\u6dfb\u52a0\u6839\u7ea7\u5143\u7d20</p> Source code in <code>src\\components\\XmlEditor\\XmlEditor.py</code> <pre><code>def add_root_element(self):\n    \"\"\"\u6dfb\u52a0\u6839\u7ea7\u5143\u7d20\"\"\"\n    if self.xml_tree.topLevelItemCount() &gt; 0:\n        root_item = self.xml_tree.topLevelItem(0)\n        if isinstance(root_item, XmlTreeItem):\n            root_item.add_child_item()\n</code></pre>"},{"location":"API/xml_editor/#src.components.XmlEditor.XmlEditor.XmlEditor.clear_all_elements","title":"<code>clear_all_elements()</code>","text":"<p>\u6e05\u7a7a\u6240\u6709\u5143\u7d20</p> Source code in <code>src\\components\\XmlEditor\\XmlEditor.py</code> <pre><code>def clear_all_elements(self):\n    \"\"\"\u6e05\u7a7a\u6240\u6709\u5143\u7d20\"\"\"\n    reply = QMessageBox.question(\n        self, \"\u786e\u8ba4\", \"\u786e\u5b9a\u8981\u6e05\u7a7a\u6240\u6709\u5143\u7d20\u5417\uff1f\",\n        QMessageBox.Yes | QMessageBox.No,\n        QMessageBox.No\n    )\n\n    if reply == QMessageBox.Yes:\n        self.xml_tree.clear()\n        self.xml_tree.add_root_item()\n        self.update_preview()\n</code></pre>"},{"location":"API/xml_editor/#src.components.XmlEditor.XmlEditor.XmlEditor.download_xml","title":"<code>download_xml()</code>","text":"<p>\u4e0b\u8f7dXML\u6587\u4ef6</p> Source code in <code>src\\components\\XmlEditor\\XmlEditor.py</code> <pre><code>def download_xml(self):\n    \"\"\"\u4e0b\u8f7dXML\u6587\u4ef6\"\"\"\n    try:\n        xml_element = self.get_xml_data()\n        if xml_element is None:\n            QMessageBox.information(self, \"\u63d0\u793a\", \"\u6ca1\u6709\u6709\u6548\u7684XML\u6570\u636e\u53ef\u4e0b\u8f7d\uff01\")\n            return\n\n        # \u9009\u62e9\u4fdd\u5b58\u8def\u5f84\n        file_path, _ = QFileDialog.getSaveFileName(\n            self, \"\u4fdd\u5b58XML\u6587\u4ef6\", \"data.xml\", \"XML\u6587\u4ef6 (*.xml)\"\n        )\n\n        if file_path:\n            XmlUtils.save_xml_to_file(xml_element, file_path)\n            QMessageBox.information(self, \"\u6210\u529f\", f\"XML\u6587\u4ef6\u5df2\u4fdd\u5b58\u5230: {file_path}\")\n\n    except Exception as e:\n        QMessageBox.critical(self, \"\u9519\u8bef\", f\"\u4fdd\u5b58XML\u6587\u4ef6\u65f6\u53d1\u751f\u9519\u8bef: {str(e)}\")\n</code></pre>"},{"location":"API/xml_editor/#src.components.XmlEditor.XmlEditor.XmlEditor.get_xml_data","title":"<code>get_xml_data()</code>","text":"<p>\u83b7\u53d6\u5f53\u524d\u7684XML\u6570\u636e</p> <p>Returns:</p> Type Description <p>ET.Element or None: \u5f53\u524dXML\u6570\u636e\u6216None</p> Source code in <code>src\\components\\XmlEditor\\XmlEditor.py</code> <pre><code>def get_xml_data(self):\n    \"\"\"\u83b7\u53d6\u5f53\u524d\u7684XML\u6570\u636e\n\n    Returns:\n        ET.Element or None: \u5f53\u524dXML\u6570\u636e\u6216None\n    \"\"\"\n    return self.xml_tree.get_xml_data()\n</code></pre>"},{"location":"API/xml_editor/#src.components.XmlEditor.XmlEditor.XmlEditor.load_xml_data","title":"<code>load_xml_data(xml_element)</code>","text":"<p>\u52a0\u8f7dXML\u6570\u636e - \u5df2\u5f03\u7528\uff0c\u4f7f\u7528start_async_loading\u66ff\u4ee3</p> <p>Parameters:</p> Name Type Description Default <code>xml_element</code> <p>\u8981\u52a0\u8f7d\u7684XML\u5143\u7d20</p> required Source code in <code>src\\components\\XmlEditor\\XmlEditor.py</code> <pre><code>def load_xml_data(self, xml_element):\n    \"\"\"\u52a0\u8f7dXML\u6570\u636e - \u5df2\u5f03\u7528\uff0c\u4f7f\u7528start_async_loading\u66ff\u4ee3\n\n    Args:\n        xml_element: \u8981\u52a0\u8f7d\u7684XML\u5143\u7d20\n    \"\"\"\n    # \u91cd\u5b9a\u5411\u5230\u5f02\u6b65\u52a0\u8f7d\u65b9\u6cd5\n    self.start_async_loading(xml_element)\n</code></pre>"},{"location":"API/xml_editor/#src.components.XmlEditor.XmlEditor.XmlEditor.on_tree_changed","title":"<code>on_tree_changed()</code>","text":"<p>\u6811\u5f62\u7ed3\u6784\u6539\u53d8\u65f6\u66f4\u65b0\u9884\u89c8</p> Source code in <code>src\\components\\XmlEditor\\XmlEditor.py</code> <pre><code>def on_tree_changed(self):\n    \"\"\"\u6811\u5f62\u7ed3\u6784\u6539\u53d8\u65f6\u66f4\u65b0\u9884\u89c8\"\"\"\n    self.update_preview()\n</code></pre>"},{"location":"API/xml_editor/#src.components.XmlEditor.XmlEditor.XmlEditor.open_xml_file","title":"<code>open_xml_file()</code>","text":"<p>\u6253\u5f00\u5e76\u52a0\u8f7dXML\u6587\u4ef6</p> Source code in <code>src\\components\\XmlEditor\\XmlEditor.py</code> <pre><code>def open_xml_file(self):\n    \"\"\"\u6253\u5f00\u5e76\u52a0\u8f7dXML\u6587\u4ef6\"\"\"\n    try:\n        # \u9009\u62e9\u6587\u4ef6\n        file_path, _ = QFileDialog.getOpenFileName(\n            self, \"\u9009\u62e9XML\u6587\u4ef6\", \"\", \"XML\u6587\u4ef6 (*.xml);;\u6240\u6709\u6587\u4ef6 (*)\"\n        )\n\n        if not file_path:\n            return\n\n        # \u8bfb\u53d6\u6587\u4ef6\u5185\u5bb9\n        try:\n            # \u4f18\u5148\u5c1d\u8bd5UTF-8\u7f16\u7801\n            with open(file_path, 'r', encoding='utf-8') as f:\n                content = f.read()\n        except UnicodeDecodeError:\n            # \u5982\u679cUTF-8\u5931\u8d25\uff0c\u5c1d\u8bd5\u5176\u4ed6\u7f16\u7801\n            try:\n                with open(file_path, 'r', encoding='gbk') as f:\n                    content = f.read()\n            except UnicodeDecodeError:\n                with open(file_path, 'r', encoding='latin-1') as f:\n                    content = f.read()\n\n        # \u89e3\u6790XML\u5185\u5bb9\n        root = ET.fromstring(content)\n\n        # \u4f7f\u7528\u5f02\u6b65\u52a0\u8f7d\u673a\u5236\n        self.start_async_loading(root)\n\n    except ET.ParseError as e:\n        QMessageBox.critical(self, \"XML\u89e3\u6790\u9519\u8bef\", f\"XML\u6587\u4ef6\u683c\u5f0f\u9519\u8bef: {str(e)}\")\n    except FileNotFoundError:\n        QMessageBox.critical(self, \"\u6587\u4ef6\u9519\u8bef\", \"\u627e\u4e0d\u5230\u6307\u5b9a\u7684\u6587\u4ef6\")\n    except Exception as e:\n        QMessageBox.critical(self, \"\u9519\u8bef\", f\"\u52a0\u8f7dXML\u6587\u4ef6\u65f6\u53d1\u751f\u9519\u8bef: {str(e)}\")\n</code></pre>"},{"location":"API/xml_editor/#src.components.XmlEditor.XmlEditor.XmlEditor.preview_xml","title":"<code>preview_xml()</code>","text":"<p>\u9884\u89c8XML</p> Source code in <code>src\\components\\XmlEditor\\XmlEditor.py</code> <pre><code>def preview_xml(self):\n    \"\"\"\u9884\u89c8XML\"\"\"\n    try:\n        xml_element = self.get_xml_data()\n        if xml_element is None:\n            QMessageBox.information(self, \"\u63d0\u793a\", \"\u6ca1\u6709\u6709\u6548\u7684XML\u6570\u636e\u53ef\u9884\u89c8\uff01\")\n            return\n\n        preview_dialog = XmlPreviewDialog(xml_element, self)\n        preview_dialog.exec_()\n\n    except Exception as e:\n        QMessageBox.critical(self, \"\u9519\u8bef\", f\"\u9884\u89c8XML\u65f6\u53d1\u751f\u9519\u8bef: {str(e)}\")\n</code></pre>"},{"location":"API/xml_editor/#src.components.XmlEditor.XmlEditor.XmlEditor.process_loading_batch","title":"<code>process_loading_batch()</code>","text":"<p>\u5904\u7406\u4e00\u6279\u52a0\u8f7d\u4efb\u52a1</p> Source code in <code>src\\components\\XmlEditor\\XmlEditor.py</code> <pre><code>def process_loading_batch(self):\n    \"\"\"\u5904\u7406\u4e00\u6279\u52a0\u8f7d\u4efb\u52a1\"\"\"\n    batch_size = 5  # \u6bcf\u6279\u5904\u74065\u4e2a\u5143\u7d20\n    processed_in_batch = 0\n\n    while self.loading_queue and processed_in_batch &lt; batch_size:\n        xml_element, tree_item, load_type = self.loading_queue.pop(0)\n\n        try:\n            if load_type == 'self':\n                # \u52a0\u8f7d\u5143\u7d20\u81ea\u8eab\u7684\u5c5e\u6027\u548c\u6587\u672c\n                tree_item.tag_name = xml_element.tag\n                tree_item.tag_edit.setText(tree_item.tag_name)\n\n                # \u52a0\u8f7d\u5c5e\u6027\n                tree_item.attributes = dict(xml_element.attrib)\n                tree_item.update_attributes_display()\n\n                # \u52a0\u8f7d\u6587\u672c\u5185\u5bb9\n                if xml_element.text and xml_element.text.strip():\n                    tree_item.text_content = xml_element.text.strip()\n                    tree_item.text_edit.setText(tree_item.text_content)\n\n            self.processed_elements += 1\n            processed_in_batch += 1\n\n            # \u66f4\u65b0\u8fdb\u5ea6\n            self.progress_bar.setValue(self.processed_elements)\n            self.status_label.setText(\n                f\"\u6b63\u5728\u52a0\u8f7dXML\u6587\u4ef6... ({self.processed_elements}/{self.total_elements}) - {xml_element.tag}\"\n            )\n\n        except Exception as e:\n            print(f\"\u52a0\u8f7d\u5143\u7d20\u65f6\u51fa\u9519: {e}\")\n            self.processed_elements += 1\n\n    # \u68c0\u67e5\u662f\u5426\u5b8c\u6210\n    if not self.loading_queue:\n        self._finish_loading()\n</code></pre>"},{"location":"API/xml_editor/#src.components.XmlEditor.XmlEditor.XmlEditor.setup_async_loading","title":"<code>setup_async_loading()</code>","text":"<p>\u8bbe\u7f6e\u5f02\u6b65\u52a0\u8f7d\u673a\u5236</p> Source code in <code>src\\components\\XmlEditor\\XmlEditor.py</code> <pre><code>def setup_async_loading(self):\n    \"\"\"\u8bbe\u7f6e\u5f02\u6b65\u52a0\u8f7d\u673a\u5236\"\"\"\n    self.loading_timer.timeout.connect(self.process_loading_batch)\n    self.loading_timer.setSingleShot(False)\n</code></pre>"},{"location":"API/xml_editor/#src.components.XmlEditor.XmlEditor.XmlEditor.setup_connections","title":"<code>setup_connections()</code>","text":"<p>\u8bbe\u7f6e\u4fe1\u53f7\u8fde\u63a5</p> Source code in <code>src\\components\\XmlEditor\\XmlEditor.py</code> <pre><code>def setup_connections(self):\n    \"\"\"\u8bbe\u7f6e\u4fe1\u53f7\u8fde\u63a5\"\"\"\n    self.ui.btn_add_element.clicked.connect(self.add_root_element)\n    self.ui.btn_clear_all.clicked.connect(self.clear_all_elements)\n    self.ui.btn_preview.clicked.connect(self.preview_xml)\n    self.ui.btn_download.clicked.connect(self.download_xml)\n\n    # \u65b0\u589e\uff1a\u52a0\u8f7dXML\u6309\u94ae\n    self.btn_load = QPushButton(\"\u52a0\u8f7dXML\")\n    # \u63d2\u5165\u5230\u9876\u90e8\u5de5\u5177\u680f\uff0c\u5728\"\u6dfb\u52a0\u5143\u7d20\"\u6309\u94ae\u4e4b\u524d\n    try:\n        self.ui.horizontalLayout_top.insertWidget(2, self.btn_load)\n    except Exception:\n        # \u5982\u679c\u63d2\u5165\u5931\u8d25\u5219\u8ffd\u52a0\n        self.ui.horizontalLayout_top.addWidget(self.btn_load)\n    self.btn_load.clicked.connect(self.open_xml_file)\n\n    # \u4fee\u6539\u6309\u94ae\u6587\u672c\n    self.ui.btn_add_element.setText(\"\u6dfb\u52a0\u6839\u7ea7\u5143\u7d20\")\n</code></pre>"},{"location":"API/xml_editor/#src.components.XmlEditor.XmlEditor.XmlEditor.setup_tree_editor","title":"<code>setup_tree_editor()</code>","text":"<p>\u8bbe\u7f6e\u6811\u5f62\u7f16\u8f91\u5668</p> Source code in <code>src\\components\\XmlEditor\\XmlEditor.py</code> <pre><code>def setup_tree_editor(self):\n    \"\"\"\u8bbe\u7f6e\u6811\u5f62\u7f16\u8f91\u5668\"\"\"\n    # \u79fb\u9664\u539f\u6709\u7684\u6eda\u52a8\u533a\u57df\uff0c\u66ff\u6362\u4e3a\u5206\u5272\u5668\n    self.ui.verticalLayout.removeWidget(self.ui.scrollArea)\n    self.ui.scrollArea.setParent(None)\n\n    # \u521b\u5efa\u5206\u5272\u5668\n    splitter = QSplitter(Qt.Horizontal)\n\n    # \u5de6\u4fa7\uff1a\u6811\u5f62\u7f16\u8f91\u5668\n    left_widget = self._create_tree_widget()\n\n    # \u53f3\u4fa7\uff1a\u5b9e\u65f6\u9884\u89c8\n    right_widget = self._create_preview_widget()\n\n    # \u6dfb\u52a0\u5230\u5206\u5272\u5668\n    splitter.addWidget(left_widget)\n    splitter.addWidget(right_widget)\n    splitter.setSizes(self.config.SPLITTER_SIZES)\n\n    # \u6dfb\u52a0\u5230\u4e3b\u5e03\u5c40\n    self.ui.verticalLayout.insertWidget(1, splitter)\n\n    # \u521d\u59cb\u66f4\u65b0\u9884\u89c8\n    self.update_preview()\n</code></pre>"},{"location":"API/xml_editor/#src.components.XmlEditor.XmlEditor.XmlEditor.start_async_loading","title":"<code>start_async_loading(root_element)</code>","text":"<p>\u5f00\u59cb\u5f02\u6b65\u52a0\u8f7dXML\u6570\u636e</p> <p>Parameters:</p> Name Type Description Default <code>root_element</code> <p>\u8981\u52a0\u8f7d\u7684\u6839XML\u5143\u7d20</p> required Source code in <code>src\\components\\XmlEditor\\XmlEditor.py</code> <pre><code>def start_async_loading(self, root_element):\n    \"\"\"\u5f00\u59cb\u5f02\u6b65\u52a0\u8f7dXML\u6570\u636e\n\n    Args:\n        root_element: \u8981\u52a0\u8f7d\u7684\u6839XML\u5143\u7d20\n    \"\"\"\n    try:\n        # \u505c\u6b62\u4e4b\u524d\u7684\u52a0\u8f7d\n        if self.loading_timer.isActive():\n            self.loading_timer.stop()\n\n        # \u6e05\u7a7a\u73b0\u6709\u6570\u636e\n        self.xml_tree.clear()\n        self.xml_tree.add_root_item()\n\n        # \u8ba1\u7b97\u603b\u5143\u7d20\u6570\u91cf\n        self.total_elements = self._count_elements(root_element)\n        self.processed_elements = 0\n\n        # \u51c6\u5907\u52a0\u8f7d\u961f\u5217\n        self.loading_queue = []\n        root_item = self.xml_tree.topLevelItem(0)\n        if isinstance(root_item, XmlTreeItem):\n            self._prepare_loading_queue(root_element, root_item)\n\n        # \u663e\u793a\u8fdb\u5ea6\u6761\u548c\u72b6\u6001\n        self.progress_bar.setVisible(True)\n        self.progress_bar.setMaximum(self.total_elements)\n        self.progress_bar.setValue(0)\n        self.status_label.setVisible(True)\n        self.status_label.setText(f\"\u6b63\u5728\u52a0\u8f7dXML\u6587\u4ef6... (0/{self.total_elements})\")\n\n        # \u7981\u7528\u52a0\u8f7d\u6309\u94ae\n        self.btn_load.setEnabled(False)\n\n        # \u5f00\u59cb\u5b9a\u65f6\u5668\n        self.loading_timer.start(10)  # \u6bcf10ms\u5904\u7406\u4e00\u6279\n\n    except Exception as e:\n        QMessageBox.critical(self, \"\u9519\u8bef\", f\"\u51c6\u5907\u52a0\u8f7d\u65f6\u53d1\u751f\u9519\u8bef\uff1a{str(e)}\")\n        self._finish_loading()\n</code></pre>"},{"location":"API/xml_editor/#src.components.XmlEditor.XmlEditor.XmlEditor.update_preview","title":"<code>update_preview()</code>","text":"<p>\u66f4\u65b0\u5b9e\u65f6\u9884\u89c8</p> Source code in <code>src\\components\\XmlEditor\\XmlEditor.py</code> <pre><code>def update_preview(self):\n    \"\"\"\u66f4\u65b0\u5b9e\u65f6\u9884\u89c8\"\"\"\n    xml_element = self.xml_tree.get_xml_data()\n    formatted_xml = XmlUtils.format_xml(xml_element)\n    self.preview_text.setPlainText(formatted_xml)\n</code></pre>"}]}